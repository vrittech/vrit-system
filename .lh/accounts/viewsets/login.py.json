{
    "sourceFile": "accounts/viewsets/login.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1731660698398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731663307741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             if user.is_active == False:\n                 return Response({'error': 'Your Account is inactive'}, status=status.HTTP_401_UNAUTHORIZED)\n             login(request, user)\n             refresh = RefreshToken.for_user(user)\n-            refresh['remember_me'] = request.data.get('remember_me',False)\n+            # refresh['remember_me'] = request.data.get('remember_me',False)\n             user_obj = CustomUserReadSerializer(request.user,context={'request': request}) \n             return Response({\n                 'access': str(refresh.access_token),\n                 'refresh': str(refresh),\n"
                },
                {
                    "date": 1731663454028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             if user.is_active == False:\n                 return Response({'error': 'Your Account is inactive'}, status=status.HTTP_401_UNAUTHORIZED)\n             login(request, user)\n             refresh = RefreshToken.for_user(user)\n-            # refresh['remember_me'] = request.data.get('remember_me',False)\n+            refresh['remember_me'] = request.data.get('remember_me',False)\n             user_obj = CustomUserReadSerializer(request.user,context={'request': request}) \n             return Response({\n                 'access': str(refresh.access_token),\n                 'refresh': str(refresh),\n"
                },
                {
                    "date": 1732598860519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,59 +1,59 @@\n-from rest_framework.views import APIView\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-from rest_framework import status\n-from django.views.decorators.csrf import csrf_exempt\n-from ..serializers.custom_user_serializers import CustomUserReadSerializer\n-from rest_framework.response import Response\n-from accounts.models import CustomUser\n-from django.contrib.auth import authenticate,login\n-from rest_framework_simplejwt.tokens import RefreshToken\n+# from rest_framework.views import APIView\n+# from drf_yasg.utils import swagger_auto_schema\n+# from drf_yasg import openapi\n+# from rest_framework import status\n+# from django.views.decorators.csrf import csrf_exempt\n+# from ..serializers.custom_user_serializers import CustomUserReadSerializer\n+# from rest_framework.response import Response\n+# from accounts.models import CustomUser\n+# from django.contrib.auth import authenticate,login\n+# from rest_framework_simplejwt.tokens import RefreshToken\n \n-class LoginView(APIView):\n-    @swagger_auto_schema(\n-        request_body=openapi.Schema(\n-            type=openapi.TYPE_OBJECT,\n-            properties={\n-                'email': openapi.Schema(type=openapi.TYPE_STRING),\n-                'password': openapi.Schema(type=openapi.TYPE_STRING),\n-            },\n-            required=['email', 'password']\n-        ),\n-        # responses={200: MyResponseSerializer},\n-        operation_summary=\"Login and get token\",\n-        operation_description=\"Login and get token\",\n-    )\n-    @csrf_exempt\n-    def post(self, request):\n-        username_or_email = request.data.get('email')\n-        password = request.data.get('password')\n+# class LoginView(APIView):\n+#     @swagger_auto_schema(\n+#         request_body=openapi.Schema(\n+#             type=openapi.TYPE_OBJECT,\n+#             properties={\n+#                 'email': openapi.Schema(type=openapi.TYPE_STRING),\n+#                 'password': openapi.Schema(type=openapi.TYPE_STRING),\n+#             },\n+#             required=['email', 'password']\n+#         ),\n+#         # responses={200: MyResponseSerializer},\n+#         operation_summary=\"Login and get token\",\n+#         operation_description=\"Login and get token\",\n+#     )\n+#     @csrf_exempt\n+#     def post(self, request):\n+#         username_or_email = request.data.get('email')\n+#         password = request.data.get('password')\n \n-        # Authenticate the user using either username or email\n-        user = authenticate(request, username=username_or_email, password=password)\n-        if user is None:\n-            user = authenticate(request, email=username_or_email, password=password)\n+#         # Authenticate the user using either username or email\n+#         user = authenticate(request, username=username_or_email, password=password)\n+#         if user is None:\n+#             user = authenticate(request, email=username_or_email, password=password)\n \n-        # If the user is authenticated, log them in and generate tokens\n-        if user is not None:\n-            if user.is_active == False:\n-                return Response({'error': 'Your Account is inactive'}, status=status.HTTP_401_UNAUTHORIZED)\n-            login(request, user)\n-            refresh = RefreshToken.for_user(user)\n-            refresh['remember_me'] = request.data.get('remember_me',False)\n-            user_obj = CustomUserReadSerializer(request.user,context={'request': request}) \n-            return Response({\n-                'access': str(refresh.access_token),\n-                'refresh': str(refresh),\n-                'user': user_obj.data,\n-                'message': 'Login successful',\n-            }, status=status.HTTP_200_OK)\n+#         # If the user is authenticated, log them in and generate tokens\n+#         if user is not None:\n+#             if user.is_active == False:\n+#                 return Response({'error': 'Your Account is inactive'}, status=status.HTTP_401_UNAUTHORIZED)\n+#             login(request, user)\n+#             refresh = RefreshToken.for_user(user)\n+#             refresh['remember_me'] = request.data.get('remember_me',False)\n+#             user_obj = CustomUserReadSerializer(request.user,context={'request': request}) \n+#             return Response({\n+#                 'access': str(refresh.access_token),\n+#                 'refresh': str(refresh),\n+#                 'user': user_obj.data,\n+#                 'message': 'Login successful',\n+#             }, status=status.HTTP_200_OK)\n \n-        # If the user is not authenticated, return an error message\n-        else:\n-            from django.db.models import Q\n-            user_obj = CustomUser.objects.filter(Q(username=username_or_email) | Q(email=username_or_email))\n-            if user_obj.exists():\n-                return Response({'error': 'Invalid password'}, status=status.HTTP_401_UNAUTHORIZED)\n-            else:\n-                return Response({'error': 'Invalid username/email'}, status=status.HTTP_401_UNAUTHORIZED)\n+#         # If the user is not authenticated, return an error message\n+#         else:\n+#             from django.db.models import Q\n+#             user_obj = CustomUser.objects.filter(Q(username=username_or_email) | Q(email=username_or_email))\n+#             if user_obj.exists():\n+#                 return Response({'error': 'Invalid password'}, status=status.HTTP_401_UNAUTHORIZED)\n+#             else:\n+#                 return Response({'error': 'Invalid username/email'}, status=status.HTTP_401_UNAUTHORIZED)\n \n"
                },
                {
                    "date": 1732598880369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,4 +56,83 @@\n #                 return Response({'error': 'Invalid password'}, status=status.HTTP_401_UNAUTHORIZED)\n #             else:\n #                 return Response({'error': 'Invalid username/email'}, status=status.HTTP_401_UNAUTHORIZED)\n \n+from rest_framework.views import APIView\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+from rest_framework import status\n+from django.views.decorators.csrf import csrf_exempt\n+from ..serializers.custom_user_serializers import CustomUserReadSerializer\n+from rest_framework.response import Response\n+from accounts.models import CustomUser\n+from django.contrib.auth import authenticate, login\n+from rest_framework_simplejwt.tokens import RefreshToken\n+from django.db.models import Q\n+\n+\n+class LoginView(APIView):\n+    @swagger_auto_schema(\n+        request_body=openapi.Schema(\n+            type=openapi.TYPE_OBJECT,\n+            properties={\n+                'email': openapi.Schema(type=openapi.TYPE_STRING, description='Email or username of the user'),\n+                'password': openapi.Schema(type=openapi.TYPE_STRING, description='Password of the user'),\n+                'remember_me': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Remember me (optional)', default=False),\n+            },\n+            required=['email', 'password'],\n+        ),\n+        responses={\n+            200: openapi.Response(description=\"Login successful with tokens and user details\"),\n+            401: openapi.Response(description=\"Invalid credentials or inactive account\"),\n+        },\n+        operation_summary=\"User Login\",\n+        operation_description=\"Authenticate user credentials and return JWT tokens along with user details.\",\n+    )\n+    @csrf_exempt\n+    def post(self, request):\n+        # Extract credentials from request data\n+        username_or_email = request.data.get('email')\n+        password = request.data.get('password')\n+        remember_me = request.data.get('remember_me', False)\n+\n+        print(f\"Received login request for: {username_or_email}\")  # Log received credentials (email/username)\n+\n+        # Authenticate user by email or username\n+        user = authenticate(request, username=username_or_email, password=password)\n+        if user is None:\n+            print(f\"Initial authentication with username failed for: {username_or_email}\")\n+            user = authenticate(request, email=username_or_email, password=password)\n+\n+        # Handle successful authentication\n+        if user:\n+            print(f\"Authentication successful for: {username_or_email}\")  # Log successful authentication\n+            if not user.is_active:\n+                print(f\"Inactive account for: {username_or_email}\")  # Log inactive account\n+                return Response({'error': 'Your account is inactive.'}, status=status.HTTP_401_UNAUTHORIZED)\n+\n+            # Log the user in\n+            login(request, user)\n+            print(f\"User {username_or_email} logged in successfully.\")  # Log login action\n+\n+            # Generate JWT tokens\n+            refresh = RefreshToken.for_user(user)\n+            refresh['remember_me'] = remember_me\n+\n+            # Serialize user details\n+            user_data = CustomUserReadSerializer(user, context={'request': request}).data\n+\n+            return Response({\n+                'access': str(refresh.access_token),\n+                'refresh': str(refresh),\n+                'user': user_data,\n+                'message': 'Login successful',\n+            }, status=status.HTTP_200_OK)\n+\n+        # Handle authentication failure\n+        user_exists = CustomUser.objects.filter(Q(username=username_or_email) | Q(email=username_or_email)).exists()\n+        if user_exists:\n+            print(f\"Authentication failed for {username_or_email}: Invalid password.\")  # Log invalid password\n+            return Response({'error': 'Invalid password'}, status=status.HTTP_401_UNAUTHORIZED)\n+        else:\n+            print(f\"Authentication failed for {username_or_email}: User does not exist.\")  # Log non-existent user\n+            return Response({'error': 'Invalid username/email'}, status=status.HTTP_401_UNAUTHORIZED)\n"
                },
                {
                    "date": 1732600038525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,83 +56,4 @@\n #                 return Response({'error': 'Invalid password'}, status=status.HTTP_401_UNAUTHORIZED)\n #             else:\n #                 return Response({'error': 'Invalid username/email'}, status=status.HTTP_401_UNAUTHORIZED)\n \n-from rest_framework.views import APIView\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-from rest_framework import status\n-from django.views.decorators.csrf import csrf_exempt\n-from ..serializers.custom_user_serializers import CustomUserReadSerializer\n-from rest_framework.response import Response\n-from accounts.models import CustomUser\n-from django.contrib.auth import authenticate, login\n-from rest_framework_simplejwt.tokens import RefreshToken\n-from django.db.models import Q\n-\n-\n-class LoginView(APIView):\n-    @swagger_auto_schema(\n-        request_body=openapi.Schema(\n-            type=openapi.TYPE_OBJECT,\n-            properties={\n-                'email': openapi.Schema(type=openapi.TYPE_STRING, description='Email or username of the user'),\n-                'password': openapi.Schema(type=openapi.TYPE_STRING, description='Password of the user'),\n-                'remember_me': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Remember me (optional)', default=False),\n-            },\n-            required=['email', 'password'],\n-        ),\n-        responses={\n-            200: openapi.Response(description=\"Login successful with tokens and user details\"),\n-            401: openapi.Response(description=\"Invalid credentials or inactive account\"),\n-        },\n-        operation_summary=\"User Login\",\n-        operation_description=\"Authenticate user credentials and return JWT tokens along with user details.\",\n-    )\n-    @csrf_exempt\n-    def post(self, request):\n-        # Extract credentials from request data\n-        username_or_email = request.data.get('email')\n-        password = request.data.get('password')\n-        remember_me = request.data.get('remember_me', False)\n-\n-        print(f\"Received login request for: {username_or_email}\")  # Log received credentials (email/username)\n-\n-        # Authenticate user by email or username\n-        user = authenticate(request, username=username_or_email, password=password)\n-        if user is None:\n-            print(f\"Initial authentication with username failed for: {username_or_email}\")\n-            user = authenticate(request, email=username_or_email, password=password)\n-\n-        # Handle successful authentication\n-        if user:\n-            print(f\"Authentication successful for: {username_or_email}\")  # Log successful authentication\n-            if not user.is_active:\n-                print(f\"Inactive account for: {username_or_email}\")  # Log inactive account\n-                return Response({'error': 'Your account is inactive.'}, status=status.HTTP_401_UNAUTHORIZED)\n-\n-            # Log the user in\n-            login(request, user)\n-            print(f\"User {username_or_email} logged in successfully.\")  # Log login action\n-\n-            # Generate JWT tokens\n-            refresh = RefreshToken.for_user(user)\n-            refresh['remember_me'] = remember_me\n-\n-            # Serialize user details\n-            user_data = CustomUserReadSerializer(user, context={'request': request}).data\n-\n-            return Response({\n-                'access': str(refresh.access_token),\n-                'refresh': str(refresh),\n-                'user': user_data,\n-                'message': 'Login successful',\n-            }, status=status.HTTP_200_OK)\n-\n-        # Handle authentication failure\n-        user_exists = CustomUser.objects.filter(Q(username=username_or_email) | Q(email=username_or_email)).exists()\n-        if user_exists:\n-            print(f\"Authentication failed for {username_or_email}: Invalid password.\")  # Log invalid password\n-            return Response({'error': 'Invalid password'}, status=status.HTTP_401_UNAUTHORIZED)\n-        else:\n-            print(f\"Authentication failed for {username_or_email}: User does not exist.\")  # Log non-existent user\n-            return Response({'error': 'Invalid username/email'}, status=status.HTTP_401_UNAUTHORIZED)\n"
                }
            ],
            "date": 1731660698398,
            "name": "Commit-0",
            "content": "from rest_framework.views import APIView\nfrom drf_yasg.utils import swagger_auto_schema\nfrom drf_yasg import openapi\nfrom rest_framework import status\nfrom django.views.decorators.csrf import csrf_exempt\nfrom ..serializers.custom_user_serializers import CustomUserReadSerializer\nfrom rest_framework.response import Response\nfrom accounts.models import CustomUser\nfrom django.contrib.auth import authenticate,login\nfrom rest_framework_simplejwt.tokens import RefreshToken\n\nclass LoginView(APIView):\n    @swagger_auto_schema(\n        request_body=openapi.Schema(\n            type=openapi.TYPE_OBJECT,\n            properties={\n                'email': openapi.Schema(type=openapi.TYPE_STRING),\n                'password': openapi.Schema(type=openapi.TYPE_STRING),\n            },\n            required=['email', 'password']\n        ),\n        # responses={200: MyResponseSerializer},\n        operation_summary=\"Login and get token\",\n        operation_description=\"Login and get token\",\n    )\n    @csrf_exempt\n    def post(self, request):\n        username_or_email = request.data.get('email')\n        password = request.data.get('password')\n\n        # Authenticate the user using either username or email\n        user = authenticate(request, username=username_or_email, password=password)\n        if user is None:\n            user = authenticate(request, email=username_or_email, password=password)\n\n        # If the user is authenticated, log them in and generate tokens\n        if user is not None:\n            if user.is_active == False:\n                return Response({'error': 'Your Account is inactive'}, status=status.HTTP_401_UNAUTHORIZED)\n            login(request, user)\n            refresh = RefreshToken.for_user(user)\n            refresh['remember_me'] = request.data.get('remember_me',False)\n            user_obj = CustomUserReadSerializer(request.user,context={'request': request}) \n            return Response({\n                'access': str(refresh.access_token),\n                'refresh': str(refresh),\n                'user': user_obj.data,\n                'message': 'Login successful',\n            }, status=status.HTTP_200_OK)\n\n        # If the user is not authenticated, return an error message\n        else:\n            from django.db.models import Q\n            user_obj = CustomUser.objects.filter(Q(username=username_or_email) | Q(email=username_or_email))\n            if user_obj.exists():\n                return Response({'error': 'Invalid password'}, status=status.HTTP_401_UNAUTHORIZED)\n            else:\n                return Response({'error': 'Invalid username/email'}, status=status.HTTP_401_UNAUTHORIZED)\n\n"
        }
    ]
}