{
    "sourceFile": "accounts/models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1731409947014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731409952142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,7 @@\n         ]\n \n \n from django.contrib.auth.models import Group\n-from django.db import models\n \n class CustomGroup(Group):\n     position = models.IntegerField(default=0)\n"
                },
                {
                    "date": 1731409957341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n from django.db import models\n from django.contrib.auth.models import AbstractUser\n from department.models import Department\n+from django.contrib.auth.models import Group\n \n # Create your models here.\n class CustomUser(AbstractUser):\n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n@@ -29,8 +30,8 @@\n             ('can_verify_user', 'Can verify user'),\n         ]\n \n \n-from django.contrib.auth.models import Group\n \n+\n class CustomGroup(Group):\n     position = models.IntegerField(default=0)\n"
                },
                {
                    "date": 1731409966603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,4 +34,6 @@\n \n \n class CustomGroup(Group):\n     position = models.IntegerField(default=0)\n+    created_at = models.DateTimeField(auto_now_add=True)\n+    updated_at = models.DateTimeField(auto_now=True)\n"
                },
                {
                    "date": 1731409994924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+from django.db import models\n+from django.contrib.auth.models import AbstractUser\n+from department.models import Department\n+from django.contrib.auth.models import Group\n+\n+# Create your models here.\n+class CustomUser(AbstractUser):\n+    avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n+    professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n+\n+    full_name = models.CharField(max_length = 250)\n+    position = models.CharField(max_length = 250,null = True)\n+    department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n+    position = models.CharField(max_length = 250)\n+    email = models.EmailField(max_length = 250,unique = True)\n+\n+\n+    USERNAME_FIELD = 'email'\n+    REQUIRED_FIELDS = ['username']\n+\n+    created_at = models.DateTimeField(auto_now_add=True)\n+    updated_at = models.DateTimeField(auto_now=True)\n+\n+\n+    def __str__(self):\n+        return self.username\n+    \n+    class Meta:\n+        permissions = [\n+            ('can_verify_user', 'Can verify user'),\n+        ]\n+\n+\n+\n+\n+class CustomGroup(Group):\n+    position = models.IntegerField(default=0)\n+    created_at = models.DateTimeField(auto_now_add=True)\n+    updated_at = models.DateTimeField(auto_now=True)\n+    \n+    def __str__(self):\n+        return self.username\n"
                },
                {
                    "date": 1731410000079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,44 +38,5 @@\n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n     \n     def __str__(self):\n-        return self.username\n-from django.db import models\n-from django.contrib.auth.models import AbstractUser\n-from department.models import Department\n-from django.contrib.auth.models import Group\n-\n-# Create your models here.\n-class CustomUser(AbstractUser):\n-    avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n-    professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n-\n-    full_name = models.CharField(max_length = 250)\n-    position = models.CharField(max_length = 250,null = True)\n-    department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n-    position = models.CharField(max_length = 250)\n-    email = models.EmailField(max_length = 250,unique = True)\n-\n-\n-    USERNAME_FIELD = 'email'\n-    REQUIRED_FIELDS = ['username']\n-\n-    created_at = models.DateTimeField(auto_now_add=True)\n-    updated_at = models.DateTimeField(auto_now=True)\n-\n-\n-    def __str__(self):\n-        return self.username\n-    \n-    class Meta:\n-        permissions = [\n-            ('can_verify_user', 'Can verify user'),\n-        ]\n-\n-\n-\n-\n-class CustomGroup(Group):\n-    position = models.IntegerField(default=0)\n-    created_at = models.DateTimeField(auto_now_add=True)\n-    updated_at = models.DateTimeField(auto_now=True)\n+        return self.position\n"
                },
                {
                    "date": 1731410005354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,7 @@\n \n \n class CustomGroup(Group):\n     position = models.IntegerField(default=0)\n-    created_at = models.DateTimeField(auto_now_add=True)\n-    updated_at = models.DateTimeField(auto_now=True)\n     \n     def __str__(self):\n         return self.position\n"
                },
                {
                    "date": 1731410219336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,6 +35,16 @@\n \n class CustomGroup(Group):\n     position = models.IntegerField(default=0)\n     \n+    def save(self, *args, **kwargs):\n+        # Call the original save method to get an ID assigned\n+        super().save(*args, **kwargs)\n+        \n+        # Set position to the ID if it hasn't been set\n+        if self.position == 0:  # or self.position is None, depending on your preference\n+            self.position = self.id\n+            # Save again to update the position\n+            super().save(*args, **kwargs)\n+    \n     def __str__(self):\n         return self.position\n"
                },
                {
                    "date": 1731411434495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,7 +44,5 @@\n         if self.position == 0:  # or self.position is None, depending on your preference\n             self.position = self.id\n             # Save again to update the position\n             super().save(*args, **kwargs)\n-    \n-    def __str__(self):\n-        return self.position\n+\n"
                },
                {
                    "date": 1731411518007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,17 +32,19 @@\n \n \n \n \n-class CustomGroup(Group):\n-    position = models.IntegerField(default=0)\n-    \n+from django.contrib.auth.models import Group\n+from django.db import models\n+\n+class GroupExtension(models.Model):\n+    group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n+    position = models.IntegerField(default=0, unique=True)\n+\n     def save(self, *args, **kwargs):\n-        # Call the original save method to get an ID assigned\n-        super().save(*args, **kwargs)\n-        \n-        # Set position to the ID if it hasn't been set\n-        if self.position == 0:  # or self.position is None, depending on your preference\n-            self.position = self.id\n-            # Save again to update the position\n+        # Set position to the Group ID if position is 0 (or could be None)\n+        if self.position == 0:\n+            super().save(*args, **kwargs)  # Save initially to get the group ID\n+            self.position = self.group.id\n+            super().save(*args, **kwargs)  # Save again to update position with group ID\n+        else:\n             super().save(*args, **kwargs)\n-\n"
                },
                {
                    "date": 1731411523116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,13 +30,8 @@\n             ('can_verify_user', 'Can verify user'),\n         ]\n \n \n-\n-\n-from django.contrib.auth.models import Group\n-from django.db import models\n-\n class GroupExtension(models.Model):\n     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n     position = models.IntegerField(default=0, unique=True)\n \n"
                },
                {
                    "date": 1731411536519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n \n \n class GroupExtension(models.Model):\n     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n-    position = models.IntegerField(default=0, unique=True)\n+    position = models.IntegerField(default=0\n \n     def save(self, *args, **kwargs):\n         # Set position to the Group ID if position is 0 (or could be None)\n         if self.position == 0:\n"
                },
                {
                    "date": 1731411549652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n \n \n class GroupExtension(models.Model):\n     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n-    position = models.IntegerField(default=0\n+    position = models.IntegerField(default=0)\n \n     def save(self, *args, **kwargs):\n         # Set position to the Group ID if position is 0 (or could be None)\n         if self.position == 0:\n"
                },
                {
                    "date": 1731574604186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,10 @@\n \n class GroupExtension(models.Model):\n     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n     position = models.IntegerField(default=0)\n+    \n+    \n \n     def save(self, *args, **kwargs):\n         # Set position to the Group ID if position is 0 (or could be None)\n         if self.position == 0:\n"
                },
                {
                    "date": 1731574609329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n class GroupExtension(models.Model):\n     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n     position = models.IntegerField(default=0)\n     \n-    \n+    def __str__(self):\n+        return self.name\n \n     def save(self, *args, **kwargs):\n         # Set position to the Group ID if position is 0 (or could be None)\n         if self.position == 0:\n"
                },
                {
                    "date": 1731574616382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n class GroupExtension(models.Model):\n     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n     position = models.IntegerField(default=0)\n     \n-    def __str__(self):\n+    def _r__(self):\n         return self.name\n \n     def save(self, *args, **kwargs):\n         # Set position to the Group ID if position is 0 (or could be None)\n"
                },
                {
                    "date": 1731574621685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n class GroupExtension(models.Model):\n     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n     position = models.IntegerField(default=0)\n     \n-    def _r__(self):\n+    def __int__(self):\n         return self.name\n \n     def save(self, *args, **kwargs):\n         # Set position to the Group ID if position is 0 (or could be None)\n"
                },
                {
                    "date": 1731574626779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n     position = models.IntegerField(default=0)\n     \n     def __int__(self):\n-        return self.name\n+        return self.position\n \n     def save(self, *args, **kwargs):\n         # Set position to the Group ID if position is 0 (or could be None)\n         if self.position == 0:\n"
                },
                {
                    "date": 1731575148992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,12 @@\n from django.contrib.auth.models import Group\n \n # Create your models here.\n class CustomUser(AbstractUser):\n+    full_name = models.CharField(max_length = 250)\n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n     professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n-    full_name = models.CharField(max_length = 250)\n     position = models.CharField(max_length = 250,null = True)\n     department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n     position = models.CharField(max_length = 250)\n     email = models.EmailField(max_length = 250,unique = True)\n"
                },
                {
                    "date": 1731575156386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,16 +5,16 @@\n \n # Create your models here.\n class CustomUser(AbstractUser):\n     full_name = models.CharField(max_length = 250)\n-    avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n-    professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n     position = models.CharField(max_length = 250,null = True)\n     department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n     position = models.CharField(max_length = 250)\n     email = models.EmailField(max_length = 250,unique = True)\n \n+    avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n+    professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n     USERNAME_FIELD = 'email'\n     REQUIRED_FIELDS = ['username']\n \n"
                },
                {
                    "date": 1731575310639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,8 @@\n from django.contrib.auth.models import Group\n \n # Create your models here.\n class CustomUser(AbstractUser):\n-    full_name = models.CharField(max_length = 250)\n-\n     position = models.CharField(max_length = 250,null = True)\n     department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n     position = models.CharField(max_length = 250)\n     email = models.EmailField(max_length = 250,unique = True)\n"
                },
                {
                    "date": 1731576457859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n     position = models.CharField(max_length = 250,null = True)\n     department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n     position = models.CharField(max_length = 250)\n     email = models.EmailField(max_length = 250,unique = True)\n+    full_name = mode\n \n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n     professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n"
                },
                {
                    "date": 1731576463093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     position = models.CharField(max_length = 250,null = True)\n     department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n     position = models.CharField(max_length = 250)\n     email = models.EmailField(max_length = 250,unique = True)\n-    full_name = mode\n+    full_name = models.CharField\n \n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n     professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n"
                },
                {
                    "date": 1731576469701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     position = models.CharField(max_length = 250,null = True)\n     department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n     position = models.CharField(max_length = 250)\n     email = models.EmailField(max_length = 250,unique = True)\n-    full_name = models.CharField\n+    full_name = models.CharField(max_length = 250,null = True)\n \n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n     professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n"
                },
                {
                    "date": 1731645791825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n # Create your models here.\n class CustomUser(AbstractUser):\n     position = models.CharField(max_length = 250,null = True)\n     department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n-    position = models.CharField(max_length = 250)\n     email = models.EmailField(max_length = 250,unique = True)\n     full_name = models.CharField(max_length = 250,null = True)\n \n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n"
                },
                {
                    "date": 1731645922584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,15 @@\n     class Meta:\n         permissions = [\n             ('can_verify_user', 'Can verify user'),\n         ]\n+    \n+     @property\n+    def full_name(self):\n+        try:\n+            return self.first_name + \" \" + self.last_name\n+        except:\n+            return self.username\n \n \n class GroupExtension(models.Model):\n     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n"
                },
                {
                    "date": 1731645932971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         permissions = [\n             ('can_verify_user', 'Can verify user'),\n         ]\n     \n-     @property\n+    @property\n     def full_name(self):\n         try:\n             return self.first_name + \" \" + self.last_name\n         except:\n"
                }
            ],
            "date": 1731409947014,
            "name": "Commit-0",
            "content": "from django.db import models\nfrom django.contrib.auth.models import AbstractUser\nfrom department.models import Department\n\n# Create your models here.\nclass CustomUser(AbstractUser):\n    avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n    professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n\n    full_name = models.CharField(max_length = 250)\n    position = models.CharField(max_length = 250,null = True)\n    department = models.ForeignKey(Department,null = True,on_delete = models.SET_NULL)\n    position = models.CharField(max_length = 250)\n    email = models.EmailField(max_length = 250,unique = True)\n\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['username']\n\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n\n    def __str__(self):\n        return self.username\n    \n    class Meta:\n        permissions = [\n            ('can_verify_user', 'Can verify user'),\n        ]\n\n\nfrom django.contrib.auth.models import Group\nfrom django.db import models\n\nclass CustomGroup(Group):\n    position = models.IntegerField(default=0)\n"
        }
    ]
}