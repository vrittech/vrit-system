{
    "sourceFile": "accounts/serializers/custom_user_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1731481641980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731481709153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from rest_framework import serializers\n from django.contrib.auth import get_user_model\n-from \n+from department.models import Department\n from django.contrib.auth.hashers import check_password, make_password\n \n \n User = get_user_model()\n"
                },
                {
                    "date": 1731481805304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n class CustomUserReadSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = User\n         fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n+    \n \n class CustomUserWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = User\n"
                },
                {
                    "date": 1731481817191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,13 @@\n \n \n User = get_user_model()\n \n+class DepartmentSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = User\n+        fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n+\n class CustomUserReadSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = User\n         fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n"
                },
                {
                    "date": 1731481823121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n User = get_user_model()\n \n class DepartmentSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = User\n+        model = Department\n         fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n \n class CustomUserReadSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1731481832261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n class DepartmentSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Department\n-        fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n+        fields = ['id', 'name']\n \n class CustomUserReadSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = User\n"
                },
                {
                    "date": 1731481855364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,12 @@\n \n class DepartmentSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Department\n-        fields = ['id', 'name']\n+        fields = ['id','name']\n \n class CustomUserReadSerializer(serializers.ModelSerializer):\n+    de\n     class Meta:\n         model = User\n         fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n     \n"
                },
                {
                    "date": 1731481860845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+from rest_framework import serializers\n+from django.contrib.auth import get_user_model\n+from department.models import Department\n+from django.contrib.auth.hashers import check_password, make_password\n+\n+\n+User = get_user_model()\n+\n+class DepartmentSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Department\n+        fields = ['id','name']\n+\n+class CustomUserReadSerializer(serializers.ModelSerializer):\n+    department\n+    class Meta:\n+        model = User\n+        fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n+    \n+\n+class CustomUserWriteSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = User\n+        fields = ['username', 'email', 'first_name', 'last_name', 'password','department']\n+        extra_kwargs = {\n+            'password': {'write_only': True}\n+        }\n+\n+    def create(self, validated_data):\n+        user = User.objects.create_user(**validated_data)\n+        return user\n+\n+    def update(self, instance, validated_data):\n+        password = validated_data.pop('password', None)\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        if password:\n+            instance.set_password(password)\n+        instance.save()\n+        return instance\n+\n+class CustomUserRetrieveSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = User\n+        fields = ['id', 'username', 'email', 'first_name', 'last_name','department', 'is_active', 'is_staff', 'is_superuser']\n+\n+\n+class CustomUserChangePasswordSerializers(serializers.Serializer):\n+    current_password = serializers.CharField(write_only=True)\n+    new_password = serializers.CharField(write_only=True)\n+\n+    def validate(self, data):\n+        user = self.context['request'].user\n+        # Check if current password is correct\n+        if not check_password(data['current_password'], user.password):\n+            raise serializers.ValidationError({\"current_password\": \"Current password is incorrect\"})\n+        return data\n+\n+    def validate_new_password(self, value):\n+        if len(value) < 8:\n+            raise serializers.ValidationError(\"Password must be at least 8 characters long\")\n+        return value\n+\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1731481871550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         model = Department\n         fields = ['id','name']\n \n class CustomUserReadSerializer(serializers.ModelSerializer):\n-    department\n+    department = DepartmentSerializer\n     class Meta:\n         model = User\n         fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n     \n@@ -60,69 +60,5 @@\n         if len(value) < 8:\n             raise serializers.ValidationError(\"Password must be at least 8 characters long\")\n         return value\n \n-   \n-from rest_framework import serializers\n-from django.contrib.auth import get_user_model\n-from department.models import Department\n-from django.contrib.auth.hashers import check_password, make_password\n-\n-\n-User = get_user_model()\n-\n-class DepartmentSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = Department\n-        fields = ['id','name']\n-\n-class CustomUserReadSerializer(serializers.ModelSerializer):\n-    de\n-    class Meta:\n-        model = User\n-        fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n-    \n-\n-class CustomUserWriteSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = User\n-        fields = ['username', 'email', 'first_name', 'last_name', 'password','department']\n-        extra_kwargs = {\n-            'password': {'write_only': True}\n-        }\n-\n-    def create(self, validated_data):\n-        user = User.objects.create_user(**validated_data)\n-        return user\n-\n-    def update(self, instance, validated_data):\n-        password = validated_data.pop('password', None)\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        if password:\n-            instance.set_password(password)\n-        instance.save()\n-        return instance\n-\n-class CustomUserRetrieveSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = User\n-        fields = ['id', 'username', 'email', 'first_name', 'last_name','department', 'is_active', 'is_staff', 'is_superuser']\n-\n-\n-class CustomUserChangePasswordSerializers(serializers.Serializer):\n-    current_password = serializers.CharField(write_only=True)\n-    new_password = serializers.CharField(write_only=True)\n-\n-    def validate(self, data):\n-        user = self.context['request'].user\n-        # Check if current password is correct\n-        if not check_password(data['current_password'], user.password):\n-            raise serializers.ValidationError({\"current_password\": \"Current password is incorrect\"})\n-        return data\n-\n-    def validate_new_password(self, value):\n-        if len(value) < 8:\n-            raise serializers.ValidationError(\"Password must be at least 8 characters long\")\n-        return value\n-\n    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1731481880891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         model = Department\n         fields = ['id','name']\n \n class CustomUserReadSerializer(serializers.ModelSerializer):\n-    department = DepartmentSerializer\n+    department = DepartmentSerializer(read_only = T)\n     class Meta:\n         model = User\n         fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n     \n"
                },
                {
                    "date": 1731481927661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         model = Department\n         fields = ['id','name']\n \n class CustomUserReadSerializer(serializers.ModelSerializer):\n-    department = DepartmentSerializer(read_only = T)\n+    department = DepartmentSerializer(read_only = True)\n     class Meta:\n         model = User\n         fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n     \n@@ -39,8 +39,10 @@\n         instance.save()\n         return instance\n \n class CustomUserRetrieveSerializer(serializers.ModelSerializer):\n+    department = DepartmentSerializer(read_only = True)\n+\n     class Meta:\n         model = User\n         fields = ['id', 'username', 'email', 'first_name', 'last_name','department', 'is_active', 'is_staff', 'is_superuser']\n \n"
                },
                {
                    "date": 1731481936684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,8 @@\n         return instance\n \n class CustomUserRetrieveSerializer(serializers.ModelSerializer):\n     department = DepartmentSerializer(read_only = True)\n-\n     class Meta:\n         model = User\n         fields = ['id', 'username', 'email', 'first_name', 'last_name','department', 'is_active', 'is_staff', 'is_superuser']\n \n"
                },
                {
                    "date": 1731498913029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n class CustomUserWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = User\n-        fields = ['username', 'email', 'first_name', 'last_name', 'password','department']\n+        fields = \n         extra_kwargs = {\n             'password': {'write_only': True}\n         }\n \n"
                },
                {
                    "date": 1731498918139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n class CustomUserWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = User\n-        fields = \n+        fields = '__all__'\n         extra_kwargs = {\n             'password': {'write_only': True}\n         }\n \n"
                },
                {
                    "date": 1731499084361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n class CustomUserWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = User\n-        fields = '__all__'\n+        fields = ['username', 'email', 'first_name', 'last_name', 'password','department']\n         extra_kwargs = {\n             'password': {'write_only': True}\n         }\n \n"
                }
            ],
            "date": 1731481641980,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom \nfrom django.contrib.auth.hashers import check_password, make_password\n\n\nUser = get_user_model()\n\nclass CustomUserReadSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email', 'first_name', 'last_name','department']\n\nclass CustomUserWriteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'first_name', 'last_name', 'password','department']\n        extra_kwargs = {\n            'password': {'write_only': True}\n        }\n\n    def create(self, validated_data):\n        user = User.objects.create_user(**validated_data)\n        return user\n\n    def update(self, instance, validated_data):\n        password = validated_data.pop('password', None)\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        if password:\n            instance.set_password(password)\n        instance.save()\n        return instance\n\nclass CustomUserRetrieveSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email', 'first_name', 'last_name','department', 'is_active', 'is_staff', 'is_superuser']\n\n\nclass CustomUserChangePasswordSerializers(serializers.Serializer):\n    current_password = serializers.CharField(write_only=True)\n    new_password = serializers.CharField(write_only=True)\n\n    def validate(self, data):\n        user = self.context['request'].user\n        # Check if current password is correct\n        if not check_password(data['current_password'], user.password):\n            raise serializers.ValidationError({\"current_password\": \"Current password is incorrect\"})\n        return data\n\n    def validate_new_password(self, value):\n        if len(value) < 8:\n            raise serializers.ValidationError(\"Password must be at least 8 characters long\")\n        return value\n\n   "
        }
    ]
}