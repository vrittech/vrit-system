{
    "sourceFile": "accounts/utilities/filters.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1731645507615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731645516525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import django_filters\n from django.db.models import Q\n-from .models import CustomUser\n+from ..models import CustomUser\n from django.contrib.auth.models import Group\n \n \n class CustomUserFilter(django_filters.FilterSet):\n"
                },
                {
                    "date": 1731645913888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,4 +49,6 @@\n         if value:\n             emails = value.split(',')  # Split comma-separated emails\n             return queryset.filter(email__in=emails)\n         return queryset\n+\n+\n"
                },
                {
                    "date": 1731646048698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from django.contrib.auth.models import Group\n \n \n class CustomUserFilter(django_filters.FilterSet):\n-    full_name = django_filters.CharFilter(field_name=\"full_name\", lookup_expr=\"icontains\")\n+    first_name = django_filters.CharFilter(field_name=\"full_name\", lookup_expr=\"icontains\")\n     position = django_filters.CharFilter(method='filter_by_multiple_positions')\n     department = django_filters.ModelMultipleChoiceFilter(\n         field_name=\"department\",\n         queryset=CustomUser.department.field.related_model.objects.all(),\n"
                },
                {
                    "date": 1731646054313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from django.contrib.auth.models import Group\n \n \n class CustomUserFilter(django_filters.FilterSet):\n-    first_name = django_filters.CharFilter(field_name=\"full_name\", lookup_expr=\"icontains\")\n+    first_name = django_filters.CharFilter(field_name=\"first_name\", lookup_expr=\"icontains\")\n     position = django_filters.CharFilter(method='filter_by_multiple_positions')\n     department = django_filters.ModelMultipleChoiceFilter(\n         field_name=\"department\",\n         queryset=CustomUser.department.field.related_model.objects.all(),\n"
                },
                {
                    "date": 1731646061836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \n \n class CustomUserFilter(django_filters.FilterSet):\n     first_name = django_filters.CharFilter(field_name=\"first_name\", lookup_expr=\"icontains\")\n+    last_name = django_filters.CharFilter(field_name=\"first_name\", lookup_expr=\"icontains\")\n     position = django_filters.CharFilter(method='filter_by_multiple_positions')\n     department = django_filters.ModelMultipleChoiceFilter(\n         field_name=\"department\",\n         queryset=CustomUser.department.field.related_model.objects.all(),\n"
                },
                {
                    "date": 1731646066983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n \n class CustomUserFilter(django_filters.FilterSet):\n     first_name = django_filters.CharFilter(field_name=\"first_name\", lookup_expr=\"icontains\")\n-    last_name = django_filters.CharFilter(field_name=\"first_name\", lookup_expr=\"icontains\")\n+    last_name = django_filters.CharFilter(field_name=\"last_name\", lookup_expr=\"icontains\")\n     position = django_filters.CharFilter(method='filter_by_multiple_positions')\n     department = django_filters.ModelMultipleChoiceFilter(\n         field_name=\"department\",\n         queryset=CustomUser.department.field.related_model.objects.all(),\n"
                }
            ],
            "date": 1731645507615,
            "name": "Commit-0",
            "content": "import django_filters\nfrom django.db.models import Q\nfrom .models import CustomUser\nfrom django.contrib.auth.models import Group\n\n\nclass CustomUserFilter(django_filters.FilterSet):\n    full_name = django_filters.CharFilter(field_name=\"full_name\", lookup_expr=\"icontains\")\n    position = django_filters.CharFilter(method='filter_by_multiple_positions')\n    department = django_filters.ModelMultipleChoiceFilter(\n        field_name=\"department\",\n        queryset=CustomUser.department.field.related_model.objects.all(),\n        to_field_name=\"id\",  # Change to \"name\" if filtering by department name\n    )\n    groups = django_filters.ModelMultipleChoiceFilter(\n        field_name=\"groups\",\n        queryset=Group.objects.all(),\n        to_field_name=\"id\",  # Change to \"name\" if filtering by group name\n    )\n    is_staff = django_filters.BooleanFilter()\n    is_active = django_filters.BooleanFilter()\n    created_date_gte = django_filters.DateFilter(\n        field_name=\"created_at\", lookup_expr=\"gte\", label=\"Created Date (From)\"\n    )\n    created_date_lte = django_filters.DateFilter(\n        field_name=\"created_at\", lookup_expr=\"lte\", label=\"Created Date (To)\"\n    )\n    email = django_filters.CharFilter(method='filter_by_multiple_emails')\n\n    class Meta:\n        model = CustomUser\n        fields = {\n            \"username\": [\"exact\", \"icontains\"],\n        }\n\n    def filter_by_multiple_positions(self, queryset, name, value):\n        \"\"\"\n        Custom filter to handle multiple positions. Accepts comma-separated values.\n        \"\"\"\n        if value:\n            positions = value.split(',')  # Split comma-separated positions\n            return queryset.filter(position__in=positions)\n        return queryset\n\n    def filter_by_multiple_emails(self, queryset, name, value):\n        \"\"\"\n        Custom filter to handle multiple emails. Accepts comma-separated values.\n        \"\"\"\n        if value:\n            emails = value.split(',')  # Split comma-separated emails\n            return queryset.filter(email__in=emails)\n        return queryset\n"
        }
    ]
}