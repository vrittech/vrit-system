{
    "sourceFile": "blog/utilities/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1731575840932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731581133394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,31 +42,31 @@\n #     if company.exists():\n #         return True\n #     return False\n \n-class blogPermission(BasePermission):\n-    def has_permission(self, request, view):\n-        if view.action in [\"list\"]:\n-            return True\n-        elif view.action in ['retrieve']:\n-            return True\n-        elif view.action in ['create','update']:\n-            return SuperAdminLevel(request) or AdminLevel(request) or isOwner(request)            \n-        elif view.action == \"partial_update\":\n-            return view.get_object().user_id == request.user.id\n-        elif view.action == 'destroy':\n-            return isOwner(request)\n+# class blogPermission(BasePermission):\n+#     def has_permission(self, request, view):\n+#         if view.action in [\"list\"]:\n+#             return True\n+#         elif view.action in ['retrieve']:\n+#             return True\n+#         elif view.action in ['create','update']:\n+#             return SuperAdminLevel(request) or AdminLevel(request) or isOwner(request)            \n+#         elif view.action == \"partial_update\":\n+#             return view.get_object().user_id == request.user.id\n+#         elif view.action == 'destroy':\n+#             return isOwner(request)\n \n \n-class blogCategoryPermission(BasePermission):\n-    def has_permission(self, request, view):    \n-        if view.action in [\"list\"]:\n-            return request.user.has_perm('blog.view_blogcategory')\n-        elif view.action in ['retrieve']:\n-            return request.user.has_perm('blog.view_blogcategory')\n-        elif view.action in ['create']:\n-            return request.user.has_perm('blog.add_blogcategory') and allAdminLevel(request)\n-        elif view.action in ['partial_update','update']:\n-            return request.user.has_perm('blog.change_blogcategory') and allAdminLevel(request)\n-        elif view.action == 'destroy':\n-            return request.user.has_perm('blog.delete_blogcategory')\n+# class blogCategoryPermission(BasePermission):\n+#     def has_permission(self, request, view):    \n+#         if view.action in [\"list\"]:\n+#             return request.user.has_perm('blog.view_blogcategory')\n+#         elif view.action in ['retrieve']:\n+#             return request.user.has_perm('blog.view_blogcategory')\n+#         elif view.action in ['create']:\n+#             return request.user.has_perm('blog.add_blogcategory') and allAdminLevel(request)\n+#         elif view.action in ['partial_update','update']:\n+#             return request.user.has_perm('blog.change_blogcategory') and allAdminLevel(request)\n+#         elif view.action == 'destroy':\n+#             return request.user.has_perm('blog.delete_blogcategory')\n 0\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731581165184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,48 @@\n #         elif view.action in ['partial_update','update']:\n #             return request.user.has_perm('blog.change_blogcategory') and allAdminLevel(request)\n #         elif view.action == 'destroy':\n #             return request.user.has_perm('blog.delete_blogcategory')\n-0\n\\ No newline at end of file\n+from rest_framework.permissions import BasePermission\n+\n+class BlogPermission(BasePermission):\n+    def has_permission(self, request, view):\n+        # Allow list action for all users\n+        if view.action == \"list\":\n+            return True\n+\n+        # Define static permissions for each action and each model\n+        permissions = {\n+            \"retrieve\": [\n+                \"blog.view_blog\",\n+                \"blog.view_blogtags\",\n+                \"blog.view_blogcategory\",\n+            ],\n+            \"create\": [\n+                \"blog.add_blog\",\n+                \"blog.add_blogtags\",\n+                \"blog.add_blogcategory\",\n+            ],\n+            \"update\": [\n+                \"blog.change_blog\",\n+                \"blog.change_blogtags\",\n+                \"blog.change_blogcategory\",\n+            ],\n+            \"partial_update\": [\n+                \"blog.change_blog\",\n+                \"blog.change_blogtags\",\n+                \"blog.change_blogcategory\",\n+            ],\n+            \"destroy\": [\n+                \"blog.delete_blog\",\n+                \"blog.delete_blogtags\",\n+                \"blog.delete_blogcategory\",\n+            ],\n+        }\n+\n+        # Check if the action has a corresponding permission defined\n+        if view.action in permissions:\n+            # User must have at least one of the permissions for the action\n+            return any(request.user.has_perm(perm) for perm in permissions[view.action])\n+\n+        # Default to denying permission if action does not match any predefined keys\n+        return False\n"
                },
                {
                    "date": 1731581172382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,8 @@\n #         elif view.action in ['partial_update','update']:\n #             return request.user.has_perm('blog.change_blogcategory') and allAdminLevel(request)\n #         elif view.action == 'destroy':\n #             return request.user.has_perm('blog.delete_blogcategory')\n-from rest_framework.permissions import BasePermission\n-\n class BlogPermission(BasePermission):\n     def has_permission(self, request, view):\n         # Allow list action for all users\n         if view.action == \"list\":\n"
                },
                {
                    "date": 1731581179508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n #         elif view.action in ['partial_update','update']:\n #             return request.user.has_perm('blog.change_blogcategory') and allAdminLevel(request)\n #         elif view.action == 'destroy':\n #             return request.user.has_perm('blog.delete_blogcategory')\n-class BlogPermission(BasePermission):\n+class blogPermission(BasePermission):\n     def has_permission(self, request, view):\n         # Allow list action for all users\n         if view.action == \"list\":\n             return True\n"
                }
            ],
            "date": 1731575840932,
            "name": "Commit-0",
            "content": "#------permission are classified into three types------->\n#first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n#second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n#third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n\n#model ObjectB->user field\n#model ObjectC->objectB field(objectB id)\n\n\n#as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n\nfrom rest_framework.permissions import BasePermission\n\nSUPER_ADMIN = 1\nADMIN = 2\n\n\ndef IsAuthenticated(request):\n    return bool(request.user and request.user.is_authenticated)\n\ndef SuperAdminLevel(request):\n    return bool(IsAuthenticated(request) and request.user.is_superuser)\n\ndef AdminLevel(request):\n    return bool(IsAuthenticated(request) and request.user.is_staff)\n\ndef allAdminLevel(request):\n    return bool(SuperAdminLevel(request) or AdminLevel(request))\n\ndef isOwner(request):\n    if str(request.user.id) == str(request.data.get('user')):\n        return True\n    \n    elif len(request.data)==0 and len(request.POST)==0:\n        return True\n\n    return False\n\n\n# def ObjectBOwner(request):\n#     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n#     if company.exists():\n#         return True\n#     return False\n\nclass blogPermission(BasePermission):\n    def has_permission(self, request, view):\n        if view.action in [\"list\"]:\n            return True\n        elif view.action in ['retrieve']:\n            return True\n        elif view.action in ['create','update']:\n            return SuperAdminLevel(request) or AdminLevel(request) or isOwner(request)            \n        elif view.action == \"partial_update\":\n            return view.get_object().user_id == request.user.id\n        elif view.action == 'destroy':\n            return isOwner(request)\n\n\nclass blogCategoryPermission(BasePermission):\n    def has_permission(self, request, view):    \n        if view.action in [\"list\"]:\n            return request.user.has_perm('blog.view_blogcategory')\n        elif view.action in ['retrieve']:\n            return request.user.has_perm('blog.view_blogcategory')\n        elif view.action in ['create']:\n            return request.user.has_perm('blog.add_blogcategory') and allAdminLevel(request)\n        elif view.action in ['partial_update','update']:\n            return request.user.has_perm('blog.change_blogcategory') and allAdminLevel(request)\n        elif view.action == 'destroy':\n            return request.user.has_perm('blog.delete_blogcategory')\n0"
        }
    ]
}