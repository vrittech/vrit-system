{
    "sourceFile": "blog/viewsets/blog_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 52,
            "patches": [
                {
                    "date": 1730094601329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730094639474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,13 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags']\n     ordering_fields = ['id']\n+    \n \n     filterset_fields = {\n         'status':['exact'],\n-        'publish_date':['exact'gte','lte']\n+        'publish_date':['exact','gte','lte']\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730094658197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags']\n     ordering_fields = ['id']\n-    \n+    ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n \n     filterset_fields = {\n         'status':['exact'],\n         'publish_date':['exact','gte','lte']\n"
                },
                {
                    "date": 1730094670224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     queryset = Blog.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags']\n-    ordering_fields = ['id']\n+    ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status',]\n     ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n \n     filterset_fields = {\n         'status':['exact'],\n"
                },
                {
                    "date": 1730094687724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status',]\n-    ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n+    # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n \n     filterset_fields = {\n         'status':['exact'],\n         'publish_date':['exact','gte','lte']\n"
                },
                {
                    "date": 1730094692890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Blog.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title','description','site_title','excerpt','meta_keywords','tags']\n+    search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status',]\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1730094722048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Blog.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__']\n+    search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status',]\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1730094729066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     queryset = Blog.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n-    ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status',]\n+    ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n \n     filterset_fields = {\n         'status':['exact'],\n"
                },
                {
                    "date": 1730094736027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n \n     filterset_fields = {\n         'status':['exact'],\n+        'status':['exact'],\n         'publish_date':['exact','gte','lte']\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1730094996782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,12 @@\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n \n     filterset_fields = {\n+        'title':['exact'],\n         'status':['exact'],\n-        'status':['exact'],\n         'publish_date':['exact','gte','lte']\n+        'publish_date':['exact','gte','lte']\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730095001965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     filterset_fields = {\n         'title':['exact'],\n         'status':['exact'],\n         'publish_date':['exact','gte','lte']\n-        'publish_date':['exact','gte','lte']\n+        'categories':['exact','gte','lte']\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730095012559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n     filterset_fields = {\n         'title':['exact'],\n         'status':['exact'],\n-        'publish_date':['exact','gte','lte']\n+        'publish_date':['exact','gte','lte'],\n         'categories':['exact','gte','lte']\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1730095060589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,5 +42,7 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+    \n+    \n \n"
                },
                {
                    "date": 1730095108734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,6 +43,60 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    \n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target_position = request.GET.get('target')  # Position of the target object\n+        goal_position = request.GET.get('goal')  # Position of the goal object\n \n+        from rest_framework.response import Response\n+\n+        if not target_position or not goal_position:\n+            return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n+\n+        # Convert to integers\n+        try:\n+            target_position = int(target_position)\n+            goal_position = int(goal_position)\n+        except ValueError:\n+            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n+\n+        # Fetch the target and goal objects based on position\n+        try:\n+            target_obj = Project.objects.get(position=target_position)\n+            goal_obj = Project.objects.get(position=goal_position)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(\n+                position__gt=target_position, position__lte=goal_position\n+            ).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+\n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+            # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(\n+                position__lt=target_position, position__gte=goal_position\n+            ).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1730095148655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,11 @@\n from ..serializers.blog_serializers import BlogListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n+from rest_framework.decorators import action\n \n+\n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n"
                },
                {
                    "date": 1730095154622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n             return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n         # Fetch the target and goal objects based on position\n         try:\n-            target_obj = Project.objects.get(position=target_position)\n+            target_obj = Blo.objects.get(position=target_position)\n             goal_obj = Project.objects.get(position=goal_position)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n"
                },
                {
                    "date": 1730095162297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,10 +64,10 @@\n             return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n         # Fetch the target and goal objects based on position\n         try:\n-            target_obj = Blo.objects.get(position=target_position)\n-            goal_obj = Project.objects.get(position=goal_position)\n+            target_obj = Blog.objects.get(position=target_position)\n+            goal_obj = Blog.objects.get(position=goal_position)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n"
                },
                {
                    "date": 1730095177327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-blog\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n@@ -66,14 +66,14 @@\n         # Fetch the target and goal objects based on position\n         try:\n             target_obj = Blog.objects.get(position=target_position)\n             goal_obj = Blog.objects.get(position=goal_position)\n-        except Project.DoesNotExist:\n+        except Blog.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(\n+            affected_objs = Blog.objects.filter(\n                 position__gt=target_position, position__lte=goal_position\n             ).order_by('position')\n             \n             # Decrement position of all affected objects\n@@ -86,9 +86,9 @@\n             target_obj.save()\n \n         else:\n             # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(\n+            affected_objs = Blog.objects.filter(\n                 position__lt=target_position, position__gte=goal_position\n             ).order_by('-position')\n \n             # Increment position of all affected objects by 1\n"
                },
                {
                    "date": 1730095187277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-blog\")\n+    @action(detail=False, methods=['get'], name=\"draggableBlog\", url_path=\"drag-blog\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n"
                },
                {
                    "date": 1730095197031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = Blog.objects.all()\n+    queryset = Blog.objects.all().orge\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n"
                },
                {
                    "date": 1730095204309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = Blog.objects.all().orge\n+    queryset = Blog.objects.all().order_by('positiojn')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n"
                },
                {
                    "date": 1730095247467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = Blog.objects.all().order_by('positiojn')\n+    queryset = Blog.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n@@ -23,9 +23,9 @@\n     filterset_fields = {\n         'title':['exact'],\n         'status':['exact'],\n         'publish_date':['exact','gte','lte'],\n-        'categories':['exact','gte','lte']\n+        'categories':['exact']\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730095279597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     filterset_fields = {\n         'title':['exact'],\n         'status':['exact'],\n         'publish_date':['exact','gte','lte'],\n-        'categories':['exact']\n+        'category':['exact']\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730095293478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n         'title':['exact'],\n         'status':['exact'],\n         'publish_date':['exact','gte','lte'],\n         'category':['exact']\n+        'category':['exact']\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730095301026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n     filterset_fields = {\n         'title':['exact'],\n         'status':['exact'],\n         'publish_date':['exact','gte','lte'],\n-        'category':['exact']\n-        'category':['exact']\n+        'category':['exact'],\n+        'author':['exact']\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730096324340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         'title':['exact'],\n         'status':['exact'],\n         'publish_date':['exact','gte','lte'],\n         'category':['exact'],\n-        'author':['exact']\n+        'user':['exact']\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730096874494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n         'title':['exact'],\n         'status':['exact'],\n         'publish_date':['exact','gte','lte'],\n         'category':['exact'],\n+        'category':['exact'],\n         'user':['exact']\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1730096916230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         'title':['exact'],\n         'status':['exact'],\n         'publish_date':['exact','gte','lte'],\n         'category':['exact'],\n-        'category':['exact'],\n+        'is_deleted':['exact'],\n         'user':['exact']\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1731307648260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n     serializer_class = BlogListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = Blog.objects.all().order_by('position')\n+    loo\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n"
                },
                {
                    "date": 1731307659475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,17 @@\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n+import slug\n \n \n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = Blog.objects.all().order_by('position')\n-    loo\n+    lookup_field=slug\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n"
                },
                {
                    "date": 1731307673986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n-import slug\n+from slugify import slugify\n \n \n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n"
                },
                {
                    "date": 1731307694581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,16 @@\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n-from slugify import slugify\n \n \n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = Blog.objects.all().order_by('position')\n-    lookup_field=slug\n-\n+    lookup_field = \"slug\"\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n"
                },
                {
                    "date": 1731321804799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = Blog.objects.all().order_by('position')\n     lookup_field = \"slug\"\n+    \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n@@ -42,9 +43,15 @@\n         return super().get_serializer_class()\n     \n     def list(self, request, *args, **kwargs):\n         return super().list(request, *args, **kwargs)\n+    \n+    def perform_create(self, serializer):\n+        serializer.save(user=self.request.user)\n \n+    def perform_update(self, serializer):\n+        serializer.save(user=self.request.user)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n"
                },
                {
                    "date": 1731322966030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = Blog.objects.all().order_by('position')\n     lookup_field = \"slug\"\n+    filterset_class = BlogFilter\n     \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n"
                },
                {
                    "date": 1731322979161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n+from ..utilities.filter import Blo\n \n \n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n"
                },
                {
                    "date": 1731325090275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n-from ..utilities.filter import Blo\n+from ..utilities.filter import BlogFilter\n \n \n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n@@ -56,8 +56,16 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n+    @action(detail=False, methods=['get'], url_path='unique-authors')\n+    def unique_authors(self, request):\n+        # Get a distinct list of authors from the Blog model\n+        unique_authors = Blog.objects.values_list('author', flat=True).distinct()\n+        \n+        # Convert the QuerySet to a list and return it in the response\n+        return Response(list(unique_authors))\n+    \n     @action(detail=False, methods=['get'], name=\"draggableBlog\", url_path=\"drag-blog\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n"
                },
                {
                    "date": 1731325097191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path='unique-authors')\n+    @action(detail=False, methods=['get'], url_path='authors')\n     def unique_authors(self, request):\n         # Get a distinct list of authors from the Blog model\n         unique_authors = Blog.objects.values_list('author', flat=True).distinct()\n         \n"
                },
                {
                    "date": 1731325214319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,15 +56,15 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path='authors')\n-    def unique_authors(self, request):\n+     @action(detail=False, methods=['get'], url_path='authors')\n+    def authors(self, request):\n         # Get a distinct list of authors from the Blog model\n-        unique_authors = Blog.objects.values_list('author', flat=True).distinct()\n+        authors = CaseStudy.objects.values_list('author', flat=True).distinct()\n         \n         # Convert the QuerySet to a list and return it in the response\n-        return Response(list(unique_authors))\n+        return Response(list(authors))\n     \n     @action(detail=False, methods=['get'], name=\"draggableBlog\", url_path=\"drag-blog\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n"
                },
                {
                    "date": 1731325220581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,12 +56,12 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-     @action(detail=False, methods=['get'], url_path='authors')\n+    @action(detail=False, methods=['get'], url_path='authors')\n     def authors(self, request):\n         # Get a distinct list of authors from the Blog model\n-        authors = CaseStudy.objects.values_list('author', flat=True).distinct()\n+        authors = Blog.objects.values_list('author', flat=True).distinct()\n         \n         # Convert the QuerySet to a list and return it in the response\n         return Response(list(authors))\n     \n"
                },
                {
                    "date": 1731386726660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,9 @@\n         \n         # Convert the QuerySet to a list and return it in the response\n         return Response(list(authors))\n     \n+    \n     @action(detail=False, methods=['get'], name=\"draggableBlog\", url_path=\"drag-blog\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n"
                },
                {
                    "date": 1731386733667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,24 @@\n         \n         # Convert the QuerySet to a list and return it in the response\n         return Response(list(authors))\n     \n+    @action(detail=False, methods=['get'], url_path='status-counts')\n+    def status_counts(self, request):\n+        # Aggregate counts for each status\n+        status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n+        \n+        # Count of blogs where `is_deleted` is True\n+        deleted_count = Blog.objects.filter(is_deleted=True).count()\n+\n+        # Organize data for the response\n+        response_data = {\n+            'status_counts': {item['status']: item['count'] for item in status_counts},\n+            'deleted_count': deleted_count,\n+            'total_count': Blog.objects.count(),  # Total number of blogs\n+        }\n+        \n+        return Response(response_data)\n     \n     @action(detail=False, methods=['get'], name=\"draggableBlog\", url_path=\"drag-blog\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n"
                },
                {
                    "date": 1731386739658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         \n         # Convert the QuerySet to a list and return it in the response\n         return Response(list(authors))\n     \n-    @action(detail=False, methods=['get'], url_path='status-counts')\n+    @action(detail=False, methods=['get'], url_path='blog-counts')\n     def status_counts(self, request):\n         # Aggregate counts for each status\n         status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n         \n"
                },
                {
                    "date": 1731386751850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n from ..utilities.filter import BlogFilter\n+from django.db.models import Count\n \n \n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n"
                },
                {
                    "date": 1731386770072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n         # Organize data for the response\n         response_data = {\n             'status_counts': {item['status']: item['count'] for item in status_counts},\n             'deleted_count': deleted_count,\n-            'total_count': Blog.objects.count(),  # Total number of blogs\n+            'total_count': Blog.objects.count(),\n         }\n         \n         return Response(response_data)\n     \n"
                },
                {
                    "date": 1731386929322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,24 +65,9 @@\n         \n         # Convert the QuerySet to a list and return it in the response\n         return Response(list(authors))\n     \n-    @action(detail=False, methods=['get'], url_path='blog-counts')\n-    def status_counts(self, request):\n-        # Aggregate counts for each status\n-        status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n-        \n-        # Count of blogs where `is_deleted` is True\n-        deleted_count = Blog.objects.filter(is_deleted=True).count()\n-\n-        # Organize data for the response\n-        response_data = {\n-            'status_counts': {item['status']: item['count'] for item in status_counts},\n-            'deleted_count': deleted_count,\n-            'total_count': Blog.objects.count(),\n-        }\n-        \n-        return Response(response_data)\n+    CaseStudy\n     \n     @action(detail=False, methods=['get'], name=\"draggableBlog\", url_path=\"drag-blog\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n"
                },
                {
                    "date": 1731386942028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,35 @@\n         \n         # Convert the QuerySet to a list and return it in the response\n         return Response(list(authors))\n     \n-    CaseStudy\n+    @action(detail=False, methods=['get'], url_path='status-counts')\n+    def status_counts(self, request):\n+        # All possible statuses\n+        all_statuses = dict(Blog._meta.get_field('status').choices)\n+\n+        # Get the counts for each status from the database\n+        status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n+\n+        # Convert the QuerySet result into a dictionary with counts\n+        status_count_dict = {item['status']: item['count'] for item in status_counts}\n+\n+        # Ensure all statuses are represented, even if count is 0\n+        complete_status_counts = {\n+            status: status_count_dict.get(status, 0) for status in all_statuses.keys()\n+        }\n+\n+        # Get the count of blogs where `is_deleted` is True\n+        deleted_count = Blog.objects.filter(is_deleted=True).count()\n+\n+        # Prepare the response data\n+        response_data = {\n+            'status_counts': complete_status_counts,\n+            'deleted_count': deleted_count,\n+            'total_count': Blog.objects.count(),  # Total number of blogs\n+        }\n+        \n+        return Response(response_data)\n     \n     @action(detail=False, methods=['get'], name=\"draggableBlog\", url_path=\"drag-blog\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n"
                },
                {
                    "date": 1731474003000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,5 +148,17 @@\n             target_obj.position = goal_position\n             target_obj.save()\n \n         return Response({\"status\": \"success\"})\n+    \n+    @action(detail=False, methods=['get'], name=\"recent_tags\", url_path=\"recent-tags\")\n+    def recent_tags(self, request, *args, **kwargs):\n+        # Fetch the most recently used tags\n+        recent_blogs = Blog.objects.filter(tags__isnull=False).order_by('-created_at')[:10]\n+        recent_tag_ids = recent_blogs.values_list('tags', flat=True).distinct()\n+        recent_tags = BlogTags.objects.filter(id__in=recent_tag_ids).annotate(blog_count=Count('blog')).order_by('-blog_count')\n \n+        # Serialize tags or create a simple response\n+        tag_data = [{\"id\": tag.id, \"name\": tag.name, \"blog_count\": tag.blog_count} for tag in recent_tags]\n+        \n+        return Response(tag_data)\n+\n"
                },
                {
                    "date": 1731474015209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Blog\n+from ..models import Blog, B\n from ..serializers.blog_serializers import BlogListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n"
                },
                {
                    "date": 1731474026112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Blog, B\n+from ..models import Blog, BlogTags\n from ..serializers.blog_serializers import BlogListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n"
                },
                {
                    "date": 1731474131544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,14 +151,21 @@\n         return Response({\"status\": \"success\"})\n     \n     @action(detail=False, methods=['get'], name=\"recent_tags\", url_path=\"recent-tags\")\n     def recent_tags(self, request, *args, **kwargs):\n-        # Fetch the most recently used tags\n-        recent_blogs = Blog.objects.filter(tags__isnull=False).order_by('-created_at')[:10]\n+        # Fetch recent blogs without slicing to avoid the distinct() limitation\n+        recent_blogs = Blog.objects.filter(tags__isnull=False).order_by('-created_at')\n+        \n+        # If no recent blogs with tags, return an appropriate message\n+        if not recent_blogs.exists():\n+            return Response({\"message\": \"No recent tags used\"})\n+\n+        # Get distinct tag IDs from recent blogs (without slicing)\n         recent_tag_ids = recent_blogs.values_list('tags', flat=True).distinct()\n+        \n+        # Fetch tags with annotation for blog usage frequency\n         recent_tags = BlogTags.objects.filter(id__in=recent_tag_ids).annotate(blog_count=Count('blog')).order_by('-blog_count')\n \n         # Serialize tags or create a simple response\n         tag_data = [{\"id\": tag.id, \"name\": tag.name, \"blog_count\": tag.blog_count} for tag in recent_tags]\n         \n-        return Response(tag_data)\n-\n+        return Response(tag_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731490867788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,12 @@\n         # Convert the QuerySet result into a dictionary with counts\n         status_count_dict = {item['status']: item['count'] for item in status_counts}\n \n         # Ensure all statuses are represented, even if count is 0\n-        complete_status_counts = {\n-            status: status_count_dict.get(status, 0) for status in all_statuses.keys()\n-        }\n+        complete_status_counts = [\n+            {\"name\": all_statuses[status], \"count\": status_count_dict.get(status, 0)}\n+            for status in all_statuses.keys()\n+        ]\n \n         # Get the count of blogs where `is_deleted` is True\n         deleted_count = Blog.objects.filter(is_deleted=True).count()\n \n"
                },
                {
                    "date": 1731493417314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,10 @@\n             {\"name\": all_statuses[status], \"count\": status_count_dict.get(status, 0)}\n             for status in all_statuses.keys()\n         ]\n \n-        # Get the count of blogs where `is_deleted` is True\n-        deleted_count = Blog.objects.filter(is_deleted=True).count()\n+        # # Get the count of blogs where `is_deleted` is True\n+        # deleted_count = Blog.objects.filter(is_deleted=True).count()\n \n         # Prepare the response data\n         response_data = {\n             'status_counts': complete_status_counts,\n"
                },
                {
                    "date": 1731843763519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n class blogViewsets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = Blog.objects.all().order_by('position')\n+    queryset = Blog.objects.all().order_by('-position')\n     lookup_field = \"slug\"\n     filterset_class = BlogFilter\n     \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n@@ -88,9 +88,9 @@\n \n         # Prepare the response data\n         response_data = {\n             'status_counts': complete_status_counts,\n-            'deleted_count': deleted_count,\n+            # 'deleted_count': deleted_count,\n             'total_count': Blog.objects.count(),  # Total number of blogs\n         }\n         \n         return Response(response_data)\n"
                }
            ],
            "date": 1730094601329,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import Blog\nfrom ..serializers.blog_serializers import BlogListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\nfrom ..utilities.importbase import *\nfrom rest_framework.response import Response\nfrom blog.utilities.permissions import blogPermission\n\nclass blogViewsets(viewsets.ModelViewSet):\n    serializer_class = BlogListSerializers\n    # permission_classes = [blogPermission]\n    pagination_class = MyPageNumberPagination\n    queryset = Blog.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['title','description','site_title','excerpt','meta_keywords','tags']\n    ordering_fields = ['id']\n\n    filterset_fields = {\n        'status':['exact'],\n        'publish_date':['exact'gte','lte']\n    }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return BlogWriteSerializers\n        elif self.action == 'retrieve':\n            return BlogRetrieveSerializers\n        return super().get_serializer_class()\n    \n    def list(self, request, *args, **kwargs):\n        return super().list(request, *args, **kwargs)\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}