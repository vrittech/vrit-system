{
    "sourceFile": "blog/tasks.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1730092395381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730092401355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-# your_app/tasks.py\n from celery import shared_task\n from .models import Blog\n from django.utils import timezone\n \n"
                },
                {
                    "date": 1731649121307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,23 @@\n from celery import shared_task\n from .models import Blog\n from django.utils import timezone\n+import logging\n \n+logger = logging.getLogger(__name__)\n+\n @shared_task\n def publish_scheduled_blogs_task():\n     scheduled_blogs = Blog.objects.filter(\n         status='scheduled',\n-        publish_date__lte=timezone.now().date()\n+        publish_date__lte=timezone.now()\n     )\n+    published_count = 0\n     for blog in scheduled_blogs:\n-        blog.publish_if_scheduled()\n+        try:\n+            blog.publish_if_scheduled()\n+            published_count += 1\n+        except Exception as e:\n+            logger.error(f\"Failed to publish blog ID {blog.id}: {e}\")\n \n-    return f\"Published {scheduled_blogs.count()} scheduled blogs\"\n+    logger.info(f\"Published {published_count} scheduled blogs.\")\n+    return f\"Published {published_count} scheduled blogs\"\n"
                },
                {
                    "date": 1731654446361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,13 @@\n     )\n     published_count = 0\n     for blog in scheduled_blogs:\n         try:\n-            blog.publish_if_scheduled()\n+            # Update the status to 'published'\n+            blog.status = 'published'\n+            blog.save(update_fields=['status'])\n             published_count += 1\n+            logger.info(f\"Successfully published blog ID {blog.id}\")\n         except Exception as e:\n             logger.error(f\"Failed to publish blog ID {blog.id}: {e}\")\n \n     logger.info(f\"Published {published_count} scheduled blogs.\")\n"
                },
                {
                    "date": 1731661462699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n @shared_task\n def publish_scheduled_blogs_task():\n     scheduled_blogs = Blog.objects.filter(\n-        status='scheduled',\n+        status='Scheduled',\n         publish_date__lte=timezone.now()\n     )\n     published_count = 0\n     for blog in scheduled_blogs:\n"
                },
                {
                    "date": 1731661563017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,32 @@\n from celery import shared_task\n-from .models import Blog\n+from .models import CaseStudy\n from django.utils import timezone\n import logging\n \n logger = logging.getLogger(__name__)\n \n @shared_task\n-def publish_scheduled_blogs_task():\n-    scheduled_blogs = Blog.objects.filter(\n-        status='Scheduled',\n-        publish_date__lte=timezone.now()\n+def publish_scheduled_case_study_task():\n+    now = timezone.now()  # Get the current timestamp\n+    logger.info(f\"Task started at: {now}\")\n+\n+    scheduled_case_studies = CaseStudy.objects.filter(\n+        status='scheduled',\n+        publish_date__lte=now.date()  # Adjust for DateField\n     )\n+    logger.info(f\"Found {scheduled_case_studies.count()} scheduled case studies.\")\n+\n     published_count = 0\n-    for blog in scheduled_blogs:\n+    for case_study in scheduled_case_studies:\n         try:\n+            logger.info(f\"Processing CaseStudy ID: {case_study.id}\")\n             # Update the status to 'published'\n-            blog.status = 'published'\n-            blog.save(update_fields=['status'])\n+            case_study.status = 'published'\n+            case_study.save(update_fields=['status'])\n             published_count += 1\n-            logger.info(f\"Successfully published blog ID {blog.id}\")\n+            logger.info(f\"Successfully published CaseStudy ID: {case_study.id}\")\n         except Exception as e:\n-            logger.error(f\"Failed to publish blog ID {blog.id}: {e}\")\n+            logger.error(f\"Failed to publish CaseStudy ID: {case_study.id}: {e}\")\n \n-    logger.info(f\"Published {published_count} scheduled blogs.\")\n-    return f\"Published {published_count} scheduled blogs\"\n+    logger.info(f\"Published {published_count} scheduled case studies.\")\n+    return f\"Published {published_count} scheduled case studies\"\n"
                },
                {
                    "date": 1731661572822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from celery import shared_task\n-from .models import CaseStudy\n+from .models import Blog\n from django.utils import timezone\n import logging\n \n logger = logging.getLogger(__name__)\n@@ -9,9 +9,9 @@\n def publish_scheduled_case_study_task():\n     now = timezone.now()  # Get the current timestamp\n     logger.info(f\"Task started at: {now}\")\n \n-    scheduled_case_studies = CaseStudy.objects.filter(\n+    scheduled_case_studies = Blog.objects.filter(\n         status='scheduled',\n         publish_date__lte=now.date()  # Adjust for DateField\n     )\n     logger.info(f\"Found {scheduled_case_studies.count()} scheduled case studies.\")\n"
                },
                {
                    "date": 1731661578876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,15 +18,15 @@\n \n     published_count = 0\n     for case_study in scheduled_case_studies:\n         try:\n-            logger.info(f\"Processing CaseStudy ID: {case_study.id}\")\n+            logger.info(f\"Processing Blog ID: {case_study.id}\")\n             # Update the status to 'published'\n             case_study.status = 'published'\n             case_study.save(update_fields=['status'])\n             published_count += 1\n-            logger.info(f\"Successfully published CaseStudy ID: {case_study.id}\")\n+            logger.info(f\"Successfully published Blog ID: {case_study.id}\")\n         except Exception as e:\n-            logger.error(f\"Failed to publish CaseStudy ID: {case_study.id}: {e}\")\n+            logger.error(f\"Failed to publish Blog ID: {case_study.id}: {e}\")\n \n     logger.info(f\"Published {published_count} scheduled case studies.\")\n     return f\"Published {published_count} scheduled case studies\"\n"
                },
                {
                    "date": 1731661592044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     for case_study in scheduled_case_studies:\n         try:\n             logger.info(f\"Processing Blog ID: {case_study.id}\")\n             # Update the status to 'published'\n-            case_study.status = 'published'\n+            bloh.status = 'published'\n             case_study.save(update_fields=['status'])\n             published_count += 1\n             logger.info(f\"Successfully published Blog ID: {case_study.id}\")\n         except Exception as e:\n"
                },
                {
                    "date": 1731661603326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n logger = logging.getLogger(__name__)\n \n @shared_task\n-def publish_scheduled_case_study_task():\n+def publish_scheduled_blog_task():\n     now = timezone.now()  # Get the current timestamp\n     logger.info(f\"Task started at: {now}\")\n \n     scheduled_case_studies = Blog.objects.filter(\n@@ -16,17 +16,17 @@\n     )\n     logger.info(f\"Found {scheduled_case_studies.count()} scheduled case studies.\")\n \n     published_count = 0\n-    for case_study in scheduled_case_studies:\n+    for blog in scheduled_case_studies:\n         try:\n-            logger.info(f\"Processing Blog ID: {case_study.id}\")\n+            logger.info(f\"Processing Blog ID: {blog.id}\")\n             # Update the status to 'published'\n             bloh.status = 'published'\n-            case_study.save(update_fields=['status'])\n+            blog.save(update_fields=['status'])\n             published_count += 1\n-            logger.info(f\"Successfully published Blog ID: {case_study.id}\")\n+            logger.info(f\"Successfully published Blog ID: {blog.id}\")\n         except Exception as e:\n-            logger.error(f\"Failed to publish Blog ID: {case_study.id}: {e}\")\n+            logger.error(f\"Failed to publish Blog ID: {blog.id}: {e}\")\n \n     logger.info(f\"Published {published_count} scheduled case studies.\")\n     return f\"Published {published_count} scheduled case studies\"\n"
                },
                {
                    "date": 1731661608591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     for blog in scheduled_case_studies:\n         try:\n             logger.info(f\"Processing Blog ID: {blog.id}\")\n             # Update the status to 'published'\n-            bloh.status = 'published'\n+            blog.status = 'published'\n             blog.save(update_fields=['status'])\n             published_count += 1\n             logger.info(f\"Successfully published Blog ID: {blog.id}\")\n         except Exception as e:\n"
                },
                {
                    "date": 1731663009993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,33 @@\n from celery import shared_task\n from .models import Blog\n-from django.utils import timezone\n+from django.utils.timezone import now\n import logging\n \n logger = logging.getLogger(__name__)\n \n @shared_task\n def publish_scheduled_blog_task():\n-    now = timezone.now()  # Get the current timestamp\n-    logger.info(f\"Task started at: {now}\")\n+    current_time = now()  # Get the current timestamp\n+    logger.info(f\"Task started at: {current_time}\")\n \n-    scheduled_case_studies = Blog.objects.filter(\n+    # Filter blogs that are ready to be published\n+    scheduled_blogs = Blog.objects.filter(\n         status='scheduled',\n-        publish_date__lte=now.date()  # Adjust for DateField\n+        publish_date__lte=current_time  # Match date and time for DateTimeField\n     )\n-    logger.info(f\"Found {scheduled_case_studies.count()} scheduled case studies.\")\n+    logger.info(f\"Found {scheduled_blogs.count()} scheduled blogs ready for publishing.\")\n \n     published_count = 0\n-    for blog in scheduled_case_studies:\n+    for blog in scheduled_blogs:\n         try:\n             logger.info(f\"Processing Blog ID: {blog.id}\")\n             # Update the status to 'published'\n             blog.status = 'published'\n             blog.save(update_fields=['status'])\n             published_count += 1\n             logger.info(f\"Successfully published Blog ID: {blog.id}\")\n         except Exception as e:\n-            logger.error(f\"Failed to publish Blog ID: {blog.id}: {e}\")\n+            logger.error(f\"Failed to publish Blog ID: {blog.id}, Error: {e}\")\n \n-    logger.info(f\"Published {published_count} scheduled case studies.\")\n-    return f\"Published {published_count} scheduled case studies\"\n+    logger.info(f\"Published {published_count} scheduled blogs.\")\n+    return f\"Published {published_count} scheduled blogs.\"\n"
                },
                {
                    "date": 1731668956657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,33 @@\n from celery import shared_task\n from .models import Blog\n-from django.utils.timezone import now\n+from django.utils.timezone import now, localtime\n import logging\n \n logger = logging.getLogger(__name__)\n \n @shared_task\n def publish_scheduled_blog_task():\n-    current_time = now()  # Get the current timestamp\n+    current_time = localtime(now())  # Convert UTC to local time based on Django settings\n     logger.info(f\"Task started at: {current_time}\")\n \n     # Filter blogs that are ready to be published\n     scheduled_blogs = Blog.objects.filter(\n         status='scheduled',\n         publish_date__lte=current_time  # Match date and time for DateTimeField\n     )\n-    logger.info(f\"Found {scheduled_blogs.count()} scheduled blogs ready for publishing.\")\n+    logger.info(f\"Query executed. Found {scheduled_blogs.count()} scheduled blogs ready for publishing.\")\n \n     published_count = 0\n     for blog in scheduled_blogs:\n         try:\n-            logger.info(f\"Processing Blog ID: {blog.id}\")\n+            logger.info(f\"Processing Blog ID: {blog.id}, Title: {blog.title}, Publish Date: {blog.publish_date}\")\n             # Update the status to 'published'\n             blog.status = 'published'\n             blog.save(update_fields=['status'])\n             published_count += 1\n             logger.info(f\"Successfully published Blog ID: {blog.id}\")\n         except Exception as e:\n             logger.error(f\"Failed to publish Blog ID: {blog.id}, Error: {e}\")\n \n-    logger.info(f\"Published {published_count} scheduled blogs.\")\n+    logger.info(f\"Task completed. Published {published_count} scheduled blogs.\")\n     return f\"Published {published_count} scheduled blogs.\"\n"
                },
                {
                    "date": 1731669375904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,25 @@\n logger = logging.getLogger(__name__)\n \n @shared_task\n def publish_scheduled_blog_task():\n-    current_time = localtime(now())  # Convert UTC to local time based on Django settings\n+    current_time = localtime(now())  # Convert to local time based on Django settings\n     logger.info(f\"Task started at: {current_time}\")\n \n+    # Log the exact time for clarity\n+    logger.info(f\"Looking for blogs with publish_date <= {current_time}\")\n+\n     # Filter blogs that are ready to be published\n     scheduled_blogs = Blog.objects.filter(\n         status='scheduled',\n         publish_date__lte=current_time  # Match date and time for DateTimeField\n     )\n-    logger.info(f\"Query executed. Found {scheduled_blogs.count()} scheduled blogs ready for publishing.\")\n \n+    if scheduled_blogs.exists():\n+        logger.info(f\"Found {scheduled_blogs.count()} scheduled blogs ready for publishing.\")\n+    else:\n+        logger.info(\"No scheduled blogs found for the current time.\")\n+\n     published_count = 0\n     for blog in scheduled_blogs:\n         try:\n             logger.info(f\"Processing Blog ID: {blog.id}, Title: {blog.title}, Publish Date: {blog.publish_date}\")\n"
                }
            ],
            "date": 1730092395381,
            "name": "Commit-0",
            "content": "# your_app/tasks.py\nfrom celery import shared_task\nfrom .models import Blog\nfrom django.utils import timezone\n\n@shared_task\ndef publish_scheduled_blogs_task():\n    scheduled_blogs = Blog.objects.filter(\n        status='scheduled',\n        publish_date__lte=timezone.now().date()\n    )\n    for blog in scheduled_blogs:\n        blog.publish_if_scheduled()\n\n    return f\"Published {scheduled_blogs.count()} scheduled blogs\"\n"
        }
    ]
}