{
    "sourceFile": "casestudy/viewsets/casestudy_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 47,
            "patches": [
                {
                    "date": 1730098185234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730098196812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,4 +35,111 @@\n #     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n #     # def action_name(self, request, *args, **kwargs):\n #     #     return super().list(request, *args, **kwargs)\n \n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Blog\n+from ..serializers._serializers import BlogListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.response import Response\n+from blog.utilities.permissions import blogPermission\n+from rest_framework.decorators import action\n+\n+\n+class blogViewsets(viewsets.ModelViewSet):\n+    serializer_class = BlogListSerializers\n+    # permission_classes = [blogPermission]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Blog.objects.all().order_by('position')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n+    ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n+    # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n+\n+    filterset_fields = {\n+        'title':['exact'],\n+        'status':['exact'],\n+        'publish_date':['exact','gte','lte'],\n+        'category':['exact'],\n+        'is_deleted':['exact'],\n+        'user':['exact']\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return BlogWriteSerializers\n+        elif self.action == 'retrieve':\n+            return BlogRetrieveSerializers\n+        return super().get_serializer_class()\n+    \n+    def list(self, request, *args, **kwargs):\n+        return super().list(request, *args, **kwargs)\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=False, methods=['get'], name=\"draggableBlog\", url_path=\"drag-blog\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target_position = request.GET.get('target')  # Position of the target object\n+        goal_position = request.GET.get('goal')  # Position of the goal object\n+\n+        from rest_framework.response import Response\n+\n+        if not target_position or not goal_position:\n+            return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n+\n+        # Convert to integers\n+        try:\n+            target_position = int(target_position)\n+            goal_position = int(goal_position)\n+        except ValueError:\n+            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n+\n+        # Fetch the target and goal objects based on position\n+        try:\n+            target_obj = Blog.objects.get(position=target_position)\n+            goal_obj = Blog.objects.get(position=goal_position)\n+        except Blog.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Blog.objects.filter(\n+                position__gt=target_position, position__lte=goal_position\n+            ).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+\n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+            # Moving target up (target goes before goal)\n+            affected_objs = Blog.objects.filter(\n+                position__lt=target_position, position__gte=goal_position\n+            ).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1730098202393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Blog\n-from ..serializers._serializers import BlogListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\n+from ..serializers.casestudy_serializers import BlogListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n"
                },
                {
                    "date": 1730098215976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Blog\n-from ..serializers.casestudy_serializers import BlogListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\n+from ..serializers.casestudy_serializers import CaseStudyListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n"
                },
                {
                    "date": 1730098224306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Blog\n-from ..serializers.casestudy_serializers import CaseStudyListSerializers, BlogRetrieveSerializers, BlogWriteSerializers\n+from ..serializers.casestudy_serializers import CaseStudyListSerializers, CaseStudyRetrieveSerializers, CaseStudyWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n"
                },
                {
                    "date": 1730098273164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         #return queryset.filter(user_id=self.request.user.id)\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializers\n+            return CaseStudyWriteSerializers\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n         return super().get_serializer_class()\n     \n"
                },
                {
                    "date": 1730098278545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CaseStudyWriteSerializers\n         elif self.action == 'retrieve':\n-            return BlogRetrieveSerializers\n+            return CaseStudyRetrieveSerializers\n         return super().get_serializer_class()\n     \n     def list(self, request, *args, **kwargs):\n         return super().list(request, *args, **kwargs)\n@@ -85,9 +85,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableBlog\", url_path=\"drag-blog\")\n+    @action(detail=False, methods=['get'], name=\"draggableCaseStudy\", url_path=\"drag-blog\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n@@ -104,11 +104,11 @@\n             return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n         # Fetch the target and goal objects based on position\n         try:\n-            target_obj = Blog.objects.get(position=target_position)\n-            goal_obj = Blog.objects.get(position=goal_position)\n-        except Blog.DoesNotExist:\n+            target_obj = CaseStudy.objects.get(position=target_position)\n+            goal_obj = CaseStudy.objects.get(position=goal_position)\n+        except CaseStudy.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n"
                },
                {
                    "date": 1730098284018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,21 +38,21 @@\n \n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Blog\n+from ..models import CaseStudy\n from ..serializers.casestudy_serializers import CaseStudyListSerializers, CaseStudyRetrieveSerializers, CaseStudyWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n \n \n class blogViewsets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n+    serializer_class = CaseStudyListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = Blog.objects.all().order_by('position')\n+    queryset = CaseStudy.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n@@ -111,9 +111,9 @@\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Blog.objects.filter(\n+            affected_objs = CaseStudy.objects.filter(\n                 position__gt=target_position, position__lte=goal_position\n             ).order_by('position')\n             \n             # Decrement position of all affected objects\n@@ -126,9 +126,9 @@\n             target_obj.save()\n \n         else:\n             # Moving target up (target goes before goal)\n-            affected_objs = Blog.objects.filter(\n+            affected_objs = CaseStudy.objects.filter(\n                 position__lt=target_position, position__gte=goal_position\n             ).order_by('-position')\n \n             # Increment position of all affected objects by 1\n"
                },
                {
                    "date": 1730098303285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableCaseStudy\", url_path=\"drag-blog\")\n+    @action(detail=False, methods=['get'], name=\"draggableCaseStudy\", url_path=\"drag-case_study\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n"
                },
                {
                    "date": 1730098593288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n \n \n-class blogViewsets(viewsets.ModelViewSet):\n+class Viewsets(viewsets.ModelViewSet):\n     serializer_class = CaseStudyListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = CaseStudy.objects.all().order_by('position')\n"
                },
                {
                    "date": 1730098599225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n from blog.utilities.permissions import blogPermission\n from rest_framework.decorators import action\n \n \n-class Viewsets(viewsets.ModelViewSet):\n+class casestudyViewsets(viewsets.ModelViewSet):\n     serializer_class = CaseStudyListSerializers\n     # permission_classes = [blogPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = CaseStudy.objects.all().order_by('position')\n"
                },
                {
                    "date": 1730098644858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n \n class casestudyViewsets(viewsets.ModelViewSet):\n     serializer_class = CaseStudyListSerializers\n-    # permission_classes = [blogPermission]\n+    # permission_classes = [case_studyPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = CaseStudy.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n"
                },
                {
                    "date": 1730098660034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n from ..models import CaseStudy\n from ..serializers.casestudy_serializers import CaseStudyListSerializers, CaseStudyRetrieveSerializers, CaseStudyWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n-from blog.utilities.permissions import blogPermission\n+from casestudy.utilities.permissions import case_studyPermission\n from rest_framework.decorators import action\n \n \n class casestudyViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1730098668299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n from ..models import CaseStudy\n from ..serializers.casestudy_serializers import CaseStudyListSerializers, CaseStudyRetrieveSerializers, CaseStudyWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n-from casestudy.utilities.permissions import case_studyPermission\n+from casestudy.utilities.permissions import casestudyPermission\n from rest_framework.decorators import action\n \n \n class casestudyViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1730098675944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n \n class casestudyViewsets(viewsets.ModelViewSet):\n     serializer_class = CaseStudyListSerializers\n-    # permission_classes = [case_studyPermission]\n+    # permission_classes = [casestudyPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = CaseStudy.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n"
                },
                {
                    "date": 1731307722366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n     serializer_class = CaseStudyListSerializers\n     # permission_classes = [casestudyPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = CaseStudy.objects.all().order_by('position')\n+    lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n"
                },
                {
                    "date": 1731322043295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,15 @@\n         return super().get_serializer_class()\n     \n     def list(self, request, *args, **kwargs):\n         return super().list(request, *args, **kwargs)\n+    \n+     def perform_create(self, serializer):\n+        serializer.save(user=self.request.user)\n \n+    def perform_update(self, serializer):\n+        serializer.save(user=self.request.user)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n"
                },
                {
                    "date": 1731322052257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n     \n     def list(self, request, *args, **kwargs):\n         return super().list(request, *args, **kwargs)\n     \n-     def perform_create(self, serializer):\n+    def perform_create(self, serializer):\n         serializer.save(user=self.request.user)\n \n     def perform_update(self, serializer):\n         serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1731323495383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from casestudy.utilities.permissions import casestudyPermission\n from rest_framework.decorators import action\n+from ..utilities\n \n \n class casestudyViewsets(viewsets.ModelViewSet):\n     serializer_class = CaseStudyListSerializers\n"
                },
                {
                    "date": 1731323503402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from casestudy.utilities.permissions import casestudyPermission\n from rest_framework.decorators import action\n-from ..utilities\n+from ..utilities.filter import Ca\n \n \n class casestudyViewsets(viewsets.ModelViewSet):\n     serializer_class = CaseStudyListSerializers\n"
                },
                {
                    "date": 1731323508942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,17 +44,18 @@\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from casestudy.utilities.permissions import casestudyPermission\n from rest_framework.decorators import action\n-from ..utilities.filter import Ca\n+from ..utilities.filter import CaseStudyFilter\n \n \n class casestudyViewsets(viewsets.ModelViewSet):\n     serializer_class = CaseStudyListSerializers\n     # permission_classes = [casestudyPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = CaseStudy.objects.all().order_by('position')\n     lookup_field = \"slug\"\n+    filter\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n"
                },
                {
                    "date": 1731323524803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,9 @@\n     # permission_classes = [casestudyPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = CaseStudy.objects.all().order_by('position')\n     lookup_field = \"slug\"\n-    filter\n-\n+     filterset_class = BlogFilter\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n"
                },
                {
                    "date": 1731323530205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,10 @@\n     # permission_classes = [casestudyPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = CaseStudy.objects.all().order_by('position')\n     lookup_field = \"slug\"\n-     filterset_class = BlogFilter\n+    filterset_class = BlogFilter\n+     \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n"
                },
                {
                    "date": 1731323536144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     # permission_classes = [casestudyPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = CaseStudy.objects.all().order_by('position')\n     lookup_field = \"slug\"\n-    filterset_class = BlogFilter\n+    filterset_class = CaseStudyFilter\n      \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n"
                },
                {
                    "date": 1731325121472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,16 @@\n         serializer.save(user=self.request.user)\n \n     def perform_update(self, serializer):\n         serializer.save(user=self.request.user)\n+        \n+        @action(detail=False, methods=['get'], url_path='authors')\n+    def unique_authors(self, request):\n+        # Get a distinct list of authors from the Blog model\n+        unique_authors = Blog.objects.values_list('author', flat=True).distinct()\n+        \n+        # Convert the QuerySet to a list and return it in the response\n+        return Response(list(unique_authors))\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1731325127927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n     def perform_update(self, serializer):\n         serializer.save(user=self.request.user)\n         \n-        @action(detail=False, methods=['get'], url_path='authors')\n+    @action(detail=False, methods=['get'], url_path='authors')\n     def unique_authors(self, request):\n         # Get a distinct list of authors from the Blog model\n         unique_authors = Blog.objects.values_list('author', flat=True).distinct()\n         \n"
                },
                {
                    "date": 1731325134472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n         \n     @action(detail=False, methods=['get'], url_path='authors')\n     def unique_authors(self, request):\n         # Get a distinct list of authors from the Blog model\n-        unique_authors = Blog.objects.values_list('author', flat=True).distinct()\n+        unique_authors = CaseStudy.objects.values_list('author', flat=True).distinct()\n         \n         # Convert the QuerySet to a list and return it in the response\n         return Response(list(unique_authors))\n \n"
                },
                {
                    "date": 1731325192077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n         # Get a distinct list of authors from the Blog model\n         unique_authors = CaseStudy.objects.values_list('author', flat=True).distinct()\n         \n         # Convert the QuerySet to a list and return it in the response\n-        return Response(list(unique_authors))\n+        return Response(list(authors))\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1731325197324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n         \n     @action(detail=False, methods=['get'], url_path='authors')\n     def unique_authors(self, request):\n         # Get a distinct list of authors from the Blog model\n-        unique_authors = CaseStudy.objects.values_list('author', flat=True).distinct()\n+        authors = CaseStudy.objects.values_list('author', flat=True).distinct()\n         \n         # Convert the QuerySet to a list and return it in the response\n         return Response(list(authors))\n \n"
                },
                {
                    "date": 1731325202529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     def perform_update(self, serializer):\n         serializer.save(user=self.request.user)\n         \n     @action(detail=False, methods=['get'], url_path='authors')\n-    def unique_authors(self, request):\n+    def authors(self, request):\n         # Get a distinct list of authors from the Blog model\n         authors = CaseStudy.objects.values_list('author', flat=True).distinct()\n         \n         # Convert the QuerySet to a list and return it in the response\n"
                },
                {
                    "date": 1731386791213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,25 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n+      @action(detail=False, methods=['get'], url_path='blog-counts')\n+    def status_counts(self, request):\n+        # Aggregate counts for each status\n+        status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n+        \n+        # Count of blogs where `is_deleted` is True\n+        deleted_count = Blog.objects.filter(is_deleted=True).count()\n+\n+        # Organize data for the response\n+        response_data = {\n+            'status_counts': {item['status']: item['count'] for item in status_counts},\n+            'deleted_count': deleted_count,\n+            'total_count': Blog.objects.count(),\n+        }\n+        \n+        return Response(response_data)\n+    \n     @action(detail=False, methods=['get'], name=\"draggableCaseStudy\", url_path=\"drag-case_study\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n"
                },
                {
                    "date": 1731386799909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-      @action(detail=False, methods=['get'], url_path='blog-counts')\n+    @action(detail=False, methods=['get'], url_path='blog-counts')\n     def status_counts(self, request):\n         # Aggregate counts for each status\n         status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n         \n"
                },
                {
                    "date": 1731386810683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n from rest_framework.response import Response\n from casestudy.utilities.permissions import casestudyPermission\n from rest_framework.decorators import action\n from ..utilities.filter import CaseStudyFilter\n+from django.db.models import Count\n \n \n class casestudyViewsets(viewsets.ModelViewSet):\n     serializer_class = CaseStudyListSerializers\n"
                },
                {
                    "date": 1731386817751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n     \n     @action(detail=False, methods=['get'], url_path='blog-counts')\n     def status_counts(self, request):\n         # Aggregate counts for each status\n-        status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n+        status_counts = CaseStudy.objects.values('status').annotate(count=Count('id'))\n         \n         # Count of blogs where `is_deleted` is True\n         deleted_count = Blog.objects.filter(is_deleted=True).count()\n \n"
                },
                {
                    "date": 1731386901913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,21 +103,32 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path='blog-counts')\n+    @action(detail=False, methods=['get'], url_path='status-counts')\n     def status_counts(self, request):\n-        # Aggregate counts for each status\n-        status_counts = CaseStudy.objects.values('status').annotate(count=Count('id'))\n-        \n-        # Count of blogs where `is_deleted` is True\n+        # All possible statuses\n+        all_statuses = dict(Blog._meta.get_field('status').choices)\n+\n+        # Get the counts for each status from the database\n+        status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n+\n+        # Convert the QuerySet result into a dictionary with counts\n+        status_count_dict = {item['status']: item['count'] for item in status_counts}\n+\n+        # Ensure all statuses are represented, even if count is 0\n+        complete_status_counts = {\n+            status: status_count_dict.get(status, 0) for status in all_statuses.keys()\n+        }\n+\n+        # Get the count of blogs where `is_deleted` is True\n         deleted_count = Blog.objects.filter(is_deleted=True).count()\n \n-        # Organize data for the response\n+        # Prepare the response data\n         response_data = {\n-            'status_counts': {item['status']: item['count'] for item in status_counts},\n+            'status_counts': complete_status_counts,\n             'deleted_count': deleted_count,\n-            'total_count': Blog.objects.count(),\n+            'total_count': Blog.objects.count(),  # Total number of blogs\n         }\n         \n         return Response(response_data)\n     \n"
                },
                {
                    "date": 1731386910936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n     \n     @action(detail=False, methods=['get'], url_path='status-counts')\n     def status_counts(self, request):\n         # All possible statuses\n-        all_statuses = dict(Blog._meta.get_field('status').choices)\n+        all_statuses = dict(CaseStudy._meta.get_field('status').choices)\n \n         # Get the counts for each status from the database\n         status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n \n"
                },
                {
                    "date": 1731386916701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n         # All possible statuses\n         all_statuses = dict(CaseStudy._meta.get_field('status').choices)\n \n         # Get the counts for each status from the database\n-        status_counts = Blog.objects.values('status').annotate(count=Count('id'))\n+        status_counts = CaseStudy.objects.values('status').annotate(count=Count('id'))\n \n         # Convert the QuerySet result into a dictionary with counts\n         status_count_dict = {item['status']: item['count'] for item in status_counts}\n \n@@ -120,9 +120,9 @@\n             status: status_count_dict.get(status, 0) for status in all_statuses.keys()\n         }\n \n         # Get the count of blogs where `is_deleted` is True\n-        deleted_count = Blog.objects.filter(is_deleted=True).count()\n+        deleted_count = CaseStudy.objects.filter(is_deleted=True).count()\n \n         # Prepare the response data\n         response_data = {\n             'status_counts': complete_status_counts,\n"
                },
                {
                    "date": 1731386954501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path='status-counts')\n+    @action(detail=False, methods=['get'], url_path='-counts')\n     def status_counts(self, request):\n         # All possible statuses\n         all_statuses = dict(CaseStudy._meta.get_field('status').choices)\n \n@@ -126,9 +126,9 @@\n         # Prepare the response data\n         response_data = {\n             'status_counts': complete_status_counts,\n             'deleted_count': deleted_count,\n-            'total_count': Blog.objects.count(),  # Total number of blogs\n+            'total_count': CaseStudy.objects.count(),  # Total number of blogs\n         }\n         \n         return Response(response_data)\n     \n"
                },
                {
                    "date": 1731474175831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path='-counts')\n+    @action(detail=False, methods=['get'], url_path='status-counts')\n     def status_counts(self, request):\n         # All possible statuses\n         all_statuses = dict(CaseStudy._meta.get_field('status').choices)\n \n@@ -130,8 +130,9 @@\n             'total_count': CaseStudy.objects.count(),  # Total number of blogs\n         }\n         \n         return Response(response_data)\n+\n     \n     @action(detail=False, methods=['get'], name=\"draggableCaseStudy\", url_path=\"drag-case_study\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n"
                },
                {
                    "date": 1731474183290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,27 @@\n         }\n         \n         return Response(response_data)\n \n+    @action(detail=False, methods=['get'], name=\"recent_tags\", url_path=\"recent-tags\")\n+    def recent_tags(self, request, *args, **kwargs):\n+        # Fetch recent blogs without slicing to avoid the distinct() limitation\n+        recent_blogs = CaseStudy.objects.filter(tags__isnull=False).order_by('-created_at')\n+        \n+        # If no recent blogs with tags, return an appropriate message\n+        if not recent_blogs.exists():\n+            return Response({\"message\": \"No recent tags used\"})\n+\n+        # Get distinct tag IDs from recent blogs (without slicing)\n+        recent_tag_ids = recent_blogs.values_list('tags', flat=True).distinct()\n+        \n+        # Fetch tags with annotation for blog usage frequency\n+        recent_tags = BlogTags.objects.filter(id__in=recent_tag_ids).annotate(blog_count=Count('blog')).order_by('-blog_count')\n+\n+        # Serialize tags or create a simple response\n+        tag_data = [{\"id\": tag.id, \"name\": tag.name, \"blog_count\": tag.blog_count} for tag in recent_tags]\n+        \n+        return Response(tag_data)\n     \n     @action(detail=False, methods=['get'], name=\"draggableCaseStudy\", url_path=\"drag-case_study\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n"
                },
                {
                    "date": 1731474190912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import CaseStudy\n+from ..models import CaseStudy,T\n from ..serializers.casestudy_serializers import CaseStudyListSerializers, CaseStudyRetrieveSerializers, CaseStudyWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from casestudy.utilities.permissions import casestudyPermission\n"
                },
                {
                    "date": 1731474196597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import CaseStudy,T\n+from ..models import CaseStudy, CaseStudyTags\n from ..serializers.casestudy_serializers import CaseStudyListSerializers, CaseStudyRetrieveSerializers, CaseStudyWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from casestudy.utilities.permissions import casestudyPermission\n"
                },
                {
                    "date": 1731474201902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         # Get distinct tag IDs from recent blogs (without slicing)\n         recent_tag_ids = recent_blogs.values_list('tags', flat=True).distinct()\n         \n         # Fetch tags with annotation for blog usage frequency\n-        recent_tags = BlogTags.objects.filter(id__in=recent_tag_ids).annotate(blog_count=Count('blog')).order_by('-blog_count')\n+        recent_tags = CaseStudyTags.objects.filter(id__in=recent_tag_ids).annotate(blog_count=Count('blog')).order_by('-blog_count')\n \n         # Serialize tags or create a simple response\n         tag_data = [{\"id\": tag.id, \"name\": tag.name, \"blog_count\": tag.blog_count} for tag in recent_tags]\n         \n"
                },
                {
                    "date": 1731474237747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,27 +131,37 @@\n         }\n         \n         return Response(response_data)\n \n+    from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from django.db.models import Count\n+from .models import CaseStudy, CaseStudyTags\n+\n+class CaseStudyViewSet(viewsets.ModelViewSet):\n+    queryset = CaseStudy.objects.all()\n+    serializer_class = CaseStudySerializer\n+\n     @action(detail=False, methods=['get'], name=\"recent_tags\", url_path=\"recent-tags\")\n     def recent_tags(self, request, *args, **kwargs):\n-        # Fetch recent blogs without slicing to avoid the distinct() limitation\n-        recent_blogs = CaseStudy.objects.filter(tags__isnull=False).order_by('-created_at')\n+        # Fetch recent case studies without slicing to avoid the distinct() limitation\n+        recent_case_studies = CaseStudy.objects.filter(tags__isnull=False).order_by('-created_at')\n         \n-        # If no recent blogs with tags, return an appropriate message\n-        if not recent_blogs.exists():\n+        # If no recent case studies with tags, return an appropriate message\n+        if not recent_case_studies.exists():\n             return Response({\"message\": \"No recent tags used\"})\n \n-        # Get distinct tag IDs from recent blogs (without slicing)\n-        recent_tag_ids = recent_blogs.values_list('tags', flat=True).distinct()\n+        # Get distinct tag IDs from recent case studies (without slicing)\n+        recent_tag_ids = recent_case_studies.values_list('tags', flat=True).distinct()\n         \n-        # Fetch tags with annotation for blog usage frequency\n-        recent_tags = CaseStudyTags.objects.filter(id__in=recent_tag_ids).annotate(blog_count=Count('blog')).order_by('-blog_count')\n+        # Fetch tags with annotation for case study usage frequency\n+        recent_tags = CaseStudyTags.objects.filter(id__in=recent_tag_ids).annotate(case_study_count=Count('casestudy')).order_by('-case_study_count')\n \n         # Serialize tags or create a simple response\n-        tag_data = [{\"id\": tag.id, \"name\": tag.name, \"blog_count\": tag.blog_count} for tag in recent_tags]\n+        tag_data = [{\"id\": tag.id, \"name\": tag.name, \"case_study_count\": tag.case_study_count} for tag in recent_tags]\n         \n         return Response(tag_data)\n+\n     \n     @action(detail=False, methods=['get'], name=\"draggableCaseStudy\", url_path=\"drag-case_study\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n"
                },
                {
                    "date": 1731474249389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,17 +131,8 @@\n         }\n         \n         return Response(response_data)\n \n-    from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from django.db.models import Count\n-from .models import CaseStudy, CaseStudyTags\n-\n-class CaseStudyViewSet(viewsets.ModelViewSet):\n-    queryset = CaseStudy.objects.all()\n-    serializer_class = CaseStudySerializer\n-\n     @action(detail=False, methods=['get'], name=\"recent_tags\", url_path=\"recent-tags\")\n     def recent_tags(self, request, *args, **kwargs):\n         # Fetch recent case studies without slicing to avoid the distinct() limitation\n         recent_case_studies = CaseStudy.objects.filter(tags__isnull=False).order_by('-created_at')\n@@ -159,9 +150,8 @@\n         # Serialize tags or create a simple response\n         tag_data = [{\"id\": tag.id, \"name\": tag.name, \"case_study_count\": tag.case_study_count} for tag in recent_tags]\n         \n         return Response(tag_data)\n-\n     \n     @action(detail=False, methods=['get'], name=\"draggableCaseStudy\", url_path=\"drag-case_study\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n"
                },
                {
                    "date": 1731491200008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,12 +114,12 @@\n \n         # Convert the QuerySet result into a dictionary with counts\n         status_count_dict = {item['status']: item['count'] for item in status_counts}\n \n-        # Ensure all statuses are represented, even if count is 0\n-        complete_status_counts = {\n-            status: status_count_dict.get(status, 0) for status in all_statuses.keys()\n-        }\n+        complete_status_counts = [\n+            {\"name\": all_statuses[status], \"count\": status_count_dict.get(status, 0)}\n+            for status in all_statuses.keys()\n+        ]\n \n         # Get the count of blogs where `is_deleted` is True\n         deleted_count = CaseStudy.objects.filter(is_deleted=True).count()\n \n"
                },
                {
                    "date": 1731491967168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,16 +61,16 @@\n     search_fields = ['title','description','site_title','excerpt','meta_keywords','tags__tag_names']\n     ordering_fields = ['id','title', 'description', 'site_title', 'excerpt', 'status','tags__tag_names']\n     # ('title', 'description', 'site_title', 'excerpt', 'status', ',('published','Published'),('scheduled','Scheduled')),max_length', 'meta_description', 'meta_keywords', 'meta_author', 'tags', )\n \n-    filterset_fields = {\n-        'title':['exact'],\n-        'status':['exact'],\n-        'publish_date':['exact','gte','lte'],\n-        'category':['exact'],\n-        'is_deleted':['exact'],\n-        'user':['exact']\n-    }\n+    # filterset_fields = {\n+    #     'title':['exact'],\n+    #     'status':['exact'],\n+    #     'publish_date':['exact','gte','lte'],\n+    #     'category':['exact'],\n+    #     'is_deleted':['exact'],\n+    #     'user':['exact']\n+    # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1731493431393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n             for status in all_statuses.keys()\n         ]\n \n         # Get the count of blogs where `is_deleted` is True\n-        deleted_count = CaseStudy.objects.filter(is_deleted=True).count()\n+        # deleted_count = CaseStudy.objects.filter(is_deleted=True).count()\n \n         # Prepare the response data\n         response_data = {\n             'status_counts': complete_status_counts,\n"
                }
            ],
            "date": 1730098185234,
            "name": "Commit-0",
            "content": "# from rest_framework import viewsets\n# from rest_framework.filters import SearchFilter, OrderingFilter\n# from django_filters.rest_framework import DjangoFilterBackend\n# from ..models import CaseStudy\n# from ..serializers.casestudy_serializers import CaseStudyListSerializers, CaseStudyRetrieveSerializers, CaseStudyWriteSerializers\n# from ..utilities.importbase import *\n\n# class casestudyViewsets(viewsets.ModelViewSet):\n#     serializer_class = CaseStudyListSerializers\n#     # permission_classes = [casestudyPermission]\n#     # authentication_classes = [JWTAuthentication]\n#     pagination_class = MyPageNumberPagination\n#     queryset = CaseStudy.objects.all()\n\n#     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n#     search_fields = ['id']\n#     ordering_fields = ['id']\n\n#     # filterset_fields = {\n#     #     'id': ['exact'],\n#     # }\n\n#     def get_queryset(self):\n#         queryset = super().get_queryset()\n#         return queryset\n#         #return queryset.filter(user_id=self.request.user.id)\n\n#     def get_serializer_class(self):\n#         if self.action in ['create', 'update', 'partial_update']:\n#             return CaseStudyWriteSerializers\n#         elif self.action == 'retrieve':\n#             return CaseStudyRetrieveSerializers\n#         return super().get_serializer_class()\n\n#     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n#     # def action_name(self, request, *args, **kwargs):\n#     #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}