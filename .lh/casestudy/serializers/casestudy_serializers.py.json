{
    "sourceFile": "casestudy/serializers/casestudy_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1730097911637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730097923543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,5 +13,92 @@\n \n # class CaseStudyWriteSerializers(serializers.ModelSerializer):\n #     class Meta:\n #         model = CaseStudy\n-#         fields = '__all__'\n\\ No newline at end of file\n+#         fields = '__all__'\n+\n+from rest_framework import serializers\n+from ..models import Blog, BlogTags, BlogCategory\n+from django.utils import timezone\n+\n+\n+class BlogTagsSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = BlogTags\n+        fields = ['id', 'name']\n+        \n+class CaseStudyListSerializers(serializers.ModelSerializer):\n+    category = serializers.StringRelatedField(many=True)\n+    tags = serializers.StringRelatedField(many=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = [\n+            'id', 'title', 'excerpt', 'status', 'publish_date', \n+            'created_at', 'updated_at', 'category', 'tags'\n+        ]\n+\n+\n+class BlogRetrieveSerializers(serializers.ModelSerializer):\n+    category = serializers.StringRelatedField(many=True)\n+    tags = serializers.StringRelatedField(many=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = [\n+            'id', 'title', 'description', 'status', 'publish_date', \n+            'meta_description', 'meta_keywords', 'meta_author',\n+            'created_at', 'updated_at', 'category', 'tags', \n+            'header_code', 'embedded_code', 'featured_image'\n+        ]\n+\n+\n+class BlogWriteSerializers(serializers.ModelSerializer):\n+    tags = serializers.ListField(\n+        child=serializers.CharField(max_length=155), write_only=True\n+    )\n+    category = serializers.ListField(\n+        child=serializers.IntegerField(), write_only=True\n+    )\n+\n+    class Meta:\n+        model = Blog\n+        fields = [\n+            'id', 'title', 'description', 'site_title', 'excerpt', \n+            'status', 'publish_date', 'meta_description', 'meta_keywords', \n+            'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n+            'featured_image'\n+        ]\n+\n+    def validate_publish_date(self, value):\n+        \"\"\"\n+        Ensure that publish_date is in the future for scheduled blogs.\n+        \"\"\"\n+        if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n+            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n+        return value\n+\n+    def create(self, validated_data):\n+        tags_data = validated_data.pop('tags', [])\n+        category_data = validated_data.pop('category', [])\n+        \n+        blog = Blog.objects.create(**validated_data)\n+        blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        blog.category.set(category_data)\n+\n+        return blog\n+\n+    def update(self, instance, validated_data):\n+        tags_data = validated_data.pop('tags', [])\n+        category_data = validated_data.pop('category', [])\n+\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+\n+        if tags_data:\n+            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        \n+        if category_data:\n+            instance.category.set(category_data)\n+\n+        instance.save()\n+        return instance\n"
                },
                {
                    "date": 1730097929323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n from ..models import Blog, BlogTags, BlogCategory\n from django.utils import timezone\n \n \n-class BlogTagsSerializer(serializers.ModelSerializer):\n+class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = BlogTags\n         fields = ['id', 'name']\n         \n"
                },
                {
                    "date": 1730097940873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n             'created_at', 'updated_at', 'category', 'tags'\n         ]\n \n \n-class BlogRetrieveSerializers(serializers.ModelSerializer):\n+class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1730097954712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n             'header_code', 'embedded_code', 'featured_image'\n         ]\n \n \n-class BlogWriteSerializers(serializers.ModelSerializer):\n+class CaseStudyWriteSerializers(serializers.ModelSerializer):\n     tags = serializers.ListField(\n         child=serializers.CharField(max_length=155), write_only=True\n     )\n     category = serializers.ListField(\n@@ -80,9 +80,9 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n-        blog = Blog.objects.create(**validated_data)\n+        blog = CaseStudy.objects.create(**validated_data)\n         blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n         return blog\n"
                },
                {
                    "date": 1730097962033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n #         model = CaseStudy\n #         fields = '__all__'\n \n from rest_framework import serializers\n-from ..models import Blog, BlogTags, BlogCategory\n+from ..models import CaseStudy, BlogTags, BlogCategory\n from django.utils import timezone\n \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n@@ -81,9 +81,9 @@\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n         blog = CaseStudy.objects.create(**validated_data)\n-        blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n         return blog\n \n"
                },
                {
                    "date": 1730097968292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n #         model = CaseStudy\n #         fields = '__all__'\n \n from rest_framework import serializers\n-from ..models import CaseStudy, BlogTags, BlogCategory\n+from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1730097975442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = BlogTags\n+        model = CaseStudyags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n"
                },
                {
                    "date": 1730097981279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,17 +22,17 @@\n \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = CaseStudyags\n+        model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n-        model = Blog\n+        model = CaseStudy\n         fields = [\n             'id', 'title', 'excerpt', 'status', 'publish_date', \n             'created_at', 'updated_at', 'category', 'tags'\n         ]\n"
                },
                {
                    "date": 1730097989581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n-        model = Blog\n+        model = CaseStudy\n         fields = [\n             'id', 'title', 'description', 'status', 'publish_date', \n             'meta_description', 'meta_keywords', 'meta_author',\n             'created_at', 'updated_at', 'category', 'tags', \n@@ -60,9 +60,9 @@\n         child=serializers.IntegerField(), write_only=True\n     )\n \n     class Meta:\n-        model = Blog\n+        model = CaseStudy\n         fields = [\n             'id', 'title', 'description', 'site_title', 'excerpt', \n             'status', 'publish_date', 'meta_description', 'meta_keywords', \n             'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n"
                },
                {
                    "date": 1730097995750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n \n         if tags_data:\n-            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         \n         if category_data:\n             instance.category.set(category_data)\n \n"
                },
                {
                    "date": 1730098042695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,13 +80,13 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n-        blog = CaseStudy.objects.create(**validated_data)\n-        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-        blog.category.set(category_data)\n+        case_study = CaseStudy.objects.create(**validated_data)\n+        case_study.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n+        case_study.category.set(category_data)\n \n-        return blog\n+        return case_study\n \n     def update(self, instance, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n"
                },
                {
                    "date": 1730266423472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         child=serializers.IntegerField(), write_only=True\n     )\n \n     class Meta:\n-        model = CaseStudy\n+        model = Blog\n         fields = [\n             'id', 'title', 'description', 'site_title', 'excerpt', \n             'status', 'publish_date', 'meta_description', 'meta_keywords', \n             'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n@@ -80,25 +80,39 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n-        case_study = CaseStudy.objects.create(**validated_data)\n-        case_study.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-        case_study.category.set(category_data)\n+        blog = Blog.objects.create(**validated_data)\n+        blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        blog.category.set(category_data)\n \n-        return case_study\n+        return blog\n \n     def update(self, instance, validated_data):\n-        tags_data = validated_data.pop('tags', [])\n-        category_data = validated_data.pop('category', [])\n+        tags_data = validated_data.pop('tags', None)\n+        category_data = validated_data.pop('category', None)\n+        featured_image = validated_data.pop('featured_image', None)\n \n+        # Update instance fields if data is provided\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n \n-        if tags_data:\n-            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-        \n-        if category_data:\n+        # Handle tags if provided\n+        if tags_data is not None:\n+            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+\n+        # Handle categories if provided\n+        if category_data is not None:\n             instance.category.set(category_data)\n \n+        # Handle featured_image specifically\n+        if featured_image is not None:\n+            if featured_image == \"null\":\n+                # If image is set to 'null', delete the current image\n+                instance.featured_image.delete(save=False)\n+                instance.featured_image = None\n+            else:\n+                # If image data is sent, update it\n+                instance.featured_image = featured_image\n+\n         instance.save()\n         return instance\n"
                },
                {
                    "date": 1730266432223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n         blog = Blog.objects.create(**validated_data)\n-        blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n         return blog\n \n@@ -97,9 +97,9 @@\n             setattr(instance, attr, value)\n \n         # Handle tags if provided\n         if tags_data is not None:\n-            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n \n         # Handle categories if provided\n         if category_data is not None:\n             instance.category.set(category_data)\n"
                },
                {
                    "date": 1730266440542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         child=serializers.IntegerField(), write_only=True\n     )\n \n     class Meta:\n-        model = Blog\n+        model = CaseStudy\n         fields = [\n             'id', 'title', 'description', 'site_title', 'excerpt', \n             'status', 'publish_date', 'meta_description', 'meta_keywords', \n             'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n@@ -80,9 +80,9 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n-        blog = Blog.objects.create(**validated_data)\n+        blog = CaseStudy.objects.create(**validated_data)\n         blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n         return blog\n"
                },
                {
                    "date": 1731321960617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,13 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+        \n         blog = CaseStudy.objects.create(**validated_data)\n         blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n"
                },
                {
                    "date": 1731322156983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,12 @@\n from rest_framework import serializers\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n \n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name', 'image']  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n@@ -95,8 +99,13 @@\n     def update(self, instance, validated_data):\n         tags_data = validated_data.pop('tags', None)\n         category_data = validated_data.pop('category', None)\n         featured_image = validated_data.pop('featured_image', None)\n+        \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n \n         # Update instance fields if data is provided\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n"
                },
                {
                    "date": 1731322167042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n \n from rest_framework import serializers\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n+from accounts.models import \n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n"
                },
                {
                    "date": 1731322192188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n from rest_framework import serializers\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n-from accounts.models import \n+from accounts.models import CustomUser\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n@@ -31,8 +31,10 @@\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n+     user = BlogUserSerializer(read_only=True)\n+\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1731322197412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,9 @@\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n-     user = BlogUserSerializer(read_only=True)\n-\n+    user = BlogUserSerializer(read_only=True)\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1731322203414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n+    user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = CaseStudy\n         fields = [\n"
                },
                {
                    "date": 1731322361470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name', 'image']  \n+        fields = ['full_name']  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731322382415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name']  \n+        fields = ['full_name','professional_image']  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731322450961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,9 @@\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n         model = CaseStudy\n-        fields = [\n-            'id', 'title', 'excerpt', 'status', 'publish_date', \n-            'created_at', 'updated_at', 'category', 'tags'\n+        fields = updated_at', 'category', 'tags'\n         ]\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1731322457613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,9 @@\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n         model = CaseStudy\n-        fields = updated_at', 'category', 'tags'\n-        ]\n+        fields = '__all'\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n"
                },
                {
                    "date": 1731322465381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n         model = CaseStudy\n-        fields = '__all'\n+        fields = '__all__'\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n@@ -47,14 +47,9 @@\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = CaseStudy\n-        fields = [\n-            'id', 'title', 'description', 'status', 'publish_date', \n-            'meta_description', 'meta_keywords', 'meta_author',\n-            'created_at', 'updated_at', 'category', 'tags', \n-            'header_code', 'embedded_code', 'featured_image'\n-        ]\n+        fields = '__all__'\n \n \n class CaseStudyWriteSerializers(serializers.ModelSerializer):\n     tags = serializers.ListField(\n"
                },
                {
                    "date": 1731322470473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,14 +60,9 @@\n     )\n \n     class Meta:\n         model = CaseStudy\n-        fields = [\n-            'id', 'title', 'description', 'site_title', 'excerpt', \n-            'status', 'publish_date', 'meta_description', 'meta_keywords', \n-            'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n-            'featured_image'\n-        ]\n+        fields = '__all__'\n \n     def validate_publish_date(self, value):\n         \"\"\"\n         Ensure that publish_date is in the future for scheduled blogs.\n"
                },
                {
                    "date": 1731322512064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name','professional_image']  \n+        fields = ['full_name','professional_image']\n+        ref  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731322526222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n         fields = ['full_name','professional_image']\n-        ref  \n+        ref_name = \"\"  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731322533858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n from accounts.models import CustomUser\n \n-class BlogUserSerializer(serializers.ModelSerializer):\n+class CaseUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n         fields = ['full_name','professional_image']\n         ref_name = \"\"  \n"
                },
                {
                    "date": 1731322539979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n+    user = CaseUserSerializer(read_only=True)\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1731322558171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+# from rest_framework import serializers\n+# from ..models import CaseStudy\n+\n+# class CaseStudyListSerializers(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = CaseStudy\n+#         fields = '__all__'\n+\n+# class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = CaseStudy\n+#         fields = '__all__'\n+\n+# class CaseStudyWriteSerializers(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = CaseStudy\n+#         fields = '__all__'\n+\n+from rest_framework import serializers\n+from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n+from django.utils import timezone\n+from accounts.models import CustomUser\n+\n+class CaseUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name','professional_image']\n+\n+class CaseStudyTagsSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CaseStudyTags\n+        fields = ['id', 'name']\n+        \n+class CaseStudyListSerializers(serializers.ModelSerializer):\n+    user = CaseUserSerializer(read_only=True)\n+    category = serializers.StringRelatedField(many=True)\n+    tags = serializers.StringRelatedField(many=True)\n+\n+    class Meta:\n+        model = CaseStudy\n+        fields = '__all__'\n+\n+\n+class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n+    category = serializers.StringRelatedField(many=True)\n+    tags = serializers.StringRelatedField(many=True)\n+    user = CaseUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = CaseStudy\n+        fields = '__all__'\n+\n+\n+class CaseStudyWriteSerializers(serializers.ModelSerializer):\n+    tags = serializers.ListField(\n+        child=serializers.CharField(max_length=155), write_only=True\n+    )\n+    category = serializers.ListField(\n+        child=serializers.IntegerField(), write_only=True\n+    )\n+\n+    class Meta:\n+        model = CaseStudy\n+        fields = '__all__'\n+\n+    def validate_publish_date(self, value):\n+        \"\"\"\n+        Ensure that publish_date is in the future for scheduled blogs.\n+        \"\"\"\n+        if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n+            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n+        return value\n+\n+    def create(self, validated_data):\n+        tags_data = validated_data.pop('tags', [])\n+        category_data = validated_data.pop('category', [])\n+        \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+        \n+        blog = CaseStudy.objects.create(**validated_data)\n+        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n+        blog.category.set(category_data)\n+\n+        return blog\n+\n+    def update(self, instance, validated_data):\n+        tags_data = validated_data.pop('tags', None)\n+        category_data = validated_data.pop('category', None)\n+        featured_image = validated_data.pop('featured_image', None)\n+        \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+\n+        # Update instance fields if data is provided\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+\n+        # Handle tags if provided\n+        if tags_data is not None:\n+            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n+\n+        # Handle categories if provided\n+        if category_data is not None:\n+            instance.category.set(category_data)\n+\n+        # Handle featured_image specifically\n+        if featured_image is not None:\n+            if featured_image == \"null\":\n+                # If image is set to 'null', delete the current image\n+                instance.featured_image.delete(save=False)\n+                instance.featured_image = None\n+            else:\n+                # If image data is sent, update it\n+                instance.featured_image = featured_image\n+\n+        instance.save()\n+        return instance\n"
                }
            ],
            "date": 1730097911637,
            "name": "Commit-0",
            "content": "# from rest_framework import serializers\n# from ..models import CaseStudy\n\n# class CaseStudyListSerializers(serializers.ModelSerializer):\n#     class Meta:\n#         model = CaseStudy\n#         fields = '__all__'\n\n# class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n#     class Meta:\n#         model = CaseStudy\n#         fields = '__all__'\n\n# class CaseStudyWriteSerializers(serializers.ModelSerializer):\n#     class Meta:\n#         model = CaseStudy\n#         fields = '__all__'"
        }
    ]
}