{
    "sourceFile": "casestudy/serializers/casestudy_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 68,
            "patches": [
                {
                    "date": 1730097911637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730097923543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,5 +13,92 @@\n \n # class CaseStudyWriteSerializers(serializers.ModelSerializer):\n #     class Meta:\n #         model = CaseStudy\n-#         fields = '__all__'\n\\ No newline at end of file\n+#         fields = '__all__'\n+\n+from rest_framework import serializers\n+from ..models import Blog, BlogTags, BlogCategory\n+from django.utils import timezone\n+\n+\n+class BlogTagsSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = BlogTags\n+        fields = ['id', 'name']\n+        \n+class CaseStudyListSerializers(serializers.ModelSerializer):\n+    category = serializers.StringRelatedField(many=True)\n+    tags = serializers.StringRelatedField(many=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = [\n+            'id', 'title', 'excerpt', 'status', 'publish_date', \n+            'created_at', 'updated_at', 'category', 'tags'\n+        ]\n+\n+\n+class BlogRetrieveSerializers(serializers.ModelSerializer):\n+    category = serializers.StringRelatedField(many=True)\n+    tags = serializers.StringRelatedField(many=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = [\n+            'id', 'title', 'description', 'status', 'publish_date', \n+            'meta_description', 'meta_keywords', 'meta_author',\n+            'created_at', 'updated_at', 'category', 'tags', \n+            'header_code', 'embedded_code', 'featured_image'\n+        ]\n+\n+\n+class BlogWriteSerializers(serializers.ModelSerializer):\n+    tags = serializers.ListField(\n+        child=serializers.CharField(max_length=155), write_only=True\n+    )\n+    category = serializers.ListField(\n+        child=serializers.IntegerField(), write_only=True\n+    )\n+\n+    class Meta:\n+        model = Blog\n+        fields = [\n+            'id', 'title', 'description', 'site_title', 'excerpt', \n+            'status', 'publish_date', 'meta_description', 'meta_keywords', \n+            'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n+            'featured_image'\n+        ]\n+\n+    def validate_publish_date(self, value):\n+        \"\"\"\n+        Ensure that publish_date is in the future for scheduled blogs.\n+        \"\"\"\n+        if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n+            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n+        return value\n+\n+    def create(self, validated_data):\n+        tags_data = validated_data.pop('tags', [])\n+        category_data = validated_data.pop('category', [])\n+        \n+        blog = Blog.objects.create(**validated_data)\n+        blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        blog.category.set(category_data)\n+\n+        return blog\n+\n+    def update(self, instance, validated_data):\n+        tags_data = validated_data.pop('tags', [])\n+        category_data = validated_data.pop('category', [])\n+\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+\n+        if tags_data:\n+            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        \n+        if category_data:\n+            instance.category.set(category_data)\n+\n+        instance.save()\n+        return instance\n"
                },
                {
                    "date": 1730097929323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n from ..models import Blog, BlogTags, BlogCategory\n from django.utils import timezone\n \n \n-class BlogTagsSerializer(serializers.ModelSerializer):\n+class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = BlogTags\n         fields = ['id', 'name']\n         \n"
                },
                {
                    "date": 1730097940873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n             'created_at', 'updated_at', 'category', 'tags'\n         ]\n \n \n-class BlogRetrieveSerializers(serializers.ModelSerializer):\n+class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1730097954712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n             'header_code', 'embedded_code', 'featured_image'\n         ]\n \n \n-class BlogWriteSerializers(serializers.ModelSerializer):\n+class CaseStudyWriteSerializers(serializers.ModelSerializer):\n     tags = serializers.ListField(\n         child=serializers.CharField(max_length=155), write_only=True\n     )\n     category = serializers.ListField(\n@@ -80,9 +80,9 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n-        blog = Blog.objects.create(**validated_data)\n+        blog = CaseStudy.objects.create(**validated_data)\n         blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n         return blog\n"
                },
                {
                    "date": 1730097962033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n #         model = CaseStudy\n #         fields = '__all__'\n \n from rest_framework import serializers\n-from ..models import Blog, BlogTags, BlogCategory\n+from ..models import CaseStudy, BlogTags, BlogCategory\n from django.utils import timezone\n \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n@@ -81,9 +81,9 @@\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n         blog = CaseStudy.objects.create(**validated_data)\n-        blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n         return blog\n \n"
                },
                {
                    "date": 1730097968292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n #         model = CaseStudy\n #         fields = '__all__'\n \n from rest_framework import serializers\n-from ..models import CaseStudy, BlogTags, BlogCategory\n+from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1730097975442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = BlogTags\n+        model = CaseStudyags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n"
                },
                {
                    "date": 1730097981279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,17 +22,17 @@\n \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = CaseStudyags\n+        model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n-        model = Blog\n+        model = CaseStudy\n         fields = [\n             'id', 'title', 'excerpt', 'status', 'publish_date', \n             'created_at', 'updated_at', 'category', 'tags'\n         ]\n"
                },
                {
                    "date": 1730097989581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n-        model = Blog\n+        model = CaseStudy\n         fields = [\n             'id', 'title', 'description', 'status', 'publish_date', \n             'meta_description', 'meta_keywords', 'meta_author',\n             'created_at', 'updated_at', 'category', 'tags', \n@@ -60,9 +60,9 @@\n         child=serializers.IntegerField(), write_only=True\n     )\n \n     class Meta:\n-        model = Blog\n+        model = CaseStudy\n         fields = [\n             'id', 'title', 'description', 'site_title', 'excerpt', \n             'status', 'publish_date', 'meta_description', 'meta_keywords', \n             'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n"
                },
                {
                    "date": 1730097995750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n \n         if tags_data:\n-            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         \n         if category_data:\n             instance.category.set(category_data)\n \n"
                },
                {
                    "date": 1730098042695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,13 +80,13 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n-        blog = CaseStudy.objects.create(**validated_data)\n-        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-        blog.category.set(category_data)\n+        case_study = CaseStudy.objects.create(**validated_data)\n+        case_study.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n+        case_study.category.set(category_data)\n \n-        return blog\n+        return case_study\n \n     def update(self, instance, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n"
                },
                {
                    "date": 1730266423472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         child=serializers.IntegerField(), write_only=True\n     )\n \n     class Meta:\n-        model = CaseStudy\n+        model = Blog\n         fields = [\n             'id', 'title', 'description', 'site_title', 'excerpt', \n             'status', 'publish_date', 'meta_description', 'meta_keywords', \n             'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n@@ -80,25 +80,39 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n-        case_study = CaseStudy.objects.create(**validated_data)\n-        case_study.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-        case_study.category.set(category_data)\n+        blog = Blog.objects.create(**validated_data)\n+        blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        blog.category.set(category_data)\n \n-        return case_study\n+        return blog\n \n     def update(self, instance, validated_data):\n-        tags_data = validated_data.pop('tags', [])\n-        category_data = validated_data.pop('category', [])\n+        tags_data = validated_data.pop('tags', None)\n+        category_data = validated_data.pop('category', None)\n+        featured_image = validated_data.pop('featured_image', None)\n \n+        # Update instance fields if data is provided\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n \n-        if tags_data:\n-            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-        \n-        if category_data:\n+        # Handle tags if provided\n+        if tags_data is not None:\n+            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+\n+        # Handle categories if provided\n+        if category_data is not None:\n             instance.category.set(category_data)\n \n+        # Handle featured_image specifically\n+        if featured_image is not None:\n+            if featured_image == \"null\":\n+                # If image is set to 'null', delete the current image\n+                instance.featured_image.delete(save=False)\n+                instance.featured_image = None\n+            else:\n+                # If image data is sent, update it\n+                instance.featured_image = featured_image\n+\n         instance.save()\n         return instance\n"
                },
                {
                    "date": 1730266432223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n         blog = Blog.objects.create(**validated_data)\n-        blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n         return blog\n \n@@ -97,9 +97,9 @@\n             setattr(instance, attr, value)\n \n         # Handle tags if provided\n         if tags_data is not None:\n-            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n \n         # Handle categories if provided\n         if category_data is not None:\n             instance.category.set(category_data)\n"
                },
                {
                    "date": 1730266440542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         child=serializers.IntegerField(), write_only=True\n     )\n \n     class Meta:\n-        model = Blog\n+        model = CaseStudy\n         fields = [\n             'id', 'title', 'description', 'site_title', 'excerpt', \n             'status', 'publish_date', 'meta_description', 'meta_keywords', \n             'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n@@ -80,9 +80,9 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n-        blog = Blog.objects.create(**validated_data)\n+        blog = CaseStudy.objects.create(**validated_data)\n         blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n         return blog\n"
                },
                {
                    "date": 1731321960617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,13 @@\n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+        \n         blog = CaseStudy.objects.create(**validated_data)\n         blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         blog.category.set(category_data)\n \n"
                },
                {
                    "date": 1731322156983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,12 @@\n from rest_framework import serializers\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n \n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name', 'image']  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n@@ -95,8 +99,13 @@\n     def update(self, instance, validated_data):\n         tags_data = validated_data.pop('tags', None)\n         category_data = validated_data.pop('category', None)\n         featured_image = validated_data.pop('featured_image', None)\n+        \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n \n         # Update instance fields if data is provided\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n"
                },
                {
                    "date": 1731322167042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n \n from rest_framework import serializers\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n+from accounts.models import \n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n"
                },
                {
                    "date": 1731322192188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n from rest_framework import serializers\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n-from accounts.models import \n+from accounts.models import CustomUser\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n@@ -31,8 +31,10 @@\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n+     user = BlogUserSerializer(read_only=True)\n+\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1731322197412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,9 @@\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n-     user = BlogUserSerializer(read_only=True)\n-\n+    user = BlogUserSerializer(read_only=True)\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1731322203414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n+    user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = CaseStudy\n         fields = [\n"
                },
                {
                    "date": 1731322361470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name', 'image']  \n+        fields = ['full_name']  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731322382415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name']  \n+        fields = ['full_name','professional_image']  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731322450961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,9 @@\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n         model = CaseStudy\n-        fields = [\n-            'id', 'title', 'excerpt', 'status', 'publish_date', \n-            'created_at', 'updated_at', 'category', 'tags'\n+        fields = updated_at', 'category', 'tags'\n         ]\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1731322457613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,9 @@\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n         model = CaseStudy\n-        fields = updated_at', 'category', 'tags'\n-        ]\n+        fields = '__all'\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n"
                },
                {
                    "date": 1731322465381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n         model = CaseStudy\n-        fields = '__all'\n+        fields = '__all__'\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = serializers.StringRelatedField(many=True)\n@@ -47,14 +47,9 @@\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = CaseStudy\n-        fields = [\n-            'id', 'title', 'description', 'status', 'publish_date', \n-            'meta_description', 'meta_keywords', 'meta_author',\n-            'created_at', 'updated_at', 'category', 'tags', \n-            'header_code', 'embedded_code', 'featured_image'\n-        ]\n+        fields = '__all__'\n \n \n class CaseStudyWriteSerializers(serializers.ModelSerializer):\n     tags = serializers.ListField(\n"
                },
                {
                    "date": 1731322470473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,14 +60,9 @@\n     )\n \n     class Meta:\n         model = CaseStudy\n-        fields = [\n-            'id', 'title', 'description', 'site_title', 'excerpt', \n-            'status', 'publish_date', 'meta_description', 'meta_keywords', \n-            'meta_author', 'tags', 'category', 'header_code', 'embedded_code', \n-            'featured_image'\n-        ]\n+        fields = '__all__'\n \n     def validate_publish_date(self, value):\n         \"\"\"\n         Ensure that publish_date is in the future for scheduled blogs.\n"
                },
                {
                    "date": 1731322512064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name','professional_image']  \n+        fields = ['full_name','professional_image']\n+        ref  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731322526222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n         fields = ['full_name','professional_image']\n-        ref  \n+        ref_name = \"\"  \n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731322533858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n from accounts.models import CustomUser\n \n-class BlogUserSerializer(serializers.ModelSerializer):\n+class CaseUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n         fields = ['full_name','professional_image']\n         ref_name = \"\"  \n"
                },
                {
                    "date": 1731322539979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n+    user = CaseUserSerializer(read_only=True)\n     category = serializers.StringRelatedField(many=True)\n     tags = serializers.StringRelatedField(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1731322558171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+# from rest_framework import serializers\n+# from ..models import CaseStudy\n+\n+# class CaseStudyListSerializers(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = CaseStudy\n+#         fields = '__all__'\n+\n+# class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = CaseStudy\n+#         fields = '__all__'\n+\n+# class CaseStudyWriteSerializers(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = CaseStudy\n+#         fields = '__all__'\n+\n+from rest_framework import serializers\n+from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n+from django.utils import timezone\n+from accounts.models import CustomUser\n+\n+class CaseUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name','professional_image']\n+\n+class CaseStudyTagsSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CaseStudyTags\n+        fields = ['id', 'name']\n+        \n+class CaseStudyListSerializers(serializers.ModelSerializer):\n+    user = CaseUserSerializer(read_only=True)\n+    category = serializers.StringRelatedField(many=True)\n+    tags = serializers.StringRelatedField(many=True)\n+\n+    class Meta:\n+        model = CaseStudy\n+        fields = '__all__'\n+\n+\n+class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n+    category = serializers.StringRelatedField(many=True)\n+    tags = serializers.StringRelatedField(many=True)\n+    user = CaseUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = CaseStudy\n+        fields = '__all__'\n+\n+\n+class CaseStudyWriteSerializers(serializers.ModelSerializer):\n+    tags = serializers.ListField(\n+        child=serializers.CharField(max_length=155), write_only=True\n+    )\n+    category = serializers.ListField(\n+        child=serializers.IntegerField(), write_only=True\n+    )\n+\n+    class Meta:\n+        model = CaseStudy\n+        fields = '__all__'\n+\n+    def validate_publish_date(self, value):\n+        \"\"\"\n+        Ensure that publish_date is in the future for scheduled blogs.\n+        \"\"\"\n+        if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n+            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n+        return value\n+\n+    def create(self, validated_data):\n+        tags_data = validated_data.pop('tags', [])\n+        category_data = validated_data.pop('category', [])\n+        \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+        \n+        blog = CaseStudy.objects.create(**validated_data)\n+        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n+        blog.category.set(category_data)\n+\n+        return blog\n+\n+    def update(self, instance, validated_data):\n+        tags_data = validated_data.pop('tags', None)\n+        category_data = validated_data.pop('category', None)\n+        featured_image = validated_data.pop('featured_image', None)\n+        \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+\n+        # Update instance fields if data is provided\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+\n+        # Handle tags if provided\n+        if tags_data is not None:\n+            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n+\n+        # Handle categories if provided\n+        if category_data is not None:\n+            instance.category.set(category_data)\n+\n+        # Handle featured_image specifically\n+        if featured_image is not None:\n+            if featured_image == \"null\":\n+                # If image is set to 'null', delete the current image\n+                instance.featured_image.delete(save=False)\n+                instance.featured_image = None\n+            else:\n+                # If image data is sent, update it\n+                instance.featured_image = featured_image\n+\n+        instance.save()\n+        return instance\n"
                },
                {
                    "date": 1731396483082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n         \"\"\"\n         if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n             raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n         return value\n+    \n \n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n@@ -119,127 +120,4 @@\n                 instance.featured_image = featured_image\n \n         instance.save()\n         return instance\n-# from rest_framework import serializers\n-# from ..models import CaseStudy\n-\n-# class CaseStudyListSerializers(serializers.ModelSerializer):\n-#     class Meta:\n-#         model = CaseStudy\n-#         fields = '__all__'\n-\n-# class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n-#     class Meta:\n-#         model = CaseStudy\n-#         fields = '__all__'\n-\n-# class CaseStudyWriteSerializers(serializers.ModelSerializer):\n-#     class Meta:\n-#         model = CaseStudy\n-#         fields = '__all__'\n-\n-from rest_framework import serializers\n-from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n-from django.utils import timezone\n-from accounts.models import CustomUser\n-\n-class CaseUserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name','professional_image']\n-        ref_name = \"\"  \n-\n-class CaseStudyTagsSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CaseStudyTags\n-        fields = ['id', 'name']\n-        \n-class CaseStudyListSerializers(serializers.ModelSerializer):\n-    user = CaseUserSerializer(read_only=True)\n-    category = serializers.StringRelatedField(many=True)\n-    tags = serializers.StringRelatedField(many=True)\n-\n-    class Meta:\n-        model = CaseStudy\n-        fields = '__all__'\n-\n-\n-class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n-    category = serializers.StringRelatedField(many=True)\n-    tags = serializers.StringRelatedField(many=True)\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = CaseStudy\n-        fields = '__all__'\n-\n-\n-class CaseStudyWriteSerializers(serializers.ModelSerializer):\n-    tags = serializers.ListField(\n-        child=serializers.CharField(max_length=155), write_only=True\n-    )\n-    category = serializers.ListField(\n-        child=serializers.IntegerField(), write_only=True\n-    )\n-\n-    class Meta:\n-        model = CaseStudy\n-        fields = '__all__'\n-\n-    def validate_publish_date(self, value):\n-        \"\"\"\n-        Ensure that publish_date is in the future for scheduled blogs.\n-        \"\"\"\n-        if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n-            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n-        return value\n-\n-    def create(self, validated_data):\n-        tags_data = validated_data.pop('tags', [])\n-        category_data = validated_data.pop('category', [])\n-        \n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  \n-        validated_data['created_by'] = full_name\n-        validated_data['user'] = user\n-        \n-        blog = CaseStudy.objects.create(**validated_data)\n-        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-        blog.category.set(category_data)\n-\n-        return blog\n-\n-    def update(self, instance, validated_data):\n-        tags_data = validated_data.pop('tags', None)\n-        category_data = validated_data.pop('category', None)\n-        featured_image = validated_data.pop('featured_image', None)\n-        \n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  \n-        validated_data['created_by'] = full_name\n-        validated_data['user'] = user\n-\n-        # Update instance fields if data is provided\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-\n-        # Handle tags if provided\n-        if tags_data is not None:\n-            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-\n-        # Handle categories if provided\n-        if category_data is not None:\n-            instance.category.set(category_data)\n-\n-        # Handle featured_image specifically\n-        if featured_image is not None:\n-            if featured_image == \"null\":\n-                # If image is set to 'null', delete the current image\n-                instance.featured_image.delete(save=False)\n-                instance.featured_image = None\n-            else:\n-                # If image data is sent, update it\n-                instance.featured_image = featured_image\n-\n-        instance.save()\n-        return instance\n"
                },
                {
                    "date": 1731396488290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,14 @@\n         \"\"\"\n         if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n             raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n         return value\n-    \n+    def validate(self, data):\n+        # Check if the position already exists in another Career\n+        position = data.get('position')\n+        if position and Case.objects.filter(position=position).exists():\n+            raise serializers.ValidationError({\"position\": \"A blog with this position already exists.\"})\n+        return data\n \n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n"
                },
                {
                    "date": 1731396494428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,10 +72,10 @@\n         return value\n     def validate(self, data):\n         # Check if the position already exists in another Career\n         position = data.get('position')\n-        if position and Case.objects.filter(position=position).exists():\n-            raise serializers.ValidationError({\"position\": \"A blog with this position already exists.\"})\n+        if position and CaseStudy.objects.filter(position=position).exists():\n+            raise serializers.ValidationError({\"position\": \"A case with this position already exists.\"})\n         return data\n \n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n"
                },
                {
                    "date": 1731478389342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,18 +73,18 @@\n     def validate(self, data):\n         # Check if the position already exists in another Career\n         position = data.get('position')\n         if position and CaseStudy.objects.filter(position=position).exists():\n-            raise serializers.ValidationError({\"position\": \"A case with this position already exists.\"})\n+            raise serializers.ValidationError({\"position\": \"A case-study with this position already exists.\"})\n         return data\n \n     def create(self, validated_data):\n         tags_data = validated_data.pop('tags', [])\n         category_data = validated_data.pop('category', [])\n         \n         user = self.context['request'].user\n         full_name = user.full_name or user.username  \n-        validated_data['created_by'] = full_name\n+        validated_data['author'] = full_name\n         validated_data['user'] = user\n         \n         blog = CaseStudy.objects.create(**validated_data)\n         blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n"
                },
                {
                    "date": 1731478402576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n         featured_image = validated_data.pop('featured_image', None)\n         \n         user = self.context['request'].user\n         full_name = user.full_name or user.username  \n-        validated_data['created_by'] = full_name\n+        validated_data['author'] = full_name\n         validated_data['user'] = user\n \n         # Update instance fields if data is provided\n         for attr, value in validated_data.items():\n"
                },
                {
                    "date": 1731482507223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,9 @@\n \n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n+        read_only_fields = ['user', 'author']\n \n     def validate_publish_date(self, value):\n         \"\"\"\n         Ensure that publish_date is in the future for scheduled blogs.\n"
                },
                {
                    "date": 1731490469599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,11 +41,11 @@\n         fields = '__all__'\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n-    category = serializers.StringRelatedField(many=True)\n-    tags = serializers.StringRelatedField(many=True)\n-    user = CaseUserSerializer(read_only=True)\n+    category = BlogCategorySerializer(many=True, read_only=True)\n+    tags = BlogTagsSerializer(many=True, read_only=True)\n+    user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n"
                },
                {
                    "date": 1731490477257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         fields = '__all__'\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n-    category = BlogCategorySerializer(many=True, read_only=True)\n+    category = CategorySerializer(many=True, read_only=True)\n     tags = BlogTagsSerializer(many=True, read_only=True)\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1731490483775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = CategorySerializer(many=True, read_only=True)\n-    tags = BlogTagsSerializer(many=True, read_only=True)\n-    user = BlogUserSerializer(read_only=True)\n+    tags = TagsSerializer(many=True, read_only=True)\n+    user = UserSerializer(read_only=True)\n \n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n"
                },
                {
                    "date": 1731490489543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+# from rest_framework import serializers\n+# from ..models import CaseStudy\n+\n+# class CaseStudyListSerializers(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = CaseStudy\n+#         fields = '__all__'\n+\n+# class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = CaseStudy\n+#         fields = '__all__'\n+\n+# class CaseStudyWriteSerializers(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = CaseStudy\n+#         fields = '__all__'\n+\n+from rest_framework import serializers\n+from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n+from django.utils import timezone\n+from accounts.models import CustomUser\n+\n+class CaseUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name','professional_image']\n+\n+class CaseStudyTagsSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CaseStudyTags\n+        fields = ['id', 'name']\n+        \n+class CaseStudyListSerializers(serializers.ModelSerializer):\n+    category = BlogCategorySerializer(many=True, read_only=True)\n+    tags = BlogTagsSerializer(many=True, read_only=True)\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = CaseStudy\n+        fields = '__all__'\n+\n+\n+class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n+    category = CategorySerializer(many=True, read_only=True)\n+    tags = TagsSerializer(many=True, read_only=True)\n+    user = UserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = CaseStudy\n+        fields = '__all__'\n+\n+\n+class CaseStudyWriteSerializers(serializers.ModelSerializer):\n+    tags = serializers.ListField(\n+        child=serializers.CharField(max_length=155), write_only=True\n+    )\n+    category = serializers.ListField(\n+        child=serializers.IntegerField(), write_only=True\n+    )\n+\n+    class Meta:\n+        model = CaseStudy\n+        fields = '__all__'\n+        read_only_fields = ['user', 'author']\n+\n+    def validate_publish_date(self, value):\n+        \"\"\"\n+        Ensure that publish_date is in the future for scheduled blogs.\n+        \"\"\"\n+        if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n+            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n+        return value\n+    def validate(self, data):\n+        # Check if the position already exists in another Career\n+        position = data.get('position')\n+        if position and CaseStudy.objects.filter(position=position).exists():\n+            raise serializers.ValidationError({\"position\": \"A case-study with this position already exists.\"})\n+        return data\n+\n+    def create(self, validated_data):\n+        tags_data = validated_data.pop('tags', [])\n+        category_data = validated_data.pop('category', [])\n+        \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['author'] = full_name\n+        validated_data['user'] = user\n+        \n+        blog = CaseStudy.objects.create(**validated_data)\n+        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n+        blog.category.set(category_data)\n+\n+        return blog\n+\n+    def update(self, instance, validated_data):\n+        tags_data = validated_data.pop('tags', None)\n+        category_data = validated_data.pop('category', None)\n+        featured_image = validated_data.pop('featured_image', None)\n+        \n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['author'] = full_name\n+        validated_data['user'] = user\n+\n+        # Update instance fields if data is provided\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+\n+        # Handle tags if provided\n+        if tags_data is not None:\n+            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n+\n+        # Handle categories if provided\n+        if category_data is not None:\n+            instance.category.set(category_data)\n+\n+        # Handle featured_image specifically\n+        if featured_image is not None:\n+            if featured_image == \"null\":\n+                # If image is set to 'null', delete the current image\n+                instance.featured_image.delete(save=False)\n+                instance.featured_image = None\n+            else:\n+                # If image data is sent, update it\n+                instance.featured_image = featured_image\n+\n+        instance.save()\n+        return instance\n"
                },
                {
                    "date": 1731490496899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,146 +31,16 @@\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n-    category = BlogCategorySerializer(many=True, read_only=True)\n-    tags = BlogTagsSerializer(many=True, read_only=True)\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = CaseStudy\n-        fields = '__all__'\n-\n-\n-class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = CategorySerializer(many=True, read_only=True)\n     tags = TagsSerializer(many=True, read_only=True)\n     user = UserSerializer(read_only=True)\n-\n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n \n \n-class CaseStudyWriteSerializers(serializers.ModelSerializer):\n-    tags = serializers.ListField(\n-        child=serializers.CharField(max_length=155), write_only=True\n-    )\n-    category = serializers.ListField(\n-        child=serializers.IntegerField(), write_only=True\n-    )\n-\n-    class Meta:\n-        model = CaseStudy\n-        fields = '__all__'\n-        read_only_fields = ['user', 'author']\n-\n-    def validate_publish_date(self, value):\n-        \"\"\"\n-        Ensure that publish_date is in the future for scheduled blogs.\n-        \"\"\"\n-        if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n-            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n-        return value\n-    def validate(self, data):\n-        # Check if the position already exists in another Career\n-        position = data.get('position')\n-        if position and CaseStudy.objects.filter(position=position).exists():\n-            raise serializers.ValidationError({\"position\": \"A case-study with this position already exists.\"})\n-        return data\n-\n-    def create(self, validated_data):\n-        tags_data = validated_data.pop('tags', [])\n-        category_data = validated_data.pop('category', [])\n-        \n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  \n-        validated_data['author'] = full_name\n-        validated_data['user'] = user\n-        \n-        blog = CaseStudy.objects.create(**validated_data)\n-        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-        blog.category.set(category_data)\n-\n-        return blog\n-\n-    def update(self, instance, validated_data):\n-        tags_data = validated_data.pop('tags', None)\n-        category_data = validated_data.pop('category', None)\n-        featured_image = validated_data.pop('featured_image', None)\n-        \n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  \n-        validated_data['author'] = full_name\n-        validated_data['user'] = user\n-\n-        # Update instance fields if data is provided\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-\n-        # Handle tags if provided\n-        if tags_data is not None:\n-            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-\n-        # Handle categories if provided\n-        if category_data is not None:\n-            instance.category.set(category_data)\n-\n-        # Handle featured_image specifically\n-        if featured_image is not None:\n-            if featured_image == \"null\":\n-                # If image is set to 'null', delete the current image\n-                instance.featured_image.delete(save=False)\n-                instance.featured_image = None\n-            else:\n-                # If image data is sent, update it\n-                instance.featured_image = featured_image\n-\n-        instance.save()\n-        return instance\n-# from rest_framework import serializers\n-# from ..models import CaseStudy\n-\n-# class CaseStudyListSerializers(serializers.ModelSerializer):\n-#     class Meta:\n-#         model = CaseStudy\n-#         fields = '__all__'\n-\n-# class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n-#     class Meta:\n-#         model = CaseStudy\n-#         fields = '__all__'\n-\n-# class CaseStudyWriteSerializers(serializers.ModelSerializer):\n-#     class Meta:\n-#         model = CaseStudy\n-#         fields = '__all__'\n-\n-from rest_framework import serializers\n-from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n-from django.utils import timezone\n-from accounts.models import CustomUser\n-\n-class CaseUserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name','professional_image']\n-\n-class CaseStudyTagsSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CaseStudyTags\n-        fields = ['id', 'name']\n-        \n-class CaseStudyListSerializers(serializers.ModelSerializer):\n-    user = CaseUserSerializer(read_only=True)\n-    category = serializers.StringRelatedField(many=True)\n-    tags = serializers.StringRelatedField(many=True)\n-\n-    class Meta:\n-        model = CaseStudy\n-        fields = '__all__'\n-\n-\n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n     category = CategorySerializer(many=True, read_only=True)\n     tags = TagsSerializer(many=True, read_only=True)\n     user = UserSerializer(read_only=True)\n"
                },
                {
                    "date": 1731490504041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n class CaseUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name','professional_image']\n+        fields = ['full_name','professional_image','']\n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731490555133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,27 @@\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n from accounts.models import CustomUser\n \n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name','professional_image','position']  \n+\n+\n+class BlogCategorySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = BlogCategory\n+        fields = '__all__'\n+        \n+class BlogTagsSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = BlogTags\n+        fields = ['id', 'name']\n class CaseUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name','professional_image','']\n+        fields = ['full_name','professional_image','position']\n \n class CaseStudyTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n"
                },
                {
                    "date": 1731490561456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,15 +20,15 @@\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n from accounts.models import CustomUser\n \n-class BlogUserSerializer(serializers.ModelSerializer):\n+class UserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n         fields = ['full_name','professional_image','position']  \n \n \n-class BlogCategorySerializer(serializers.ModelSerializer):\n+class CategorySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = BlogCategory\n         fields = '__all__'\n         \n"
                },
                {
                    "date": 1731490568592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,12 +28,12 @@\n \n \n class CategorySerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = BlogCategory\n+        model = CaseStudyCategory\n         fields = '__all__'\n         \n-class BlogTagsSerializer(serializers.ModelSerializer):\n+class TagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = BlogTags\n         fields = ['id', 'name']\n class CaseUserSerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1731490574282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         fields = '__all__'\n         \n class TagsSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = BlogTags\n+        model = CaseStudyTags\n         fields = ['id', 'name']\n class CaseUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n"
                },
                {
                    "date": 1731490580110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n class TagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n         fields = ['id', 'name']\n+        \n class CaseUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n         fields = ['full_name','professional_image','position']\n"
                },
                {
                    "date": 1731490603747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,39 @@\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n from accounts.models import CustomUser\n \n+\n+def str_to_list(data, value_to_convert):\n+    \"\"\"\n+    Converts a string representation of a list into an actual list if necessary.\n+    \"\"\"\n+    try:\n+        mutable_data = data.dict() if hasattr(data, 'dict') else data\n+        value_to_convert_data = mutable_data.get(value_to_convert, None)\n+        \n+        # Skip conversion if data is already a list or contains objects\n+        if isinstance(value_to_convert_data, list):\n+            # Check if it's a list of BlogTags objects; if so, skip conversion\n+            if all(isinstance(item, BlogTags) for item in value_to_convert_data):\n+                return mutable_data\n+            # If it's a list of IDs or similar, also skip conversion\n+            return mutable_data\n+\n+        # Only parse if value is a string\n+        if isinstance(value_to_convert_data, str):\n+            try:\n+                variations = ast.literal_eval(value_to_convert_data)\n+                if isinstance(variations, list):\n+                    mutable_data[value_to_convert] = variations\n+            except (ValueError, SyntaxError) as e:\n+                raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+        return mutable_data\n+    except KeyError:\n+        # Return unchanged data if value_to_convert is not in the data\n+        return data\n+\n+    \n class UserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n         fields = ['full_name','professional_image','position']  \n"
                },
                {
                    "date": 1731490614220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,12 @@\n from rest_framework import serializers\n from ..models import CaseStudy, CaseStudyTags, CaseStudyCategory\n from django.utils import timezone\n from accounts.models import CustomUser\n+import ast\n+from rest_framework import serializers\n+from django.db import transaction\n+from django.utils import timezone\n \n \n def str_to_list(data, value_to_convert):\n     \"\"\"\n"
                },
                {
                    "date": 1731490638274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,4 +176,100 @@\n                 instance.featured_image = featured_image\n \n         instance.save()\n         return instance\n+class BlogWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+        read_only_fields = ['user', 'author']\n+\n+    def to_internal_value(self, data):\n+        # If tags and category are already lists, no need to call str_to_list\n+        if not isinstance(data.get('tags'), list):\n+            data = str_to_list(data, 'tags')\n+        if not isinstance(data.get('category'), list):\n+            data = str_to_list(data, 'category')\n+        return super().to_internal_value(data)\n+\n+    def validate_publish_date(self, value):\n+        \"\"\"\n+        Ensure that publish_date is in the future for scheduled blogs.\n+        \"\"\"\n+        if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n+            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n+        return value\n+    \n+    def validate(self, data):\n+        # Ensure unique `position` for the blog\n+        position = data.get('position')\n+        if position and Blog.objects.filter(position=position).exists():\n+            raise serializers.ValidationError({\"position\": \"A blog with this position already exists.\"})\n+        return data\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        # Extract `tags` and `category` data from `validated_data`\n+        tags_data = validated_data.pop('tags', [])\n+        category_data = validated_data.pop('category', [])\n+        \n+        # Get the user context\n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+\n+        validated_data['author'] = full_name\n+        validated_data['user'] = user\n+\n+        # Extract single featured image from request if provided\n+        featured_image = self.context['request'].FILES.get('featured_image')\n+\n+        # Create the blog instance\n+        blog = Blog.objects.create(**validated_data)\n+        \n+        # Assign the featured image if it exists\n+        if featured_image:\n+            blog.featured_image = featured_image\n+            blog.save()\n+\n+        # Set tags and categories if provided\n+        if tags_data:\n+            blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+        if category_data:\n+            blog.category.set(category_data)\n+\n+        return blog\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        # Extract `tags`, `category`, and `featured_image` from `validated_data`\n+        tags_data = validated_data.pop('tags', None)\n+        category_data = validated_data.pop('category', None)\n+        featured_image = self.context['request'].FILES.get('featured_image')\n+\n+        # Get the user context\n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+        validated_data['author'] = full_name\n+        validated_data['user'] = user\n+\n+        # Update instance fields if data is provided\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+\n+        # Update tags if provided\n+        if tags_data is not None:\n+            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+\n+        # Update categories if provided\n+        if category_data is not None:\n+            instance.category.set(category_data)\n+\n+        # Handle featured_image specifically\n+        if featured_image:\n+            instance.featured_image = featured_image\n+        elif 'featured_image' in self.context['request'].data and self.context['request'].data['featured_image'] == \"null\":\n+            # If featured_image is set to \"null\" in the data, delete the current image\n+            instance.featured_image.delete(save=False)\n+            instance.featured_image = None\n+\n+        instance.save()\n+        return instance\n"
                },
                {
                    "date": 1731490650499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n                 instance.featured_image = featured_image\n \n         instance.save()\n         return instance\n-class BlogWriteSerializers(serializers.ModelSerializer):\n+class CaseStudyWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         fields = '__all__'\n         read_only_fields = ['user', 'author']\n"
                },
                {
                    "date": 1731490662760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,91 +99,14 @@\n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n \n-\n class CaseStudyWriteSerializers(serializers.ModelSerializer):\n-    tags = serializers.ListField(\n-        child=serializers.CharField(max_length=155), write_only=True\n-    )\n-    category = serializers.ListField(\n-        child=serializers.IntegerField(), write_only=True\n-    )\n-\n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n         read_only_fields = ['user', 'author']\n \n-    def validate_publish_date(self, value):\n-        \"\"\"\n-        Ensure that publish_date is in the future for scheduled blogs.\n-        \"\"\"\n-        if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n-            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n-        return value\n-    def validate(self, data):\n-        # Check if the position already exists in another Career\n-        position = data.get('position')\n-        if position and CaseStudy.objects.filter(position=position).exists():\n-            raise serializers.ValidationError({\"position\": \"A case-study with this position already exists.\"})\n-        return data\n-\n-    def create(self, validated_data):\n-        tags_data = validated_data.pop('tags', [])\n-        category_data = validated_data.pop('category', [])\n-        \n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  \n-        validated_data['author'] = full_name\n-        validated_data['user'] = user\n-        \n-        blog = CaseStudy.objects.create(**validated_data)\n-        blog.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-        blog.category.set(category_data)\n-\n-        return blog\n-\n-    def update(self, instance, validated_data):\n-        tags_data = validated_data.pop('tags', None)\n-        category_data = validated_data.pop('category', None)\n-        featured_image = validated_data.pop('featured_image', None)\n-        \n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  \n-        validated_data['author'] = full_name\n-        validated_data['user'] = user\n-\n-        # Update instance fields if data is provided\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-\n-        # Handle tags if provided\n-        if tags_data is not None:\n-            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n-\n-        # Handle categories if provided\n-        if category_data is not None:\n-            instance.category.set(category_data)\n-\n-        # Handle featured_image specifically\n-        if featured_image is not None:\n-            if featured_image == \"null\":\n-                # If image is set to 'null', delete the current image\n-                instance.featured_image.delete(save=False)\n-                instance.featured_image = None\n-            else:\n-                # If image data is sent, update it\n-                instance.featured_image = featured_image\n-\n-        instance.save()\n-        return instance\n-class CaseStudyWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-        read_only_fields = ['user', 'author']\n-\n     def to_internal_value(self, data):\n         # If tags and category are already lists, no need to call str_to_list\n         if not isinstance(data.get('tags'), list):\n             data = str_to_list(data, 'tags')\n"
                },
                {
                    "date": 1731490680231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n     \n     def validate(self, data):\n         # Ensure unique `position` for the blog\n         position = data.get('position')\n-        if position and Blog.objects.filter(position=position).exists():\n+        if position and CaseStudy.objects.filter(position=position).exists():\n             raise serializers.ValidationError({\"position\": \"A blog with this position already exists.\"})\n         return data\n \n     @transaction.atomic\n"
                },
                {
                    "date": 1731490687296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n             setattr(instance, attr, value)\n \n         # Update tags if provided\n         if tags_data is not None:\n-            instance.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+            instance.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n \n         # Update categories if provided\n         if category_data is not None:\n             instance.category.set(category_data)\n"
                },
                {
                    "date": 1731490703423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,19 +115,19 @@\n         return super().to_internal_value(data)\n \n     def validate_publish_date(self, value):\n         \"\"\"\n-        Ensure that publish_date is in the future for scheduled blogs.\n+        Ensure that publish_date is in the future for scheduled case_studys.\n         \"\"\"\n         if self.initial_data.get('status') == 'scheduled' and value <= timezone.now().date():\n-            raise serializers.ValidationError(\"Publish date must be in the future for scheduled blogs.\")\n+            raise serializers.ValidationError(\"Publish date must be in the future for scheduled case_studys.\")\n         return value\n     \n     def validate(self, data):\n-        # Ensure unique `position` for the blog\n+        # Ensure unique `position` for the case_study\n         position = data.get('position')\n         if position and CaseStudy.objects.filter(position=position).exists():\n-            raise serializers.ValidationError({\"position\": \"A blog with this position already exists.\"})\n+            raise serializers.ValidationError({\"position\": \"A case_study with this position already exists.\"})\n         return data\n \n     @transaction.atomic\n     def create(self, validated_data):\n@@ -144,23 +144,23 @@\n \n         # Extract single featured image from request if provided\n         featured_image = self.context['request'].FILES.get('featured_image')\n \n-        # Create the blog instance\n-        blog = Blog.objects.create(**validated_data)\n+        # Create the case_study instance\n+        case_study = Blog.objects.create(**validated_data)\n         \n         # Assign the featured image if it exists\n         if featured_image:\n-            blog.featured_image = featured_image\n-            blog.save()\n+            case_study.featured_image = featured_image\n+            case_study.save()\n \n         # Set tags and categories if provided\n         if tags_data:\n-            blog.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+            case_study.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n         if category_data:\n-            blog.category.set(category_data)\n+            case_study.category.set(category_data)\n \n-        return blog\n+        return case_study\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n         # Extract `tags`, `category`, and `featured_image` from `validated_data`\n"
                },
                {
                    "date": 1731490733248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n             case_study.save()\n \n         # Set tags and categories if provided\n         if tags_data:\n-            case_study.tags.set(Blog.tag_manager.get_or_create_tags(tags_data))\n+            case_study.tags.set(CaseStudy.tag_manager.get_or_create_tags(tags_data))\n         if category_data:\n             case_study.category.set(category_data)\n \n         return case_study\n"
                },
                {
                    "date": 1731490916909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n-    category = CategorySerializer(many=True, read_only=True)\n+    category = CaseCategorySerializer(many=True, read_only=True)\n     tags = TagsSerializer(many=True, read_only=True)\n     user = UserSerializer(read_only=True)\n     class Meta:\n         model = CaseStudy\n@@ -145,9 +145,9 @@\n         # Extract single featured image from request if provided\n         featured_image = self.context['request'].FILES.get('featured_image')\n \n         # Create the case_study instance\n-        case_study = Blog.objects.create(**validated_data)\n+        case_study = CaseStudy.objects.create(**validated_data)\n         \n         # Assign the featured image if it exists\n         if featured_image:\n             case_study.featured_image = featured_image\n"
                },
                {
                    "date": 1731490927511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,10 @@\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n-    category = CaseCategorySerializer(many=True, read_only=True)\n-    tags = TagsSerializer(many=True, read_only=True)\n+    category = CaseStudyCategorySerializer(many=True, read_only=True)\n+    tags = CaseStudyTagsSerializer(many=True, read_only=True)\n     user = UserSerializer(read_only=True)\n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n"
                },
                {
                    "date": 1731490941867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,18 +75,13 @@\n class CaseUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n         fields = ['full_name','professional_image','position']\n-\n-class CaseStudyTagsSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CaseStudyTags\n-        fields = ['id', 'name']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n     category = CaseStudyCategorySerializer(many=True, read_only=True)\n     tags = CaseStudyTagsSerializer(many=True, read_only=True)\n-    user = UserSerializer(read_only=True)\n+    user = CaseStudyUserSerializer(read_only=True)\n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1731490954686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n     class Meta:\n         model = CaseStudyCategory\n         fields = '__all__'\n         \n-class TagsSerializer(serializers.ModelSerializer):\n+class CaseTagsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyTags\n         fields = ['id', 'name']\n         \n@@ -79,9 +79,9 @@\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n     category = CaseStudyCategorySerializer(many=True, read_only=True)\n     tags = CaseStudyTagsSerializer(many=True, read_only=True)\n-    user = CaseStudyUserSerializer(read_only=True)\n+    user = CaseUserSerializer(read_only=True)\n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1731490965785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,16 +54,10 @@\n     except KeyError:\n         # Return unchanged data if value_to_convert is not in the data\n         return data\n \n-    \n-class UserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name','professional_image','position']  \n \n-\n-class CategorySerializer(serializers.ModelSerializer):\n+class CaseCategorySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CaseStudyCategory\n         fields = '__all__'\n         \n"
                },
                {
                    "date": 1731490970997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         model = CustomUser\n         fields = ['full_name','professional_image','position']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n-    category = CaseStudyCategorySerializer(many=True, read_only=True)\n+    category = CaseCategorySerializer(many=True, read_only=True)\n     tags = CaseStudyTagsSerializer(many=True, read_only=True)\n     user = CaseUserSerializer(read_only=True)\n     class Meta:\n         model = CaseStudy\n"
                },
                {
                    "date": 1731490980703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,19 +72,19 @@\n         fields = ['full_name','professional_image','position']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n     category = CaseCategorySerializer(many=True, read_only=True)\n-    tags = CaseStudyTagsSerializer(many=True, read_only=True)\n+    tags = CaseTagsSerializer(many=True, read_only=True)\n     user = CaseUserSerializer(read_only=True)\n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n-    category = CategorySerializer(many=True, read_only=True)\n-    tags = TagsSerializer(many=True, read_only=True)\n-    user = UserSerializer(read_only=True)\n+       category = CaseCategorySerializer(many=True, read_only=True)\n+    tags = CaseTagsSerializer(many=True, read_only=True)\n+    user = CaseUserSerializer(read_only=True)\n \n     class Meta:\n         model = CaseStudy\n         fields = '__all__'\n"
                },
                {
                    "date": 1731490986731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         fields = '__all__'\n \n \n class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n-       category = CaseCategorySerializer(many=True, read_only=True)\n+    category = CaseCategorySerializer(many=True, read_only=True)\n     tags = CaseTagsSerializer(many=True, read_only=True)\n     user = CaseUserSerializer(read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1731491291706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         \n         # Skip conversion if data is already a list or contains objects\n         if isinstance(value_to_convert_data, list):\n             # Check if it's a list of BlogTags objects; if so, skip conversion\n-            if all(isinstance(item, BlogTags) for item in value_to_convert_data):\n+            if all(isinstance(item, Cas) for item in value_to_convert_data):\n                 return mutable_data\n             # If it's a list of IDs or similar, also skip conversion\n             return mutable_data\n \n"
                },
                {
                    "date": 1731491296961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         \n         # Skip conversion if data is already a list or contains objects\n         if isinstance(value_to_convert_data, list):\n             # Check if it's a list of BlogTags objects; if so, skip conversion\n-            if all(isinstance(item, Cas) for item in value_to_convert_data):\n+            if all(isinstance(item, CaseStudyTags) for item in value_to_convert_data):\n                 return mutable_data\n             # If it's a list of IDs or similar, also skip conversion\n             return mutable_data\n \n"
                },
                {
                    "date": 1731492112290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n         \n class CaseUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name','professional_image','position']\n+        fields = ['full_name','professional_image','position','avatar']\n         \n class CaseStudyListSerializers(serializers.ModelSerializer):\n     category = CaseCategorySerializer(many=True, read_only=True)\n     tags = CaseTagsSerializer(many=True, read_only=True)\n"
                }
            ],
            "date": 1730097911637,
            "name": "Commit-0",
            "content": "# from rest_framework import serializers\n# from ..models import CaseStudy\n\n# class CaseStudyListSerializers(serializers.ModelSerializer):\n#     class Meta:\n#         model = CaseStudy\n#         fields = '__all__'\n\n# class CaseStudyRetrieveSerializers(serializers.ModelSerializer):\n#     class Meta:\n#         model = CaseStudy\n#         fields = '__all__'\n\n# class CaseStudyWriteSerializers(serializers.ModelSerializer):\n#     class Meta:\n#         model = CaseStudy\n#         fields = '__all__'"
        }
    ]
}