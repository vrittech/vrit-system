{
    "sourceFile": "projects/viewsets/projectservice_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1729834349202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729834357190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project-service\")\n     def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n"
                },
                {
                    "date": 1729834382300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import ProjectService\n from ..serializers.projectservice_serializers import ProjectServiceListSerializers, ProjectServiceRetrieveSerializers, ProjectServiceWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n \n class projectserviceViewsets(viewsets.ModelViewSet):\n     serializer_class = ProjectServiceListSerializers\n     # permission_classes = [projectsPermission]\n"
                },
                {
                    "date": 1729834399727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     serializer_class = ProjectServiceListSerializers\n     # permission_classes = [projectsPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = ProjectService.objects.all()\n+    queryset = ProjectService.objects.all().\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n"
                },
                {
                    "date": 1729834405925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     serializer_class = ProjectServiceListSerializers\n     # permission_classes = [projectsPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = ProjectService.objects.all().\n+    queryset = ProjectService.objects.all().order_by(pos)\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n"
                },
                {
                    "date": 1729834412945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     serializer_class = ProjectServiceListSerializers\n     # permission_classes = [projectsPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = ProjectService.objects.all().order_by(pos)\n+    queryset = ProjectService.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n"
                },
                {
                    "date": 1729834425720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         from rest_framework.response import Response\n \n         # Fetch the target and goal objects\n         try:\n-            target_obj = Project.objects.get(id=target)\n+            target_obj = ProjectService.objects.get(id=target)\n             goal_obj = Project.objects.get(id=goal)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n"
                },
                {
                    "date": 1729834431247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,18 +46,18 @@\n \n         # Fetch the target and goal objects\n         try:\n             target_obj = ProjectService.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n+            goal_obj = ProjectService.objects.get(id=goal)\n+        except ProjectService.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         target_position = target_obj.position\n         goal_position = goal_obj.position\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            affected_objs = ProjectService.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n             \n             # Decrement position of all affected objects\n             for obj in affected_objs:\n                 obj.position -= 1\n"
                },
                {
                    "date": 1729834438336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n             target_obj.save()\n \n         else:\n           # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+            affected_objs = ProjectService.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n \n             # Increment position of all affected objects by 1\n             for obj in affected_objs:\n                 obj.position += 1\n"
                },
                {
                    "date": 1729834455337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n+    ProjectService\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1729834485827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n-    ProjectService\n+    ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1729834560004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = ProjectService.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n+    search_fields = ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n     ordering_fields = ['id']\n     ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1729834566604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = ProjectService.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n+    search_fields = ('id','name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n     ordering_fields = ['id']\n     ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1729834573532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     queryset = ProjectService.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ('id','name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n-    ordering_fields = ['id']\n+    ordering_fields = ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n     ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1729834579801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     queryset = ProjectService.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ('id','name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n-    ordering_fields = ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n+    ordering_fields = ('id','name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n     ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1729834587506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,13 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ('id','name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n     ordering_fields = ('id','name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n-    ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n+    # ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1729834593270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n     # ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729834601717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,10 @@\n     # ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'id': ['exact'],\n+        'name': ['exact'],\n+        'name': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729834608600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n-        'name': ['exact'],\n+        'position': ['exact'],\n+        'position': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729834672030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,17 +13,17 @@\n     pagination_class = MyPageNumberPagination\n     queryset = ProjectService.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('id','name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n+    search_fields = ('id','name', 'description', 'position', 'is_feature', 'created_at', 'updated_at', )\n     ordering_fields = ('id','name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n     # ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n         'position': ['exact'],\n-        'position': ['exact'],\n+        'is_feature': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729834679490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n     queryset = ProjectService.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ('id','name', 'description', 'position', 'is_feature', 'created_at', 'updated_at', )\n-    ordering_fields = ('id','name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n+    ordering_fields = ('id','name', 'description', 'position', 'is_feature', 'created_at', 'updated_at', )\n+    ordering_fields = ('id','name', 'description', 'position', 'is_feature', 'created_at', 'updated_at', )\n     # ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1729834687924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,16 +15,16 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ('id','name', 'description', 'position', 'is_feature', 'created_at', 'updated_at', )\n     ordering_fields = ('id','name', 'description', 'position', 'is_feature', 'created_at', 'updated_at', )\n-    ordering_fields = ('id','name', 'description', 'position', 'is_feature', 'created_at', 'updated_at', )\n     # ('name', 'description', 'image', 'position', 'is_feature', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n         'position': ['exact'],\n         'is_feature': ['exact'],\n+        'is_feature': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729834693886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         'id': ['exact'],\n         'name': ['exact'],\n         'position': ['exact'],\n         'is_feature': ['exact'],\n-        'is_feature': ['exact'],\n+        'created_at': ['exact','gte'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                }
            ],
            "date": 1729834349202,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import ProjectService\nfrom ..serializers.projectservice_serializers import ProjectServiceListSerializers, ProjectServiceRetrieveSerializers, ProjectServiceWriteSerializers\nfrom ..utilities.importbase import *\n\nclass projectserviceViewsets(viewsets.ModelViewSet):\n    serializer_class = ProjectServiceListSerializers\n    # permission_classes = [projectsPermission]\n    # authentication_classes = [JWTAuthentication]\n    pagination_class = MyPageNumberPagination\n    queryset = ProjectService.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return ProjectServiceWriteSerializers\n        elif self.action == 'retrieve':\n            return ProjectServiceRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n    \n    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n    def Draggable(self, request, *args, **kwargs):\n        target = request.GET.get('target')  # ID of the target object \n        goal = request.GET.get('goal')  # ID of the goal object \n\n        from rest_framework.response import Response\n\n        # Fetch the target and goal objects\n        try:\n            target_obj = Project.objects.get(id=target)\n            goal_obj = Project.objects.get(id=goal)\n        except Project.DoesNotExist:\n            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n\n        target_position = target_obj.position\n        goal_position = goal_obj.position\n\n        if target_position < goal_position:\n            # Moving target down (target goes after goal)\n            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n            \n            # Decrement position of all affected objects\n            for obj in affected_objs:\n                obj.position -= 1\n                obj.save()\n            \n            # Set target object's new position\n            target_obj.position = goal_position\n            target_obj.save()\n\n        else:\n          # Moving target up (target goes before goal)\n            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n\n            # Increment position of all affected objects by 1\n            for obj in affected_objs:\n                obj.position += 1\n                obj.save()\n\n            # Set target object's new position (exact position of the goal)\n            target_obj.position = goal_position  # Place the target in the goal's position\n            target_obj.save()\n\n\n        return Response({\"status\": \"success\"})\n\n"
        }
    ]
}