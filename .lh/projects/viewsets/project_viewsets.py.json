{
    "sourceFile": "projects/viewsets/project_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 73,
            "patches": [
                {
                    "date": 1729766830830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729766841051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,4 +78,50 @@\n         ]\n \n         return Response(response_data)\n     \n+     @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n+    def Dragable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Collection.objects.get(id=target)\n+            goal_obj = Collection.objects.get(id=goal)\n+        except Collection.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_index = target_obj.index\n+        goal_index = goal_obj.index\n+\n+        if target_index < goal_index:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            \n+            # Decrement index of all affected objects\n+            for obj in affected_objs:\n+                obj.index -= 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = P.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+\n+            # Increment index of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.index += 1\n+                obj.save()\n+\n+            # Set target object's new index (exact position of the goal)\n+            target_obj.index = goal_index  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729766854583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         goal_index = goal_obj.index\n \n         if target_index < goal_index:\n             # Moving target down (target goes after goal)\n-            affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n             \n             # Decrement index of all affected objects\n             for obj in affected_objs:\n                 obj.index -= 1\n@@ -110,9 +110,9 @@\n             target_obj.save()\n \n         else:\n           # Moving target up (target goes before goal)\n-            affected_objs = P.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n \n             # Increment index of all affected objects by 1\n             for obj in affected_objs:\n                 obj.index += 1\n"
                },
                {
                    "date": 1729766860457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,11 +87,11 @@\n         from rest_framework.response import Response\n \n         # Fetch the target and goal objects\n         try:\n-            target_obj = Collection.objects.get(id=target)\n-            goal_obj = Collection.objects.get(id=goal)\n-        except Collection.DoesNotExist:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         target_index = target_obj.index\n         goal_index = goal_obj.index\n"
                },
                {
                    "date": 1729766866185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n         ]\n \n         return Response(response_data)\n     \n-     @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n+    @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n     def Dragable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n"
                },
                {
                    "date": 1729766872110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n \n         return Response(response_data)\n     \n     @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n-    def Dragable(self, request, *args, **kwargs):\n+    def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n         from rest_framework.response import Response\n"
                },
                {
                    "date": 1729766885391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n         ]\n \n         return Response(response_data)\n     \n-    @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-collection\")\n     def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n"
                },
                {
                    "date": 1729766891315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n         ]\n \n         return Response(response_data)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-collection\")\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n     def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n"
                },
                {
                    "date": 1729766915946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n             goal_obj = Project.objects.get(id=goal)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-        target_index = target_obj.index\n+        target_position = target_obj.index\n         goal_index = goal_obj.index\n \n         if target_index < goal_index:\n             # Moving target down (target goes after goal)\n"
                },
                {
                    "date": 1729766921467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,14 +92,14 @@\n             goal_obj = Project.objects.get(id=goal)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-        target_position = target_obj.index\n-        goal_index = goal_obj.index\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n \n-        if target_index < goal_index:\n+        if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            affected_objs = Project.objects.filter(position__gt=target_index, index__lte=goal_index).order_by('index')\n             \n             # Decrement index of all affected objects\n             for obj in affected_objs:\n                 obj.index -= 1\n"
                },
                {
                    "date": 1729766926755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.index -= 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+\n+            # Increment index of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.index += 1\n+                obj.save()\n+\n+            # Set target object's new index (exact position of the goal)\n+            target_obj.index = goal_index  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729766931920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729767023114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+def Draggable(self, request, *args, **kwargs):\n+    target = request.GET.get('target')  # ID of the target object \n+    goal = request.GET.get('goal')  # ID of the goal object \n+\n+    # Fetch the target and goal objects\n+    try:\n+        target_obj = Project.objects.get(id=target)\n+        goal_obj = Project.objects.get(id=goal)\n+    except Project.DoesNotExist:\n+        return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+    target_position = target_obj.position\n+    goal_position = goal_obj.position\n+\n+    if target_position < goal_position:\n+        # Move target down (target goes after goal)\n+        # Use F() expressions for bulk update\n+        Project.objects.filter(\n+            position__gt=target_position, \n+            position__lte=goal_position\n+        ).update(position=F('position') - 1)\n+\n+        # Set target's new position to goal's position\n+        target_obj.position = goal_position\n+        target_obj.save()\n+\n+    elif target_position > goal_position:\n+        # Move target up (target goes before goal)\n+        Project.objects.filter(\n+            position__lt=target_position, \n+            position__gte=goal_position\n+        ).update(position=F('position') + 1)\n+\n+        # Set target's new position to goal's position\n+        target_obj.position = goal_position\n+        target_obj.save()\n+\n+    return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729767028453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,135 +79,12 @@\n \n         return Response(response_data)\n     \n     @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-def Draggable(self, request, *args, **kwargs):\n-    target = request.GET.get('target')  # ID of the target object \n-    goal = request.GET.get('goal')  # ID of the goal object \n-\n-    # Fetch the target and goal objects\n-    try:\n-        target_obj = Project.objects.get(id=target)\n-        goal_obj = Project.objects.get(id=goal)\n-    except Project.DoesNotExist:\n-        return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-    target_position = target_obj.position\n-    goal_position = goal_obj.position\n-\n-    if target_position < goal_position:\n-        # Move target down (target goes after goal)\n-        # Use F() expressions for bulk update\n-        Project.objects.filter(\n-            position__gt=target_position, \n-            position__lte=goal_position\n-        ).update(position=F('position') - 1)\n-\n-        # Set target's new position to goal's position\n-        target_obj.position = goal_position\n-        target_obj.save()\n-\n-    elif target_position > goal_position:\n-        # Move target up (target goes before goal)\n-        Project.objects.filter(\n-            position__lt=target_position, \n-            position__gte=goal_position\n-        ).update(position=F('position') + 1)\n-\n-        # Set target's new position to goal's position\n-        target_obj.position = goal_position\n-        target_obj.save()\n-\n-    return Response({\"status\": \"success\"})\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n     def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n-        from rest_framework.response import Response\n-\n         # Fetch the target and goal objects\n         try:\n             target_obj = Project.objects.get(id=target)\n             goal_obj = Project.objects.get(id=goal)\n@@ -217,286 +94,28 @@\n         target_position = target_obj.position\n         goal_position = goal_obj.position\n \n         if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n+            # Move target down (target goes after goal)\n+            # Use F() expressions for bulk update\n+            Project.objects.filter(\n+                position__gt=target_position, \n+                position__lte=goal_position\n+            ).update(position=F('position') - 1)\n+\n+            # Set target's new position to goal's position\n             target_obj.position = goal_position\n             target_obj.save()\n \n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+        elif target_position > goal_position:\n+            # Move target up (target goes before goal)\n+            Project.objects.filter(\n+                position__lt=target_position, \n+                position__gte=goal_position\n+            ).update(position=F('position') + 1)\n \n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n+            # Set target's new position to goal's position\n+            target_obj.position = goal_position\n             target_obj.save()\n \n-\n         return Response({\"status\": \"success\"})\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.index -= 1\n-                obj.save()\n-            \n-            # Set target object's new index\n-            target_obj.index = goal_index\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n-\n-            # Increment index of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.index += 1\n-                obj.save()\n-\n-            # Set target object's new index (exact position of the goal)\n-            target_obj.index = goal_index  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_index, index__lte=goal_index).order_by('index')\n-            \n-            # Decrement index of all affected objects\n-            for obj in affected_objs:\n-                obj.index -= 1\n-                obj.save()\n-            \n-            # Set target object's new index\n-            target_obj.index = goal_index\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n-\n-            # Increment index of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.index += 1\n-                obj.save()\n-\n-            # Set target object's new index (exact position of the goal)\n-            target_obj.index = goal_index  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n"
                },
                {
                    "date": 1729767045239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,12 @@\n from ..models import Project,ProjectService\n from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n+from django.db.models import F, Case, When, IntegerField\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from ..models import Project\n from django.db.models import Count\n from rest_framework.response import Response\n \n class projectViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1729767056394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,8 @@\n from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from django.db.models import F, Case, When, IntegerField\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from ..models import Project\n from django.db.models import Count\n from rest_framework.response import Response\n \n class projectViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1729767066059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import F, Case, When, IntegerField\n+from django.db.models import Count\n+from rest_framework.response import Response\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Move target down (target goes after goal)\n+            # Use F() expressions for bulk update\n+            Project.objects.filter(\n+                position__gt=target_position, \n+                position__lte=goal_position\n+            ).update(position=F('position') - 1)\n+\n+            # Set target's new position to goal's position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        elif target_position > goal_position:\n+            # Move target up (target goes before goal)\n+            Project.objects.filter(\n+                position__lt=target_position, \n+                position__gte=goal_position\n+            ).update(position=F('position') + 1)\n+\n+            # Set target's new position to goal's position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729767074473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import F, Case, When, IntegerField\n+from django.db.models import Count\n+from rest_framework.response import Response\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Move target down (target goes after goal)\n+            # Use F() expressions for bulk update\n+            Project.objects.filter(\n+                position__gt=target_position, \n+                position__lte=goal_position\n+            ).update(position=F('position') - 1)\n+\n+            # Set target's new position to goal's position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        elif target_position > goal_position:\n+            # Move target up (target goes before goal)\n+            Project.objects.filter(\n+                position__lt=target_position, \n+                position__gte=goal_position\n+            ).update(position=F('position') + 1)\n+\n+            # Set target's new position to goal's position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729767363756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,125 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import F, Case, When, IntegerField\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from ..models import Project\n+from django.db.models import Count\n+from rest_framework.response import Response\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Move target down (target goes after goal)\n+            # Use F() expressions for bulk update\n+            Project.objects.filter(\n+                position__gt=target_position, \n+                position__lte=goal_position\n+            ).update(position=F('position') - 1)\n+\n+            # Set target's new position to goal's position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        elif target_position > goal_position:\n+            # Move target up (target goes before goal)\n+            Project.objects.filter(\n+                position__lt=target_position, \n+                position__gte=goal_position\n+            ).update(position=F('position') + 1)\n+\n+            # Set target's new position to goal's position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729767371217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,8 @@\n from ..models import Project,ProjectService\n from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n-from django.db.models import F, Case, When, IntegerField\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from ..models import Project\n from django.db.models import Count\n from rest_framework.response import Response\n \n class projectViewsets(viewsets.ModelViewSet):\n@@ -87,130 +83,10 @@\n     def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+        from rest_framework.response import Response\n \n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Move target down (target goes after goal)\n-            # Use F() expressions for bulk update\n-            Project.objects.filter(\n-                position__gt=target_position, \n-                position__lte=goal_position\n-            ).update(position=F('position') - 1)\n-\n-            # Set target's new position to goal's position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        elif target_position > goal_position:\n-            # Move target up (target goes before goal)\n-            Project.objects.filter(\n-                position__lt=target_position, \n-                position__gte=goal_position\n-            ).update(position=F('position') + 1)\n-\n-            # Set target's new position to goal's position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        return Response({\"status\": \"success\"})\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import F, Case, When, IntegerField\n-from django.db.models import Count\n-from rest_framework.response import Response\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n         # Fetch the target and goal objects\n         try:\n             target_obj = Project.objects.get(id=target)\n             goal_obj = Project.objects.get(id=goal)\n@@ -220,272 +96,32 @@\n         target_position = target_obj.position\n         goal_position = goal_obj.position\n \n         if target_position < goal_position:\n-            # Move target down (target goes after goal)\n-            # Use F() expressions for bulk update\n-            Project.objects.filter(\n-                position__gt=target_position, \n-                position__lte=goal_position\n-            ).update(position=F('position') - 1)\n-\n-            # Set target's new position to goal's position\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n             target_obj.position = goal_position\n             target_obj.save()\n \n-        elif target_position > goal_position:\n-            # Move target up (target goes before goal)\n-            Project.objects.filter(\n-                position__lt=target_position, \n-                position__gte=goal_position\n-            ).update(position=F('position') + 1)\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n \n-            # Set target's new position to goal's position\n-            target_obj.position = goal_position\n-            target_obj.save()\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n \n-        return Response({\"status\": \"success\"})\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import F, Case, When, IntegerField\n-from django.db.models import Count\n-from rest_framework.response import Response\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Move target down (target goes after goal)\n-            # Use F() expressions for bulk update\n-            Project.objects.filter(\n-                position__gt=target_position, \n-                position__lte=goal_position\n-            ).update(position=F('position') - 1)\n-\n-            # Set target's new position to goal's position\n-            target_obj.position = goal_position\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n             target_obj.save()\n \n-        elif target_position > goal_position:\n-            # Move target up (target goes before goal)\n-            Project.objects.filter(\n-                position__lt=target_position, \n-                position__gte=goal_position\n-            ).update(position=F('position') + 1)\n \n-            # Set target's new position to goal's position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n         return Response({\"status\": \"success\"})\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import F, Case, When, IntegerField\n-from django.db.models import Count\n-from rest_framework.response import Response\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Move target down (target goes after goal)\n-            # Use F() expressions for bulk update\n-            Project.objects.filter(\n-                position__gt=target_position, \n-                position__lte=goal_position\n-            ).update(position=F('position') - 1)\n-\n-            # Set target's new position to goal's position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        elif target_position > goal_position:\n-            # Move target up (target goes before goal)\n-            Project.objects.filter(\n-                position__lt=target_position, \n-                position__gte=goal_position\n-            ).update(position=F('position') + 1)\n-\n-            # Set target's new position to goal's position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        return Response({\"status\": \"success\"})\n-\n"
                },
                {
                    "date": 1729767537884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,49 +79,44 @@\n \n         return Response(response_data)\n     \n     @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n+def Draggable(self, request, *args, **kwargs):\n+    target_id = request.GET.get('target')  # ID of the target object \n+    goal_id = request.GET.get('goal')  # ID of the goal object \n \n-        from rest_framework.response import Response\n+    # Validate the input\n+    if not target_id or not goal_id:\n+        return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n \n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+    try:\n+        target_obj = Project.objects.get(id=target_id)\n+        goal_obj = Project.objects.get(id=goal_id)\n+    except Project.DoesNotExist:\n+        return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n \n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n+    target_position = target_obj.position\n+    goal_position = goal_obj.position\n \n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n+    if target_position == goal_position:\n+        # If target and goal positions are the same, no reordering is needed\n+        return Response({\"status\": \"Target is already at the goal position.\"})\n \n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+    if target_position < goal_position:\n+        # Moving target down (target goes after goal)\n+        Project.objects.filter(\n+            position__gt=target_position, \n+            position__lte=goal_position\n+        ).update(position=F('position') - 1)\n \n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n+    elif target_position > goal_position:\n+        # Moving target up (target goes before goal)\n+        Project.objects.filter(\n+            position__lt=target_position, \n+            position__gte=goal_position\n+        ).update(position=F('position') + 1)\n \n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n+    # Set the target's new position\n+    target_obj.position = goal_position\n+    target_obj.save()\n \n-\n-        return Response({\"status\": \"success\"})\n-\n+    return Response({\"status\": \"success\"})\n"
                },
                {
                    "date": 1729767621990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,14 @@\n         ]\n \n         return Response(response_data)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    from django.db.models import F\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from ..models import Project\n+\n+@action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n def Draggable(self, request, *args, **kwargs):\n     target_id = request.GET.get('target')  # ID of the target object \n     goal_id = request.GET.get('goal')  # ID of the goal object \n \n@@ -119,4 +124,5 @@\n     target_obj.position = goal_position\n     target_obj.save()\n \n     return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729767628246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,46 +83,46 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from ..models import Project\n \n-@action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-def Draggable(self, request, *args, **kwargs):\n-    target_id = request.GET.get('target')  # ID of the target object \n-    goal_id = request.GET.get('goal')  # ID of the goal object \n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target_id = request.GET.get('target')  # ID of the target object \n+        goal_id = request.GET.get('goal')  # ID of the goal object \n \n-    # Validate the input\n-    if not target_id or not goal_id:\n-        return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n+        # Validate the input\n+        if not target_id or not goal_id:\n+            return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n \n-    try:\n-        target_obj = Project.objects.get(id=target_id)\n-        goal_obj = Project.objects.get(id=goal_id)\n-    except Project.DoesNotExist:\n-        return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n+        try:\n+            target_obj = Project.objects.get(id=target_id)\n+            goal_obj = Project.objects.get(id=goal_id)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n \n-    target_position = target_obj.position\n-    goal_position = goal_obj.position\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n \n-    if target_position == goal_position:\n-        # If target and goal positions are the same, no reordering is needed\n-        return Response({\"status\": \"Target is already at the goal position.\"})\n+        if target_position == goal_position:\n+            # If target and goal positions are the same, no reordering is needed\n+            return Response({\"status\": \"Target is already at the goal position.\"})\n \n-    if target_position < goal_position:\n-        # Moving target down (target goes after goal)\n-        Project.objects.filter(\n-            position__gt=target_position, \n-            position__lte=goal_position\n-        ).update(position=F('position') - 1)\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            Project.objects.filter(\n+                position__gt=target_position, \n+                position__lte=goal_position\n+            ).update(position=F('position') - 1)\n \n-    elif target_position > goal_position:\n-        # Moving target up (target goes before goal)\n-        Project.objects.filter(\n-            position__lt=target_position, \n-            position__gte=goal_position\n-        ).update(position=F('position') + 1)\n+        elif target_position > goal_position:\n+            # Moving target up (target goes before goal)\n+            Project.objects.filter(\n+                position__lt=target_position, \n+                position__gte=goal_position\n+            ).update(position=F('position') + 1)\n \n-    # Set the target's new position\n-    target_obj.position = goal_position\n-    target_obj.save()\n+        # Set the target's new position\n+        target_obj.position = goal_position\n+        target_obj.save()\n \n-    return Response({\"status\": \"success\"})\n+        return Response({\"status\": \"success\"})\n \n"
                },
                {
                    "date": 1729767634058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target_id = request.GET.get('target')  # ID of the target object \n+        goal_id = request.GET.get('goal')  # ID of the goal object \n+\n+        # Validate the input\n+        if not target_id or not goal_id:\n+            return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n+\n+        try:\n+            target_obj = Project.objects.get(id=target_id)\n+            goal_obj = Project.objects.get(id=goal_id)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position == goal_position:\n+            # If target and goal positions are the same, no reordering is needed\n+            return Response({\"status\": \"Target is already at the goal position.\"})\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            Project.objects.filter(\n+                position__gt=target_position, \n+                position__lte=goal_position\n+            ).update(position=F('position') - 1)\n+\n+        elif target_position > goal_position:\n+            # Moving target up (target goes before goal)\n+            Project.objects.filter(\n+                position__lt=target_position, \n+                position__gte=goal_position\n+            ).update(position=F('position') + 1)\n+\n+        # Set the target's new position\n+        target_obj.position = goal_position\n+        target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729767650459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from django.db.models import Count\n from rest_framework.response import Response\n+from django.db.models import F\n \n class projectViewsets(viewsets.ModelViewSet):\n     serializer_class = ProjectListSerializers\n     # permission_classes = [projectsPermission]\n@@ -121,132 +122,4 @@\n         target_obj.save()\n \n         return Response({\"status\": \"success\"})\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    from django.db.models import F\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from ..models import Project\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target_id = request.GET.get('target')  # ID of the target object \n-        goal_id = request.GET.get('goal')  # ID of the goal object \n-\n-        # Validate the input\n-        if not target_id or not goal_id:\n-            return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n-\n-        try:\n-            target_obj = Project.objects.get(id=target_id)\n-            goal_obj = Project.objects.get(id=goal_id)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position == goal_position:\n-            # If target and goal positions are the same, no reordering is needed\n-            return Response({\"status\": \"Target is already at the goal position.\"})\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            Project.objects.filter(\n-                position__gt=target_position, \n-                position__lte=goal_position\n-            ).update(position=F('position') - 1)\n-\n-        elif target_position > goal_position:\n-            # Moving target up (target goes before goal)\n-            Project.objects.filter(\n-                position__lt=target_position, \n-                position__gte=goal_position\n-            ).update(position=F('position') + 1)\n-\n-        # Set the target's new position\n-        target_obj.position = goal_position\n-        target_obj.save()\n-\n-        return Response({\"status\": \"success\"})\n-\n"
                },
                {
                    "date": 1729767771818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,46 +80,46 @@\n \n         return Response(response_data)\n \n \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target_id = request.GET.get('target')  # ID of the target object \n-        goal_id = request.GET.get('goal')  # ID of the goal object \n+        @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+        def Draggable(self, request, *args, **kwargs):\n+            target_id = request.GET.get('target')  # ID of the target object \n+            goal_id = request.GET.get('goal')  # ID of the goal object \n \n-        # Validate the input\n-        if not target_id or not goal_id:\n-            return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n+            # Validate the input\n+            if not target_id or not goal_id:\n+                return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n \n-        try:\n-            target_obj = Project.objects.get(id=target_id)\n-            goal_obj = Project.objects.get(id=goal_id)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n+            try:\n+                target_obj = Project.objects.get(id=target_id)\n+                goal_obj = Project.objects.get(id=goal_id)\n+            except Project.DoesNotExist:\n+                return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n \n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n+            target_position = target_obj.position\n+            goal_position = goal_obj.position\n \n-        if target_position == goal_position:\n-            # If target and goal positions are the same, no reordering is needed\n-            return Response({\"status\": \"Target is already at the goal position.\"})\n+            if target_position == goal_position:\n+                # If target and goal positions are the same, no reordering is needed\n+                return Response({\"status\": \"Target is already at the goal position.\"})\n \n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            Project.objects.filter(\n-                position__gt=target_position, \n-                position__lte=goal_position\n-            ).update(position=F('position') - 1)\n+            if target_position < goal_position:\n+                # Moving target down (target goes after goal)\n+                Project.objects.filter(\n+                    position__gt=target_position, \n+                    position__lte=goal_position\n+                ).update(position=F('position') - 1)\n \n-        elif target_position > goal_position:\n-            # Moving target up (target goes before goal)\n-            Project.objects.filter(\n-                position__lt=target_position, \n-                position__gte=goal_position\n-            ).update(position=F('position') + 1)\n+            elif target_position > goal_position:\n+                # Moving target up (target goes before goal)\n+                Project.objects.filter(\n+                    position__lt=target_position, \n+                    position__gte=goal_position\n+                ).update(position=F('position') + 1)\n \n-        # Set the target's new position\n-        target_obj.position = goal_position\n-        target_obj.save()\n+            # Set the target's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n \n-        return Response({\"status\": \"success\"})\n+            return Response({\"status\": \"success\"})\n \n"
                },
                {
                    "date": 1729767823546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,46 +80,5 @@\n \n         return Response(response_data)\n \n \n-        @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-        def Draggable(self, request, *args, **kwargs):\n-            target_id = request.GET.get('target')  # ID of the target object \n-            goal_id = request.GET.get('goal')  # ID of the goal object \n-\n-            # Validate the input\n-            if not target_id or not goal_id:\n-                return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n-\n-            try:\n-                target_obj = Project.objects.get(id=target_id)\n-                goal_obj = Project.objects.get(id=goal_id)\n-            except Project.DoesNotExist:\n-                return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n-\n-            target_position = target_obj.position\n-            goal_position = goal_obj.position\n-\n-            if target_position == goal_position:\n-                # If target and goal positions are the same, no reordering is needed\n-                return Response({\"status\": \"Target is already at the goal position.\"})\n-\n-            if target_position < goal_position:\n-                # Moving target down (target goes after goal)\n-                Project.objects.filter(\n-                    position__gt=target_position, \n-                    position__lte=goal_position\n-                ).update(position=F('position') - 1)\n-\n-            elif target_position > goal_position:\n-                # Moving target up (target goes before goal)\n-                Project.objects.filter(\n-                    position__lt=target_position, \n-                    position__gte=goal_position\n-                ).update(position=F('position') + 1)\n-\n-            # Set the target's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-            return Response({\"status\": \"success\"})\n-\n+    \n"
                },
                {
                    "date": 1729767925400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,5 +80,50 @@\n \n         return Response(response_data)\n \n \n-    \n+     @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n+    def Dragable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Collection.objects.get(id=target)\n+            goal_obj = Collection.objects.get(id=goal)\n+        except Collection.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_index = target_obj.index\n+        goal_index = goal_obj.index\n+\n+        if target_index < goal_index:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            \n+            # Decrement index of all affected objects\n+            for obj in affected_objs:\n+                obj.index -= 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Collection.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+\n+            # Increment index of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.index += 1\n+                obj.save()\n+\n+            # Set target object's new index (exact position of the goal)\n+            target_obj.index = goal_index  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729767930903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,49 +81,49 @@\n         return Response(response_data)\n \n \n      @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n-    def Dragable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n+        def Dragable(self, request, *args, **kwargs):\n+            target = request.GET.get('target')  # ID of the target object \n+            goal = request.GET.get('goal')  # ID of the goal object \n \n-        from rest_framework.response import Response\n+            from rest_framework.response import Response\n \n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Collection.objects.get(id=target)\n-            goal_obj = Collection.objects.get(id=goal)\n-        except Collection.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+            # Fetch the target and goal objects\n+            try:\n+                target_obj = Collection.objects.get(id=target)\n+                goal_obj = Collection.objects.get(id=goal)\n+            except Collection.DoesNotExist:\n+                return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-        target_index = target_obj.index\n-        goal_index = goal_obj.index\n+            target_index = target_obj.index\n+            goal_index = goal_obj.index\n \n-        if target_index < goal_index:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n-            \n-            # Decrement index of all affected objects\n-            for obj in affected_objs:\n-                obj.index -= 1\n-                obj.save()\n-            \n-            # Set target object's new index\n-            target_obj.index = goal_index\n-            target_obj.save()\n+            if target_index < goal_index:\n+                # Moving target down (target goes after goal)\n+                affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+                \n+                # Decrement index of all affected objects\n+                for obj in affected_objs:\n+                    obj.index -= 1\n+                    obj.save()\n+                \n+                # Set target object's new index\n+                target_obj.index = goal_index\n+                target_obj.save()\n \n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Collection.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+            else:\n+            # Moving target up (target goes before goal)\n+                affected_objs = Collection.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n \n-            # Increment index of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.index += 1\n-                obj.save()\n+                # Increment index of all affected objects by 1\n+                for obj in affected_objs:\n+                    obj.index += 1\n+                    obj.save()\n \n-            # Set target object's new index (exact position of the goal)\n-            target_obj.index = goal_index  # Place the target in the goal's position\n-            target_obj.save()\n+                # Set target object's new index (exact position of the goal)\n+                target_obj.index = goal_index  # Place the target in the goal's position\n+                target_obj.save()\n \n \n-        return Response({\"status\": \"success\"})\n+            return Response({\"status\": \"success\"})\n \n"
                },
                {
                    "date": 1729767939585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,50 +80,50 @@\n \n         return Response(response_data)\n \n \n-     @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n-        def Dragable(self, request, *args, **kwargs):\n-            target = request.GET.get('target')  # ID of the target object \n-            goal = request.GET.get('goal')  # ID of the goal object \n+    @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n+    def Dragable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n \n-            from rest_framework.response import Response\n+        from rest_framework.response import Response\n \n-            # Fetch the target and goal objects\n-            try:\n-                target_obj = Collection.objects.get(id=target)\n-                goal_obj = Collection.objects.get(id=goal)\n-            except Collection.DoesNotExist:\n-                return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Collection.objects.get(id=goal)\n+        except Collection.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-            target_index = target_obj.index\n-            goal_index = goal_obj.index\n+        target_index = target_obj.index\n+        goal_index = goal_obj.index\n \n-            if target_index < goal_index:\n-                # Moving target down (target goes after goal)\n-                affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n-                \n-                # Decrement index of all affected objects\n-                for obj in affected_objs:\n-                    obj.index -= 1\n-                    obj.save()\n-                \n-                # Set target object's new index\n-                target_obj.index = goal_index\n-                target_obj.save()\n+        if target_index < goal_index:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            \n+            # Decrement index of all affected objects\n+            for obj in affected_objs:\n+                obj.index -= 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index\n+            target_obj.save()\n \n-            else:\n-            # Moving target up (target goes before goal)\n-                affected_objs = Collection.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Collection.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n \n-                # Increment index of all affected objects by 1\n-                for obj in affected_objs:\n-                    obj.index += 1\n-                    obj.save()\n+            # Increment index of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.index += 1\n+                obj.save()\n \n-                # Set target object's new index (exact position of the goal)\n-                target_obj.index = goal_index  # Place the target in the goal's position\n-                target_obj.save()\n+            # Set target object's new index (exact position of the goal)\n+            target_obj.index = goal_index  # Place the target in the goal's position\n+            target_obj.save()\n \n \n-            return Response({\"status\": \"success\"})\n+        return Response({\"status\": \"success\"})\n \n"
                },
                {
                    "date": 1729767945593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,18 +90,18 @@\n \n         # Fetch the target and goal objects\n         try:\n             target_obj = Project.objects.get(id=target)\n-            goal_obj = Collection.objects.get(id=goal)\n-        except Collection.DoesNotExist:\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         target_index = target_obj.index\n         goal_index = goal_obj.index\n \n         if target_index < goal_index:\n             # Moving target down (target goes after goal)\n-            affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n             \n             # Decrement index of all affected objects\n             for obj in affected_objs:\n                 obj.index -= 1\n"
                },
                {
                    "date": 1729767955245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n \n         return Response(response_data)\n \n \n-    @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n+    @action(detail=False, methods=['get'], name=\"dragableProject\", url_path=\"drag-collection\")\n     def Dragable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n@@ -112,9 +112,9 @@\n             target_obj.save()\n \n         else:\n           # Moving target up (target goes before goal)\n-            affected_objs = Collection.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n \n             # Increment index of all affected objects by 1\n             for obj in affected_objs:\n                 obj.index += 1\n"
                },
                {
                    "date": 1729767961277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"dragableProject\", url_path=\"drag-project\")\n+    def Dragable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_index = target_obj.index\n+        goal_index = goal_obj.index\n+\n+        if target_index < goal_index:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            \n+            # Decrement index of all affected objects\n+            for obj in affected_objs:\n+                obj.index -= 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+\n+            # Increment index of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.index += 1\n+                obj.save()\n+\n+            # Set target object's new index (exact position of the goal)\n+            target_obj.index = goal_index  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729767969590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n         return Response(response_data)\n \n \n     @action(detail=False, methods=['get'], name=\"dragableProject\", url_path=\"drag-project\")\n-    def Dragable(self, request, *args, **kwargs):\n+    def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n         from rest_framework.response import Response\n@@ -126,133 +126,4 @@\n \n \n         return Response({\"status\": \"success\"})\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"dragableProject\", url_path=\"drag-collection\")\n-    def Dragable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_index = target_obj.index\n-        goal_index = goal_obj.index\n-\n-        if target_index < goal_index:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n-            \n-            # Decrement index of all affected objects\n-            for obj in affected_objs:\n-                obj.index -= 1\n-                obj.save()\n-            \n-            # Set target object's new index\n-            target_obj.index = goal_index\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n-\n-            # Increment index of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.index += 1\n-                obj.save()\n-\n-            # Set target object's new index (exact position of the goal)\n-            target_obj.index = goal_index  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n"
                },
                {
                    "date": 1729767979752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_index = target_obj.index\n+        goal_index = goal_obj.index\n+\n+        if target_index < goal_index:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            \n+            # Decrement index of all affected objects\n+            for obj in affected_objs:\n+                obj.index -= 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+\n+            # Increment index of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.index += 1\n+                obj.save()\n+\n+            # Set target object's new index (exact position of the goal)\n+            target_obj.index = goal_index  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729768014844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,165 +94,36 @@\n             goal_obj = Project.objects.get(id=goal)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-        target_index = target_obj.index\n-        goal_index = goal_obj.index\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n \n-        if target_index < goal_index:\n+        if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n             \n-            # Decrement index of all affected objects\n+            # Decrement position of all affected objects\n             for obj in affected_objs:\n-                obj.index -= 1\n+                obj.position -= 1\n                 obj.save()\n             \n-            # Set target object's new index\n-            target_obj.index = goal_index\n+            # Set target object's new position\n+            target_obj.position = goal_position\n             target_obj.save()\n \n         else:\n           # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n \n-            # Increment index of all affected objects by 1\n+            # Increment position of all affected objects by 1\n             for obj in affected_objs:\n-                obj.index += 1\n+                obj.position += 1\n                 obj.save()\n \n-            # Set target object's new index (exact position of the goal)\n-            target_obj.index = goal_index  # Place the target in the goal's position\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n             target_obj.save()\n \n \n         return Response({\"status\": \"success\"})\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"dragableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_index = target_obj.index\n-        goal_index = goal_obj.index\n-\n-        if target_index < goal_index:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n-            \n-            # Decrement index of all affected objects\n-            for obj in affected_objs:\n-                obj.index -= 1\n-                obj.save()\n-            \n-            # Set target object's new index\n-            target_obj.index = goal_index\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n-\n-            # Increment index of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.index += 1\n-                obj.save()\n-\n-            # Set target object's new index (exact position of the goal)\n-            target_obj.index = goal_index  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n"
                },
                {
                    "date": 1729768073286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,50 +80,43 @@\n \n         return Response(response_data)\n \n \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n+    @action(detail=False, methods=['post'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def draggableProject(self, request, *args, **kwargs):\n+        target_id = request.data.get('target')\n+        goal_id = request.data.get('goal')\n \n-        from rest_framework.response import Response\n+        if not target_id or not goal_id:\n+            return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n \n-        # Fetch the target and goal objects\n         try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n+            target_obj = Project.objects.get(id=target_id)\n+            goal_obj = Project.objects.get(id=goal_id)\n         except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+            return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n \n         target_position = target_obj.position\n         goal_position = goal_obj.position\n \n+        if target_position is None or goal_position is None:\n+            return Response({\"error\": \"Position field cannot be None.\"}, status=400)\n+\n+        if target_position == goal_position:\n+            return Response({\"status\": \"Target is already at the goal position.\"})\n+\n         if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n+            Project.objects.filter(\n+                position__gt=target_position, \n+                position__lte=goal_position\n+            ).update(position=F('position') - 1)\n         else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+            Project.objects.filter(\n+                position__lt=target_position, \n+                position__gte=goal_position\n+            ).update(position=F('position') + 1)\n \n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n+        target_obj.position = goal_position\n+        target_obj.save()\n \n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n         return Response({\"status\": \"success\"})\n \n"
                },
                {
                    "date": 1729768249415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def draggableProject(self, request, *args, **kwargs):\n+        target_id = request.data.get('target')\n+        goal_id = request.data.get('goal')\n+\n+        if not target_id or not goal_id:\n+            return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n+\n+        try:\n+            target_obj = Project.objects.get(id=target_id)\n+            goal_obj = Project.objects.get(id=goal_id)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position is None or goal_position is None:\n+            return Response({\"error\": \"Position field cannot be None.\"}, status=400)\n+\n+        if target_position == goal_position:\n+            return Response({\"status\": \"Target is already at the goal position.\"})\n+\n+        if target_position < goal_position:\n+            Project.objects.filter(\n+                position__gt=target_position, \n+                position__lte=goal_position\n+            ).update(position=F('position') - 1)\n+        else:\n+            Project.objects.filter(\n+                position__lt=target_position, \n+                position__gte=goal_position\n+            ).update(position=F('position') + 1)\n+\n+        target_obj.position = goal_position\n+        target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729768351065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,164 +81,48 @@\n         return Response(response_data)\n \n \n     @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def draggableProject(self, request, *args, **kwargs):\n-        target_id = request.data.get('target')\n-        goal_id = request.data.get('goal')\n+def draggableProject(self, request, *args, **kwargs):\n+    # Retrieve 'target' and 'goal' from query parameters\n+    target_id = request.GET.get('target')\n+    goal_id = request.GET.get('goal')\n \n-        if not target_id or not goal_id:\n-            return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n+    # Validate that both parameters are provided\n+    if not target_id or not goal_id:\n+        return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n \n-        try:\n-            target_obj = Project.objects.get(id=target_id)\n-            goal_obj = Project.objects.get(id=goal_id)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n+    try:\n+        # Fetch the target and goal objects\n+        target_obj = Project.objects.get(id=target_id)\n+        goal_obj = Project.objects.get(id=goal_id)\n+    except Project.DoesNotExist:\n+        return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n \n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n+    target_position = target_obj.position\n+    goal_position = goal_obj.position\n \n-        if target_position is None or goal_position is None:\n-            return Response({\"error\": \"Position field cannot be None.\"}, status=400)\n+    if target_position is None or goal_position is None:\n+        return Response({\"error\": \"Position field cannot be None.\"}, status=400)\n \n-        if target_position == goal_position:\n-            return Response({\"status\": \"Target is already at the goal position.\"})\n+    if target_position == goal_position:\n+        return Response({\"status\": \"Target is already at the goal position.\"})\n \n-        if target_position < goal_position:\n-            Project.objects.filter(\n-                position__gt=target_position, \n-                position__lte=goal_position\n-            ).update(position=F('position') - 1)\n-        else:\n-            Project.objects.filter(\n-                position__lt=target_position, \n-                position__gte=goal_position\n-            ).update(position=F('position') + 1)\n+    if target_position < goal_position:\n+        # Move target down (target goes after goal)\n+        Project.objects.filter(\n+            position__gt=target_position, \n+            position__lte=goal_position\n+        ).update(position=F('position') - 1)\n+    else:\n+        # Move target up (target goes before goal)\n+        Project.objects.filter(\n+            position__lt=target_position, \n+            position__gte=goal_position\n+        ).update(position=F('position') + 1)\n \n-        target_obj.position = goal_position\n-        target_obj.save()\n+    # Set the target's new position\n+    target_obj.position = goal_position\n+    target_obj.save()\n \n-        return Response({\"status\": \"success\"})\n+    return Response({\"status\": \"success\"})\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['post'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def draggableProject(self, request, *args, **kwargs):\n-        target_id = request.data.get('target')\n-        goal_id = request.data.get('goal')\n-\n-        if not target_id or not goal_id:\n-            return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n-\n-        try:\n-            target_obj = Project.objects.get(id=target_id)\n-            goal_obj = Project.objects.get(id=goal_id)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position is None or goal_position is None:\n-            return Response({\"error\": \"Position field cannot be None.\"}, status=400)\n-\n-        if target_position == goal_position:\n-            return Response({\"status\": \"Target is already at the goal position.\"})\n-\n-        if target_position < goal_position:\n-            Project.objects.filter(\n-                position__gt=target_position, \n-                position__lte=goal_position\n-            ).update(position=F('position') - 1)\n-        else:\n-            Project.objects.filter(\n-                position__lt=target_position, \n-                position__gte=goal_position\n-            ).update(position=F('position') + 1)\n-\n-        target_obj.position = goal_position\n-        target_obj.save()\n-\n-        return Response({\"status\": \"success\"})\n-\n"
                },
                {
                    "date": 1729768441632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,49 +80,51 @@\n \n         return Response(response_data)\n \n \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-def draggableProject(self, request, *args, **kwargs):\n-    # Retrieve 'target' and 'goal' from query parameters\n-    target_id = request.GET.get('target')\n-    goal_id = request.GET.get('goal')\n+    @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n+    def Dragable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n \n-    # Validate that both parameters are provided\n-    if not target_id or not goal_id:\n-        return Response({\"error\": \"Both target and goal parameters are required.\"}, status=400)\n+        from rest_framework.response import Response\n \n-    try:\n         # Fetch the target and goal objects\n-        target_obj = Project.objects.get(id=target_id)\n-        goal_obj = Project.objects.get(id=goal_id)\n-    except Project.DoesNotExist:\n-        return Response({\"error\": \"Target or Goal object not found.\"}, status=404)\n+        try:\n+            target_obj = Collection.objects.get(id=target)\n+            goal_obj = Collection.objects.get(id=goal)\n+        except Collection.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-    target_position = target_obj.position\n-    goal_position = goal_obj.position\n+        target_index = target_obj.index\n+        goal_index = goal_obj.index\n \n-    if target_position is None or goal_position is None:\n-        return Response({\"error\": \"Position field cannot be None.\"}, status=400)\n+        if target_index < goal_index:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            \n+            # Decrement index of all affected objects\n+            for obj in affected_objs:\n+                obj.index -= 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index\n+            target_obj.save()\n \n-    if target_position == goal_position:\n-        return Response({\"status\": \"Target is already at the goal position.\"})\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Collection.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n \n-    if target_position < goal_position:\n-        # Move target down (target goes after goal)\n-        Project.objects.filter(\n-            position__gt=target_position, \n-            position__lte=goal_position\n-        ).update(position=F('position') - 1)\n-    else:\n-        # Move target up (target goes before goal)\n-        Project.objects.filter(\n-            position__lt=target_position, \n-            position__gte=goal_position\n-        ).update(position=F('position') + 1)\n+            # Increment index of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.index += 1\n+                obj.save()\n \n-    # Set the target's new position\n-    target_obj.position = goal_position\n-    target_obj.save()\n+            # Set target object's new index (exact position of the goal)\n+            target_obj.index = goal_index  # Place the target in the goal's position\n+            target_obj.save()\n \n-    return Response({\"status\": \"success\"})\n \n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729768448680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n         return Response(response_data)\n \n \n     @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n-    def Dragable(self, request, *args, **kwargs):\n+    def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n         from rest_framework.response import Response\n"
                },
                {
                    "date": 1729768454709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,18 +80,18 @@\n \n         return Response(response_data)\n \n \n-    @action(detail=False, methods=['get'], name=\"dragableCollection\", url_path=\"drag-collection\")\n+    @action(detail=False, methods=['get'], name=\"draggableCollection\", url_path=\"drag-collection\")\n     def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n         from rest_framework.response import Response\n \n         # Fetch the target and goal objects\n         try:\n-            target_obj = Collection.objects.get(id=target)\n+            target_obj = Project.objects.get(id=target)\n             goal_obj = Collection.objects.get(id=goal)\n         except Collection.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n"
                },
                {
                    "date": 1729768460866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,18 +90,18 @@\n \n         # Fetch the target and goal objects\n         try:\n             target_obj = Project.objects.get(id=target)\n-            goal_obj = Collection.objects.get(id=goal)\n-        except Collection.DoesNotExist:\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         target_index = target_obj.index\n         goal_index = goal_obj.index\n \n         if target_index < goal_index:\n             # Moving target down (target goes after goal)\n-            affected_objs = Collection.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n             \n             # Decrement index of all affected objects\n             for obj in affected_objs:\n                 obj.index -= 1\n"
                },
                {
                    "date": 1729768476278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n \n         return Response(response_data)\n \n \n-    @action(detail=False, methods=['get'], name=\"draggableCollection\", url_path=\"drag-collection\")\n+    @action(detail=False, methods=['get'], name=\"draggableCollection\", url_path=\"drag-\")\n     def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n@@ -112,9 +112,9 @@\n             target_obj.save()\n \n         else:\n           # Moving target up (target goes before goal)\n-            affected_objs = Collection.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n \n             # Increment index of all affected objects by 1\n             for obj in affected_objs:\n                 obj.index += 1\n"
                },
                {
                    "date": 1729768483775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_index = target_obj.index\n+        goal_index = goal_obj.index\n+\n+        if target_index < goal_index:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            \n+            # Decrement index of all affected objects\n+            for obj in affected_objs:\n+                obj.index -= 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+\n+            # Increment index of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.index += 1\n+                obj.save()\n+\n+            # Set target object's new index (exact position of the goal)\n+            target_obj.index = goal_index  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729768507733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,35 +94,35 @@\n             goal_obj = Project.objects.get(id=goal)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-        target_index = target_obj.index\n-        goal_index = goal_obj.index\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n \n-        if target_index < goal_index:\n+        if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n             \n-            # Decrement index of all affected objects\n+            # Decrement position of all affected objects\n             for obj in affected_objs:\n-                obj.index -= 1\n+                obj.position -= 1\n                 obj.save()\n             \n-            # Set target object's new index\n-            target_obj.index = goal_index\n+            # Set target object's new position\n+            target_obj.position = goal_position\n             target_obj.save()\n \n         else:\n           # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n \n-            # Increment index of all affected objects by 1\n+            # Increment position of all affected objects by 1\n             for obj in affected_objs:\n-                obj.index += 1\n+                obj.position += 1\n                 obj.save()\n \n-            # Set target object's new index (exact position of the goal)\n-            target_obj.index = goal_index  # Place the target in the goal's position\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n             target_obj.save()\n \n \n         return Response({\"status\": \"success\"})\n"
                },
                {
                    "date": 1729768662327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     serializer_class = ProjectListSerializers\n     # permission_classes = [projectsPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n+    queryset = Project.objects.all().order_by(\"index\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['name','description']\n     ordering_fields = ['id']\n@@ -127,134 +127,4 @@\n \n         return Response({\"status\": \"success\"})\n \n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableCollection\", url_path=\"drag-\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_index = target_obj.index\n-        goal_index = goal_obj.index\n-\n-        if target_index < goal_index:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n-            \n-            # Decrement index of all affected objects\n-            for obj in affected_objs:\n-                obj.index -= 1\n-                obj.save()\n-            \n-            # Set target object's new index\n-            target_obj.index = goal_index\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n-\n-            # Increment index of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.index += 1\n-                obj.save()\n-\n-            # Set target object's new index (exact position of the goal)\n-            target_obj.index = goal_index  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n"
                },
                {
                    "date": 1729771115326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all().order_by(\"position\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+    Vercel Edge Functions, Netlify Edge Functions\n+\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729771121393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all().order_by(\"position\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name','description']\n+    ordering_fields = ['id']\n+    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729771131371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all().order_by(\"position\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+    ordering_fields = ['id']\n+    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729771136796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all().order_by(\"position\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ('name', 'position', 'description', 'group__name', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+    ordering_fields = ['id']\n+    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729771156053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Project.objects.all().order_by(\"position\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'position', 'description', 'group__name', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n     ordering_fields = ['id']\n     # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n@@ -128,528 +128,4 @@\n \n         return Response({\"status\": \"success\"})\n \n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all().order_by(\"position\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n-    ordering_fields = ['id']\n-    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all().order_by(\"position\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all().order_by(\"position\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-    Vercel Edge Functions, Netlify Edge Functions\n-\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all().order_by(\"index\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name','description']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n"
                },
                {
                    "date": 1729771173201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all().order_by(\"position\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study', 'media', 'created_at', 'updated_at', )\n+    ordering_fields = ['id']\n+    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729771188325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Project.objects.all().order_by(\"position\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study', 'media', 'created_at', 'updated_at', )\n+    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'media', 'created_at', 'updated_at', )\n     ordering_fields = ['id']\n     # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n@@ -128,135 +128,4 @@\n \n         return Response({\"status\": \"success\"})\n \n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all().order_by(\"position\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n-    ordering_fields = ['id']\n-    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n"
                },
                {
                    "date": 1729771194049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Project.objects.all().order_by(\"position\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'media', 'created_at', 'updated_at', )\n+    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n     ordering_fields = ['id']\n     # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1729771207744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all().order_by(\"position\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    ordering_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729771237055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'group': ['exact'],\n         'project_service': ['exact'],\n+        \n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n@@ -128,135 +129,4 @@\n \n         return Response({\"status\": \"success\"})\n \n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all().order_by(\"position\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    ordering_fields = ['id']\n-    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n"
                },
                {
                    "date": 1729771244058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'group': ['exact'],\n         'project_service': ['exact'],\n-        \n+        'created_at':[]\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729771250978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all().order_by(\"position\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    ordering_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+        'created_at':['exact','']\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729771256617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'group': ['exact'],\n         'project_service': ['exact'],\n-        'created_at':['exact','']\n+        'created_at':['exact','gte','lte']\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n@@ -129,136 +129,4 @@\n \n         return Response({\"status\": \"success\"})\n \n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all().order_by(\"position\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    ordering_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-        'created_at':[]\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n"
                },
                {
                    "date": 1729771581086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all().order_by(\"position\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    ordering_fields = ('id'name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+        'created_at':['exact','gte','lte']\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729771593724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,10 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Project.objects.all().order_by(\"position\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    ordering_fields = ('id'name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    search_fields = ('id''name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    ordering_fields = ('id','name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n     # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n@@ -129,136 +129,4 @@\n \n         return Response({\"status\": \"success\"})\n \n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all().order_by(\"position\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    ordering_fields = ('name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-        'created_at':['exact','gte','lte']\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n"
                },
                {
                    "date": 1729771636083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n+class projectViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Project.objects.all().order_by(\"position\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ('id','name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    ordering_fields = ('id','name',  'created_at', 'updated_at', )\n+    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'group': ['exact'],\n+        'project_service': ['exact'],\n+        'created_at':['exact','gte','lte']\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n+    def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        service_counts = (\n+            Project.objects\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['project_service__id'],\n+                'service_name': service['project_service__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in service_counts\n+        ]\n+\n+        return Response(response_data)\n+    \n+    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n+    def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n+        groups_counts = (\n+            Project.objects\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+        )\n+\n+        # Format the response data\n+        response_data = [\n+            {\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n+            }\n+            for service in groups_counts\n+        ]\n+\n+        return Response(response_data)\n+\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n+\n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729771644820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     queryset = Project.objects.all().order_by(\"position\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ('id','name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    ordering_fields = ('id','name',  'created_at', 'updated_at', )\n+    ordering_fields = ('id','name','created_at', )\n     # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n@@ -129,136 +129,4 @@\n \n         return Response({\"status\": \"success\"})\n \n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n-class projectViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Project.objects.all().order_by(\"position\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('id''name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    ordering_fields = ('id','name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'group': ['exact'],\n-        'project_service': ['exact'],\n-        'created_at':['exact','gte','lte']\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n-    def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        service_counts = (\n-            Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in service_counts\n-        ]\n-\n-        return Response(response_data)\n-    \n-    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n-    def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n-        groups_counts = (\n-            Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n-        )\n-\n-        # Format the response data\n-        response_data = [\n-            {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n-            }\n-            for service in groups_counts\n-        ]\n-\n-        return Response(response_data)\n-\n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n-\n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n-\n"
                },
                {
                    "date": 1729849511146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +1,74 @@\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Project,ProjectService\n-from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from django.db.models import Count\n-from rest_framework.response import Response\n-from django.db.models import F\n-\n class projectViewsets(viewsets.ModelViewSet):\n     serializer_class = ProjectListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Project.objects.all().order_by(\"position\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ('id','name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n-    ordering_fields = ('id','name','created_at', )\n-    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n+    search_fields = (\n+        'id', 'name', 'position', 'description', 'group__name', \n+        'project_service__name', 'project_link__label', \n+        'case_study__title', 'created_at', 'updated_at'\n+    )\n+    ordering_fields = ('id', 'name', 'created_at')\n \n     filterset_fields = {\n         'id': ['exact'],\n         'group': ['exact'],\n         'project_service': ['exact'],\n-        'created_at':['exact','gte','lte']\n+        'created_at': ['exact', 'gte', 'lte']\n     }\n \n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n+    http_method_names = ['get', 'post', 'put', 'patch', 'delete']  # Allowed methods\n \n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n+    # Other methods...\n \n     @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n     def count_as_services(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n         service_counts = (\n             Project.objects\n-            .values('project_service__id','project_service__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+            .values('project_service__id', 'project_service__name')\n+            .annotate(project_count=Count('id'))\n         )\n \n-        # Format the response data\n         response_data = [\n             {\n                 'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],  # Include service name\n+                'service_name': service['project_service__name'],\n                 'project_count': service['project_count']\n             }\n             for service in service_counts\n         ]\n \n         return Response(response_data)\n-    \n+\n     @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n     def count_as_group(self, request, *args, **kwargs):\n-        # Group by project_service name and count the number of projects\n         groups_counts = (\n             Project.objects\n-            .values('group__id','group__name')  # Group by the service name\n-            .annotate(project_count=Count('id'))  # Count the number of projects per service\n+            .values('group__id', 'group__name')\n+            .annotate(project_count=Count('id'))\n         )\n \n-        # Format the response data\n         response_data = [\n             {\n-                'service_id': service['group__id'],\n-                'service_name': service['group__name'],  # Include service name\n-                'project_count': service['project_count']\n+                'group_id': group['group__id'],\n+                'group_name': group['group__name'],\n+                'project_count': group['project_count']\n             }\n-            for service in groups_counts\n+            for group in groups_counts\n         ]\n \n         return Response(response_data)\n \n-\n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    @action(detail=False, methods=['post'], name=\"draggableProject\", url_path=\"drag-project\")\n     def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n+        if request.method != 'POST':\n+            return Response({\"error\": \"Method not allowed\"}, status=405)  # Return 405 for non-POST requests\n \n-        from rest_framework.response import Response\n+        target = request.data.get('target')  # Get from request data\n+        goal = request.data.get('goal')\n \n-        # Fetch the target and goal objects\n         try:\n             target_obj = Project.objects.get(id=target)\n             goal_obj = Project.objects.get(id=goal)\n         except Project.DoesNotExist:\n@@ -100,33 +77,19 @@\n         target_position = target_obj.position\n         goal_position = goal_obj.position\n \n         if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n             affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n             for obj in affected_objs:\n                 obj.position -= 1\n                 obj.save()\n-            \n-            # Set target object's new position\n             target_obj.position = goal_position\n             target_obj.save()\n-\n         else:\n-          # Moving target up (target goes before goal)\n             affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n             for obj in affected_objs:\n                 obj.position += 1\n                 obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.position = goal_position\n             target_obj.save()\n \n-\n         return Response({\"status\": \"success\"})\n-\n-\n"
                },
                {
                    "date": 1729849517637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,97 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Project,ProjectService\n+from ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n+from django.db.models import F\n+\n class projectViewsets(viewsets.ModelViewSet):\n     serializer_class = ProjectListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Project.objects.all().order_by(\"position\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = (\n-        'id', 'name', 'position', 'description', 'group__name', \n-        'project_service__name', 'project_link__label', \n-        'case_study__title', 'created_at', 'updated_at'\n-    )\n-    ordering_fields = ('id', 'name', 'created_at')\n+    search_fields = ('id','name', 'position', 'description', 'group__name', 'project_service__name', 'project_link__label', 'case_study__title', 'created_at', 'updated_at', )\n+    ordering_fields = ('id','name','created_at', )\n+    # ('name', 'position', 'description', 'group', 'project_service', 'project_link', 'case_study', 'media', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n         'group': ['exact'],\n         'project_service': ['exact'],\n-        'created_at': ['exact', 'gte', 'lte']\n+        'created_at':['exact','gte','lte']\n     }\n \n-    http_method_names = ['get', 'post', 'put', 'patch', 'delete']  # Allowed methods\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n \n-    # Other methods...\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n \n     @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n     def count_as_services(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n         service_counts = (\n             Project.objects\n-            .values('project_service__id', 'project_service__name')\n-            .annotate(project_count=Count('id'))\n+            .values('project_service__id','project_service__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n         )\n \n+        # Format the response data\n         response_data = [\n             {\n                 'service_id': service['project_service__id'],\n-                'service_name': service['project_service__name'],\n+                'service_name': service['project_service__name'],  # Include service name\n                 'project_count': service['project_count']\n             }\n             for service in service_counts\n         ]\n \n         return Response(response_data)\n-\n+    \n     @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n     def count_as_group(self, request, *args, **kwargs):\n+        # Group by project_service name and count the number of projects\n         groups_counts = (\n             Project.objects\n-            .values('group__id', 'group__name')\n-            .annotate(project_count=Count('id'))\n+            .values('group__id','group__name')  # Group by the service name\n+            .annotate(project_count=Count('id'))  # Count the number of projects per service\n         )\n \n+        # Format the response data\n         response_data = [\n             {\n-                'group_id': group['group__id'],\n-                'group_name': group['group__name'],\n-                'project_count': group['project_count']\n+                'service_id': service['group__id'],\n+                'service_name': service['group__name'],  # Include service name\n+                'project_count': service['project_count']\n             }\n-            for group in groups_counts\n+            for service in groups_counts\n         ]\n \n         return Response(response_data)\n \n-    @action(detail=False, methods=['post'], name=\"draggableProject\", url_path=\"drag-project\")\n+\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n     def Draggable(self, request, *args, **kwargs):\n-        if request.method != 'POST':\n-            return Response({\"error\": \"Method not allowed\"}, status=405)  # Return 405 for non-POST requests\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n \n-        target = request.data.get('target')  # Get from request data\n-        goal = request.data.get('goal')\n+        from rest_framework.response import Response\n \n+        # Fetch the target and goal objects\n         try:\n             target_obj = Project.objects.get(id=target)\n             goal_obj = Project.objects.get(id=goal)\n         except Project.DoesNotExist:\n@@ -77,19 +100,33 @@\n         target_position = target_obj.position\n         goal_position = goal_obj.position\n \n         if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n             affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n             for obj in affected_objs:\n                 obj.position -= 1\n                 obj.save()\n+            \n+            # Set target object's new position\n             target_obj.position = goal_position\n             target_obj.save()\n+\n         else:\n+          # Moving target up (target goes before goal)\n             affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n             for obj in affected_objs:\n                 obj.position += 1\n                 obj.save()\n-            target_obj.position = goal_position\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n             target_obj.save()\n \n+\n         return Response({\"status\": \"success\"})\n+\n+\n"
                },
                {
                    "date": 1729849927433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,14 +33,15 @@\n         return queryset\n         #return queryset.filter(user_id=self.request.user.id)\n \n     def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectRetrieveSerializers\n-        return super().get_serializer_class()\n+    if self.action in ['create', 'update', 'partial_update']:\n+        return ProjectWriteSerializers\n+    elif self.action == 'retrieve':\n+        return ProjectRetrieveSerializers\n+    return super().get_serializer_class()\n \n+\n     @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n     def count_as_services(self, request, *args, **kwargs):\n         # Group by project_service name and count the number of projects\n         service_counts = (\n"
                },
                {
                    "date": 1729849948868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n from rest_framework.response import Response\n from django.db.models import F\n \n class projectViewsets(viewsets.ModelViewSet):\n+    http_method_names = ['get', 'post', 'put', 'patch', 'delete']\n     serializer_class = ProjectListSerializers\n     # permission_classes = [projectsPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n@@ -33,13 +34,13 @@\n         return queryset\n         #return queryset.filter(user_id=self.request.user.id)\n \n     def get_serializer_class(self):\n-    if self.action in ['create', 'update', 'partial_update']:\n-        return ProjectWriteSerializers\n-    elif self.action == 'retrieve':\n-        return ProjectRetrieveSerializers\n-    return super().get_serializer_class()\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectRetrieveSerializers\n+        return super().get_serializer_class()\n \n \n     @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n     def count_as_services(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1729850149352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from rest_framework.response import Response\n from django.db.models import F\n \n class projectViewsets(viewsets.ModelViewSet):\n-    http_method_names = ['get', 'post', 'put', 'patch', 'delete']\n+    # http_method_names = ['get', 'post', 'put', 'patch', 'delete']\n     serializer_class = ProjectListSerializers\n     # permission_classes = [projectsPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n"
                },
                {
                    "date": 1729852306208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,50 +85,60 @@\n         return Response(response_data)\n \n \n     @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n+def Draggable(self, request, *args, **kwargs):\n+    target_position = request.GET.get('target')  # Position of the target object\n+    goal_position = request.GET.get('goal')  # Position of the goal object\n \n-        from rest_framework.response import Response\n+    from rest_framework.response import Response\n \n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+    if not target_position or not goal_position:\n+        return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n \n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n+    # Convert to integers\n+    try:\n+        target_position = int(target_position)\n+        goal_position = int(goal_position)\n+    except ValueError:\n+        return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n+    # Fetch the target and goal objects based on position\n+    try:\n+        target_obj = Project.objects.get(position=target_position)\n+        goal_obj = Project.objects.get(position=goal_position)\n+    except Project.DoesNotExist:\n+        return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+    if target_position < goal_position:\n+        # Moving target down (target goes after goal)\n+        affected_objs = Project.objects.filter(\n+            position__gt=target_position, position__lte=goal_position\n+        ).order_by('position')\n+        \n+        # Decrement position of all affected objects\n+        for obj in affected_objs:\n+            obj.position -= 1\n+            obj.save()\n \n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n+        # Set target object's new position\n+        target_obj.position = goal_position\n+        target_obj.save()\n \n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n+    else:\n+        # Moving target up (target goes before goal)\n+        affected_objs = Project.objects.filter(\n+            position__lt=target_position, position__gte=goal_position\n+        ).order_by('-position')\n \n+        # Increment position of all affected objects by 1\n+        for obj in affected_objs:\n+            obj.position += 1\n+            obj.save()\n \n-        return Response({\"status\": \"success\"})\n+        # Set target object's new position (exact position of the goal)\n+        target_obj.position = goal_position\n+        target_obj.save()\n \n+    return Response({\"status\": \"success\"})\n \n+\n"
                },
                {
                    "date": 1729852318109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         return Response(response_data)\n \n \n     @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-def Draggable(self, request, *args, **kwargs):\n+    def Draggable(self, request, *args, **kwargs):\n     target_position = request.GET.get('target')  # Position of the target object\n     goal_position = request.GET.get('goal')  # Position of the goal object\n \n     from rest_framework.response import Response\n"
                },
                {
                    "date": 1729852354403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,59 +86,49 @@\n \n \n     @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n     def Draggable(self, request, *args, **kwargs):\n-    target_position = request.GET.get('target')  # Position of the target object\n-    goal_position = request.GET.get('goal')  # Position of the goal object\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n \n-    from rest_framework.response import Response\n+        from rest_framework.response import Response\n \n-    if not target_position or not goal_position:\n-        return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-    # Convert to integers\n-    try:\n-        target_position = int(target_position)\n-        goal_position = int(goal_position)\n-    except ValueError:\n-        return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n \n-    # Fetch the target and goal objects based on position\n-    try:\n-        target_obj = Project.objects.get(position=target_position)\n-        goal_obj = Project.objects.get(position=goal_position)\n-    except Project.DoesNotExist:\n-        return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n \n-    if target_position < goal_position:\n-        # Moving target down (target goes after goal)\n-        affected_objs = Project.objects.filter(\n-            position__gt=target_position, position__lte=goal_position\n-        ).order_by('position')\n-        \n-        # Decrement position of all affected objects\n-        for obj in affected_objs:\n-            obj.position -= 1\n-            obj.save()\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n \n-        # Set target object's new position\n-        target_obj.position = goal_position\n-        target_obj.save()\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n \n-    else:\n-        # Moving target up (target goes before goal)\n-        affected_objs = Project.objects.filter(\n-            position__lt=target_position, position__gte=goal_position\n-        ).order_by('-position')\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n \n-        # Increment position of all affected objects by 1\n-        for obj in affected_objs:\n-            obj.position += 1\n-            obj.save()\n \n-        # Set target object's new position (exact position of the goal)\n-        target_obj.position = goal_position\n-        target_obj.save()\n+        return Response({\"status\": \"success\"})\n \n-    return Response({\"status\": \"success\"})\n \n-\n"
                },
                {
                    "date": 1729852374042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,50 +85,61 @@\n         return Response(response_data)\n \n \n     @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n+def Draggable(self, request, *args, **kwargs):\n+    target_position = request.GET.get('target')  # Position of the target object\n+    goal_position = request.GET.get('goal')  # Position of the goal object\n \n-        from rest_framework.response import Response\n+    from rest_framework.response import Response\n \n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Project.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n-        except Project.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+    if not target_position or not goal_position:\n+        return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n \n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n+    # Convert to integers\n+    try:\n+        target_position = int(target_position)\n+        goal_position = int(goal_position)\n+    except ValueError:\n+        return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n+    # Fetch the target and goal objects based on position\n+    try:\n+        target_obj = Project.objects.get(position=target_position)\n+        goal_obj = Project.objects.get(position=goal_position)\n+    except Project.DoesNotExist:\n+        return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+    if target_position < goal_position:\n+        # Moving target down (target goes after goal)\n+        affected_objs = Project.objects.filter(\n+            position__gt=target_position, position__lte=goal_position\n+        ).order_by('position')\n+        \n+        # Decrement position of all affected objects\n+        for obj in affected_objs:\n+            obj.position -= 1\n+            obj.save()\n \n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n+        # Set target object's new position\n+        target_obj.position = goal_position\n+        target_obj.save()\n \n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n+    else:\n+        # Moving target up (target goes before goal)\n+        affected_objs = Project.objects.filter(\n+            position__lt=target_position, position__gte=goal_position\n+        ).order_by('-position')\n \n+        # Increment position of all affected objects by 1\n+        for obj in affected_objs:\n+            obj.position += 1\n+            obj.save()\n \n-        return Response({\"status\": \"success\"})\n+        # Set target object's new position (exact position of the goal)\n+        target_obj.position = goal_position\n+        target_obj.save()\n \n+    return Response({\"status\": \"success\"})\n \n+\n+\n"
                },
                {
                    "date": 1729852379862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,61 +85,61 @@\n         return Response(response_data)\n \n \n     @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n-def Draggable(self, request, *args, **kwargs):\n-    target_position = request.GET.get('target')  # Position of the target object\n-    goal_position = request.GET.get('goal')  # Position of the goal object\n+    def Draggable(self, request, *args, **kwargs):\n+        target_position = request.GET.get('target')  # Position of the target object\n+        goal_position = request.GET.get('goal')  # Position of the goal object\n \n-    from rest_framework.response import Response\n+        from rest_framework.response import Response\n \n-    if not target_position or not goal_position:\n-        return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n+        if not target_position or not goal_position:\n+            return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n \n-    # Convert to integers\n-    try:\n-        target_position = int(target_position)\n-        goal_position = int(goal_position)\n-    except ValueError:\n-        return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n+        # Convert to integers\n+        try:\n+            target_position = int(target_position)\n+            goal_position = int(goal_position)\n+        except ValueError:\n+            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n-    # Fetch the target and goal objects based on position\n-    try:\n-        target_obj = Project.objects.get(position=target_position)\n-        goal_obj = Project.objects.get(position=goal_position)\n-    except Project.DoesNotExist:\n-        return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+        # Fetch the target and goal objects based on position\n+        try:\n+            target_obj = Project.objects.get(position=target_position)\n+            goal_obj = Project.objects.get(position=goal_position)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n-    if target_position < goal_position:\n-        # Moving target down (target goes after goal)\n-        affected_objs = Project.objects.filter(\n-            position__gt=target_position, position__lte=goal_position\n-        ).order_by('position')\n-        \n-        # Decrement position of all affected objects\n-        for obj in affected_objs:\n-            obj.position -= 1\n-            obj.save()\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(\n+                position__gt=target_position, position__lte=goal_position\n+            ).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n \n-        # Set target object's new position\n-        target_obj.position = goal_position\n-        target_obj.save()\n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n \n-    else:\n-        # Moving target up (target goes before goal)\n-        affected_objs = Project.objects.filter(\n-            position__lt=target_position, position__gte=goal_position\n-        ).order_by('-position')\n+        else:\n+            # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(\n+                position__lt=target_position, position__gte=goal_position\n+            ).order_by('-position')\n \n-        # Increment position of all affected objects by 1\n-        for obj in affected_objs:\n-            obj.position += 1\n-            obj.save()\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n \n-        # Set target object's new position (exact position of the goal)\n-        target_obj.position = goal_position\n-        target_obj.save()\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position\n+            target_obj.save()\n \n-    return Response({\"status\": \"success\"})\n+        return Response({\"status\": \"success\"})\n \n \n \n"
                }
            ],
            "date": 1729766830830,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import Project,ProjectService\nfrom ..serializers.project_serializers import ProjectListSerializers, ProjectRetrieveSerializers, ProjectWriteSerializers\nfrom ..utilities.importbase import *\nfrom rest_framework.decorators import action\nfrom django.db.models import Count\nfrom rest_framework.response import Response\n\nclass projectViewsets(viewsets.ModelViewSet):\n    serializer_class = ProjectListSerializers\n    # permission_classes = [projectsPermission]\n    # authentication_classes = [JWTAuthentication]\n    pagination_class = MyPageNumberPagination\n    queryset = Project.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['name','description']\n    ordering_fields = ['id']\n\n    filterset_fields = {\n        'id': ['exact'],\n        'group': ['exact'],\n        'project_service': ['exact'],\n    }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return ProjectWriteSerializers\n        elif self.action == 'retrieve':\n            return ProjectRetrieveSerializers\n        return super().get_serializer_class()\n\n    @action(detail=False, methods=['get'], name=\"count_as_services\", url_path=\"services-count\")\n    def count_as_services(self, request, *args, **kwargs):\n        # Group by project_service name and count the number of projects\n        service_counts = (\n            Project.objects\n            .values('project_service__id','project_service__name')  # Group by the service name\n            .annotate(project_count=Count('id'))  # Count the number of projects per service\n        )\n\n        # Format the response data\n        response_data = [\n            {\n                'service_id': service['project_service__id'],\n                'service_name': service['project_service__name'],  # Include service name\n                'project_count': service['project_count']\n            }\n            for service in service_counts\n        ]\n\n        return Response(response_data)\n    \n    @action(detail=False, methods=['get'], name=\"count_as_group\", url_path=\"project-count\")\n    def count_as_group(self, request, *args, **kwargs):\n        # Group by project_service name and count the number of projects\n        groups_counts = (\n            Project.objects\n            .values('group__id','group__name')  # Group by the service name\n            .annotate(project_count=Count('id'))  # Count the number of projects per service\n        )\n\n        # Format the response data\n        response_data = [\n            {\n                'service_id': service['group__id'],\n                'service_name': service['group__name'],  # Include service name\n                'project_count': service['project_count']\n            }\n            for service in groups_counts\n        ]\n\n        return Response(response_data)\n    \n"
        }
    ]
}