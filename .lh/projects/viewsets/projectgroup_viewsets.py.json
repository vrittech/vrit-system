{
    "sourceFile": "projects/viewsets/projectgroup_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1730093651571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730093668162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             target_obj.save()\n \n         else:\n             # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(\n+            affected_objs = ProjectGroup.objects.filter(\n                 position__lt=target_position, position__gte=goal_position\n             ).order_by('-position')\n \n             # Increment position of all affected objects by 1\n"
                },
                {
                    "date": 1730093906228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(\n+            affected_objs = ProjectGroup.objects.filter(\n                 position__gt=target_position, position__lte=goal_position\n             ).order_by('position')\n             \n             # Decrement position of all affected objects\n"
                },
                {
                    "date": 1730093920088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project-group\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n@@ -54,11 +54,11 @@\n             return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n         # Fetch the target and goal objects based on position\n         try:\n-            target_obj = Project.objects.get(position=target_position)\n-            goal_obj = Project.objects.get(position=goal_position)\n-        except Project.DoesNotExist:\n+            target_obj = ProjectGroup.objects.get(position=target_position)\n+            goal_obj = ProjectGroup.objects.get(position=goal_position)\n+        except ProjectGroup.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n"
                },
                {
                    "date": 1730093926310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project-group\")\n+    @action(detail=False, methods=['get'], name=\"draggableProjectGroup\", url_path=\"drag-project-group\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n"
                },
                {
                    "date": 1730093948224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import ProjectGroup\n from ..serializers.projectgroup_serializers import ProjectGroupListSerializers, ProjectGroupRetrieveSerializers, ProjectGroupWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n \n+\n class projectgroupViewsets(viewsets.ModelViewSet):\n     serializer_class = ProjectGroupListSerializers\n     # permission_classes = [projectsPermission]\n     # authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1730093985309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n+    \n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1730093991108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n-    \n+    # ('name', 'position', 'created_at', 'updated_at', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1730094003481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = ProjectGroup.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n+    search_fields = ['name', 'position', 'created_at', 'updated_at','id']\n     ordering_fields = ['id']\n     # ('name', 'position', 'created_at', 'updated_at', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1730094010916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,14 @@\n     queryset = ProjectGroup.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['name', 'position', 'created_at', 'updated_at','id']\n-    ordering_fields = ['id']\n+    ordering_fields = ['name', 'position', 'created_at', 'updated_at','id']\n     # ('name', 'position', 'created_at', 'updated_at', )\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1730094018863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n     # ('name', 'position', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'name': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730094026643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,10 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n-        'id': ['exact'],\n+        'position': ['exact'],\n+        'position': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730094034903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import ProjectGroup\n+from ..serializers.projectgroup_serializers import ProjectGroupListSerializers, ProjectGroupRetrieveSerializers, ProjectGroupWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+\n+\n+class projectgroupViewsets(viewsets.ModelViewSet):\n+    serializer_class = ProjectGroupListSerializers\n+    # permission_classes = [projectsPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = ProjectGroup.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['name', 'position', 'created_at', 'updated_at','id']\n+    ordering_fields = ['name', 'position', 'created_at', 'updated_at','id']\n+    # ('name', 'position', 'created_at', 'updated_at', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'name': ['exact'],\n+        'position': ['exact'],\n+        'created_at': ['exact','gte'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return ProjectGroupWriteSerializers\n+        elif self.action == 'retrieve':\n+            return ProjectGroupRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=False, methods=['get'], name=\"draggableProjectGroup\", url_path=\"drag-project-group\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target_position = request.GET.get('target')  # Position of the target object\n+        goal_position = request.GET.get('goal')  # Position of the goal object\n+\n+        from rest_framework.response import Response\n+\n+        if not target_position or not goal_position:\n+            return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n+\n+        # Convert to integers\n+        try:\n+            target_position = int(target_position)\n+            goal_position = int(goal_position)\n+        except ValueError:\n+            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n+\n+        # Fetch the target and goal objects based on position\n+        try:\n+            target_obj = ProjectGroup.objects.get(position=target_position)\n+            goal_obj = ProjectGroup.objects.get(position=goal_position)\n+        except ProjectGroup.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = ProjectGroup.objects.filter(\n+                position__gt=target_position, position__lte=goal_position\n+            ).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+\n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+            # Moving target up (target goes before goal)\n+            affected_objs = ProjectGroup.objects.filter(\n+                position__lt=target_position, position__gte=goal_position\n+            ).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1730094039984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n         'position': ['exact'],\n-        'created_at': ['exact','gte'],\n+        'created_at': ['exact','gte','lte'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n@@ -97,104 +97,4 @@\n             target_obj.save()\n \n         return Response({\"status\": \"success\"})\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import ProjectGroup\n-from ..serializers.projectgroup_serializers import ProjectGroupListSerializers, ProjectGroupRetrieveSerializers, ProjectGroupWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-\n-\n-class projectgroupViewsets(viewsets.ModelViewSet):\n-    serializer_class = ProjectGroupListSerializers\n-    # permission_classes = [projectsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = ProjectGroup.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['name', 'position', 'created_at', 'updated_at','id']\n-    ordering_fields = ['name', 'position', 'created_at', 'updated_at','id']\n-    # ('name', 'position', 'created_at', 'updated_at', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'name': ['exact'],\n-        'position': ['exact'],\n-        'position': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return ProjectGroupWriteSerializers\n-        elif self.action == 'retrieve':\n-            return ProjectGroupRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-    \n-    @action(detail=False, methods=['get'], name=\"draggableProjectGroup\", url_path=\"drag-project-group\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target_position = request.GET.get('target')  # Position of the target object\n-        goal_position = request.GET.get('goal')  # Position of the goal object\n-\n-        from rest_framework.response import Response\n-\n-        if not target_position or not goal_position:\n-            return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n-\n-        # Convert to integers\n-        try:\n-            target_position = int(target_position)\n-            goal_position = int(goal_position)\n-        except ValueError:\n-            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n-\n-        # Fetch the target and goal objects based on position\n-        try:\n-            target_obj = ProjectGroup.objects.get(position=target_position)\n-            goal_obj = ProjectGroup.objects.get(position=goal_position)\n-        except ProjectGroup.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = ProjectGroup.objects.filter(\n-                position__gt=target_position, position__lte=goal_position\n-            ).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-\n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-            # Moving target up (target goes before goal)\n-            affected_objs = ProjectGroup.objects.filter(\n-                position__lt=target_position, position__gte=goal_position\n-            ).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        return Response({\"status\": \"success\"})\n-\n"
                }
            ],
            "date": 1730093651571,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import ProjectGroup\nfrom ..serializers.projectgroup_serializers import ProjectGroupListSerializers, ProjectGroupRetrieveSerializers, ProjectGroupWriteSerializers\nfrom ..utilities.importbase import *\n\nclass projectgroupViewsets(viewsets.ModelViewSet):\n    serializer_class = ProjectGroupListSerializers\n    # permission_classes = [projectsPermission]\n    # authentication_classes = [JWTAuthentication]\n    pagination_class = MyPageNumberPagination\n    queryset = ProjectGroup.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return ProjectGroupWriteSerializers\n        elif self.action == 'retrieve':\n            return ProjectGroupRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n    \n    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n    def Draggable(self, request, *args, **kwargs):\n        target_position = request.GET.get('target')  # Position of the target object\n        goal_position = request.GET.get('goal')  # Position of the goal object\n\n        from rest_framework.response import Response\n\n        if not target_position or not goal_position:\n            return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n\n        # Convert to integers\n        try:\n            target_position = int(target_position)\n            goal_position = int(goal_position)\n        except ValueError:\n            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n\n        # Fetch the target and goal objects based on position\n        try:\n            target_obj = Project.objects.get(position=target_position)\n            goal_obj = Project.objects.get(position=goal_position)\n        except Project.DoesNotExist:\n            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n\n        if target_position < goal_position:\n            # Moving target down (target goes after goal)\n            affected_objs = Project.objects.filter(\n                position__gt=target_position, position__lte=goal_position\n            ).order_by('position')\n            \n            # Decrement position of all affected objects\n            for obj in affected_objs:\n                obj.position -= 1\n                obj.save()\n\n            # Set target object's new position\n            target_obj.position = goal_position\n            target_obj.save()\n\n        else:\n            # Moving target up (target goes before goal)\n            affected_objs = Project.objects.filter(\n                position__lt=target_position, position__gte=goal_position\n            ).order_by('-position')\n\n            # Increment position of all affected objects by 1\n            for obj in affected_objs:\n                obj.position += 1\n                obj.save()\n\n            # Set target object's new position (exact position of the goal)\n            target_obj.position = goal_position\n            target_obj.save()\n\n        return Response({\"status\": \"success\"})\n\n"
        }
    ]
}