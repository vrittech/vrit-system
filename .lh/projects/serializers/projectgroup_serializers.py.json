{
    "sourceFile": "projects/serializers/projectgroup_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1730788865777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731396563676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,4 +26,11 @@\n class ProjectGroupWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = ProjectGroup\n         fields = '__all__'\n+        \n+    def validate(self, data):\n+        # Check if the position already exists in another Career\n+        position = data.get('position')\n+        if position and Blog.objects.filter(position=position).exists():\n+            raise serializers.ValidationError({\"position\": \"A blog with this position already exists.\"})\n+        return data\n"
                },
                {
                    "date": 1731396571436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n         \n     def validate(self, data):\n         # Check if the position already exists in another Career\n         position = data.get('position')\n-        if position and Blog.objects.filter(position=position).exists():\n-            raise serializers.ValidationError({\"position\": \"A blog with this position already exists.\"})\n+        if position and ProjectGroup.objects.filter(position=position).exists():\n+            raise serializers.ValidationError({\"position\": \"A group with this position already exists.\"})\n         return data\n"
                }
            ],
            "date": 1730788865777,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import ProjectGroup\n\nclass ProjectGroupListSerializers(serializers.ModelSerializer):\n    project_count = serializers.SerializerMethodField()\n\n    class Meta:\n        model = ProjectGroup\n        fields = '__all__'  # or specify fields manually if needed, e.g., ['id', 'name', 'project_count', ...]\n\n    def get_project_count(self, obj):\n        return obj.projects.count()\n\n\nclass ProjectGroupRetrieveSerializers(serializers.ModelSerializer):\n    project_count = serializers.SerializerMethodField()\n\n    class Meta:\n        model = ProjectGroup\n        fields = '__all__'\n\n    def get_project_count(self, obj):\n        return obj.projects.count()\n\n\nclass ProjectGroupWriteSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = ProjectGroup\n        fields = '__all__'\n"
        }
    ]
}