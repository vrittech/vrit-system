{
    "sourceFile": "projects/serializers/project_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1729762139180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729762579254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+from rest_framework import serializers\n+from ..models import Project, ProjectService, ProjectLink, ProjectGroup\n+import ast\n+\n+# Utility function to convert string to list\n+def str_to_list(data, value_to_convert):\n+    try:\n+        mutable_data = data.dict()\n+    except Exception:\n+        mutable_data = data\n+\n+    value_to_convert_data = mutable_data.get(value_to_convert)\n+    if isinstance(value_to_convert_data, list):\n+        return mutable_data\n+\n+    try:\n+        variations = ast.literal_eval(value_to_convert_data)\n+        mutable_data[value_to_convert] = variations\n+        return mutable_data\n+    except ValueError as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+\n+# Serializer for ProjectService model\n+class ServicesSerializers_Project(serializers.ModelSerializer):\n+    class Meta:\n+        model = ProjectService\n+        fields = ['id', 'name', 'description', 'image']\n+\n+# Serializer for ProjectLink model\n+class ProjectLinkSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = ProjectLink\n+        fields = ['id', 'label', 'url']\n+\n+# List serializer for Project model\n+class ProjectListSerializers(serializers.ModelSerializer):\n+    project_service = ServicesSerializers_Project(many=True, read_only=True)\n+    project_link = ProjectLinkSerializer(many=True, read_only=True)\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n+# Retrieve serializer for Project model\n+class ProjectRetrieveSerializers(serializers.ModelSerializer):\n+    project_service = ServicesSerializers_Project(many=True, read_only=True)\n+    project_link = ProjectLinkSerializer(many=True, read_only=True)\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n+# Write serializer for Project model with nested relations\n+class ProjectWriteSerializers(serializers.ModelSerializer):\n+    project_service = ServicesSerializers_Project(many=True, required=False)\n+    project_link = ProjectLinkSerializer(many=True, required=False)\n+\n+    def to_internal_value(self, data):\n+        # Convert 'project_service' and 'project_link' to list if needed\n+        if data.get('project_service'):\n+            data = str_to_list(data, 'project_service')\n+        if data.get('project_link'):\n+            data = str_to_list(data, 'project_link')\n+        return super().to_internal_value(data)\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n+    def create(self, validated_data):\n+        # Extract nested data for services and links\n+        project_service_data = validated_data.pop('project_service', [])\n+        project_link_data = validated_data.pop('project_link', [])\n+\n+        # Create Project instance\n+        project = Project.objects.create(**validated_data)\n+\n+        # Add related ProjectService instances\n+        for service_data in project_service_data:\n+            project_service, created = ProjectService.objects.get_or_create(**service_data)\n+            project.project_service.add(project_service)\n+\n+        # Add related ProjectLink instances\n+        for link_data in project_link_data:\n+            project_link, created = ProjectLink.objects.get_or_create(**link_data)\n+            project.project_link.add(project_link)\n+\n+        return project\n+\n+    def update(self, instance, validated_data):\n+        # Extract nested data for services and links\n+        project_service_data = validated_data.pop('project_service', [])\n+        project_link_data = validated_data.pop('project_link', [])\n+\n+        # Update Project instance fields\n+        instance.name = validated_data.get('name', instance.name)\n+        instance.description = validated_data.get('description', instance.description)\n+        instance.group = validated_data.get('group', instance.group)\n+        instance.image = validated_data.get('image', instance.image)\n+        instance.media = validated_data.get('media', instance.media)\n+        instance.save()\n+\n+        # Clear and add updated ProjectService instances\n+        if project_service_data:\n+            instance.project_service.clear()\n+            for service_data in project_service_data:\n+                project_service, created = ProjectService.objects.get_or_create(**service_data)\n+                instance.project_service.add(project_service)\n+\n+        # Clear and add updated ProjectLink instances\n+        if project_link_data:\n+            instance.project_link.clear()\n+            for link_data in project_link_data:\n+                project_link, created = ProjectLink.objects.get_or_create(**link_data)\n+                instance.project_link.add(project_link)\n+\n+        return instance\n"
                },
                {
                    "date": 1729765148903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,24 @@\n     class Meta:\n         model = Project\n         fields = '__all__'\n \n+    class ProjectWriteSerializers(serializers.ModelSerializer):\n+    project_service = serializers.PrimaryKeyRelatedField(\n+        queryset=ProjectService.objects.all(),\n+        many=True,\n+        required=False\n+    )\n+    project_link = serializers.PrimaryKeyRelatedField(\n+        queryset=ProjectLink.objects.all(),\n+        many=True,\n+        required=False\n+    )\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n     def create(self, validated_data):\n         # Extract nested data for services and links\n         project_service_data = validated_data.pop('project_service', [])\n         project_link_data = validated_data.pop('project_link', [])\n@@ -75,16 +91,14 @@\n         # Create Project instance\n         project = Project.objects.create(**validated_data)\n \n         # Add related ProjectService instances\n-        for service_data in project_service_data:\n-            project_service, created = ProjectService.objects.get_or_create(**service_data)\n-            project.project_service.add(project_service)\n+        if project_service_data:\n+            project.project_service.set(project_service_data)\n \n         # Add related ProjectLink instances\n-        for link_data in project_link_data:\n-            project_link, created = ProjectLink.objects.get_or_create(**link_data)\n-            project.project_link.add(project_link)\n+        if project_link_data:\n+            project.project_link.set(project_link_data)\n \n         return project\n \n     def update(self, instance, validated_data):\n@@ -92,26 +106,17 @@\n         project_service_data = validated_data.pop('project_service', [])\n         project_link_data = validated_data.pop('project_link', [])\n \n         # Update Project instance fields\n-        instance.name = validated_data.get('name', instance.name)\n-        instance.description = validated_data.get('description', instance.description)\n-        instance.group = validated_data.get('group', instance.group)\n-        instance.image = validated_data.get('image', instance.image)\n-        instance.media = validated_data.get('media', instance.media)\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n         instance.save()\n \n-        # Clear and add updated ProjectService instances\n+        # Update related ProjectService instances\n         if project_service_data:\n-            instance.project_service.clear()\n-            for service_data in project_service_data:\n-                project_service, created = ProjectService.objects.get_or_create(**service_data)\n-                instance.project_service.add(project_service)\n+            instance.project_service.set(project_service_data)\n \n-        # Clear and add updated ProjectLink instances\n+        # Update related ProjectLink instances\n         if project_link_data:\n-            instance.project_link.clear()\n-            for link_data in project_link_data:\n-                project_link, created = ProjectLink.objects.get_or_create(**link_data)\n-                instance.project_link.add(project_link)\n+            instance.project_link.set(project_link_data)\n \n         return instance\n"
                },
                {
                    "date": 1729765168561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,171 +67,56 @@\n         model = Project\n         fields = '__all__'\n \n     class ProjectWriteSerializers(serializers.ModelSerializer):\n-    project_service = serializers.PrimaryKeyRelatedField(\n-        queryset=ProjectService.objects.all(),\n-        many=True,\n-        required=False\n-    )\n-    project_link = serializers.PrimaryKeyRelatedField(\n-        queryset=ProjectLink.objects.all(),\n-        many=True,\n-        required=False\n-    )\n+        project_service = serializers.PrimaryKeyRelatedField(\n+            queryset=ProjectService.objects.all(),\n+            many=True,\n+            required=False\n+        )\n+        project_link = serializers.PrimaryKeyRelatedField(\n+            queryset=ProjectLink.objects.all(),\n+            many=True,\n+            required=False\n+        )\n \n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n+        class Meta:\n+            model = Project\n+            fields = '__all__'\n \n-    def create(self, validated_data):\n-        # Extract nested data for services and links\n-        project_service_data = validated_data.pop('project_service', [])\n-        project_link_data = validated_data.pop('project_link', [])\n+        def create(self, validated_data):\n+            # Extract nested data for services and links\n+            project_service_data = validated_data.pop('project_service', [])\n+            project_link_data = validated_data.pop('project_link', [])\n \n-        # Create Project instance\n-        project = Project.objects.create(**validated_data)\n+            # Create Project instance\n+            project = Project.objects.create(**validated_data)\n \n-        # Add related ProjectService instances\n-        if project_service_data:\n-            project.project_service.set(project_service_data)\n+            # Add related ProjectService instances\n+            if project_service_data:\n+                project.project_service.set(project_service_data)\n \n-        # Add related ProjectLink instances\n-        if project_link_data:\n-            project.project_link.set(project_link_data)\n+            # Add related ProjectLink instances\n+            if project_link_data:\n+                project.project_link.set(project_link_data)\n \n-        return project\n+            return project\n \n-    def update(self, instance, validated_data):\n-        # Extract nested data for services and links\n-        project_service_data = validated_data.pop('project_service', [])\n-        project_link_data = validated_data.pop('project_link', [])\n+        def update(self, instance, validated_data):\n+            # Extract nested data for services and links\n+            project_service_data = validated_data.pop('project_service', [])\n+            project_link_data = validated_data.pop('project_link', [])\n \n-        # Update Project instance fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+            # Update Project instance fields\n+            for attr, value in validated_data.items():\n+                setattr(instance, attr, value)\n+            instance.save()\n \n-        # Update related ProjectService instances\n-        if project_service_data:\n-            instance.project_service.set(project_service_data)\n+            # Update related ProjectService instances\n+            if project_service_data:\n+                instance.project_service.set(project_service_data)\n \n-        # Update related ProjectLink instances\n-        if project_link_data:\n-            instance.project_link.set(project_link_data)\n+            # Update related ProjectLink instances\n+            if project_link_data:\n+                instance.project_link.set(project_link_data)\n \n-        return instance\n-from rest_framework import serializers\n-from ..models import Project, ProjectService, ProjectLink\n-import ast\n-\n-# Utility function to convert string to list\n-def str_to_list(data, value_to_convert):\n-    try:\n-        mutable_data = data.dict()\n-    except Exception:\n-        mutable_data = data\n-\n-    value_to_convert_data = mutable_data.get(value_to_convert)\n-    if isinstance(value_to_convert_data, list):\n-        return mutable_data\n-\n-    try:\n-        variations = ast.literal_eval(value_to_convert_data)\n-        mutable_data[value_to_convert] = variations\n-        return mutable_data\n-    except ValueError as e:\n-        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n-\n-# Service serializer for ProjectService model\n-class ServicesSerializers_Project(serializers.ModelSerializer):\n-    class Meta:\n-        model = ProjectService\n-        fields = ['id', 'name', 'description', 'image']\n-\n-# Link serializer for ProjectLink model\n-class ProjectLinkSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = ProjectLink\n-        fields = ['id', 'name', 'url']\n-\n-# List serializer for Project model\n-class ProjectListSerializers(serializers.ModelSerializer):\n-    project_service = ServicesSerializers_Project(many=True, read_only=True)\n-    project_link = ProjectLinkSerializer(many=True, read_only=True, source='project')\n-\n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n-\n-# Retrieve serializer for Project model\n-class ProjectRetrieveSerializers(serializers.ModelSerializer):\n-    project_service = ServicesSerializers_Project(many=True, read_only=True)\n-    project_link = ProjectLinkSerializer(many=True, read_only=True, source='project')\n-\n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n-\n-# Write serializer for Project model with nested relations\n-class ProjectWriteSerializers(serializers.ModelSerializer):\n-    project_service = ServicesSerializers_Project(many=True, required=False)\n-    project_link = ProjectLinkSerializer(many=True, required=False, source='project')\n-\n-    def to_internal_value(self, data):\n-        # Convert 'project_service' and 'project_link' to list if needed\n-        if data.get('project_service'):\n-            data = str_to_list(data, 'project_service')\n-        if data.get('project_link'):\n-            data = str_to_list(data, 'project_link')\n-        return super().to_internal_value(data)\n-\n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n-\n-    def create(self, validated_data):\n-        # Extract nested data for services and links\n-        project_service_data = validated_data.pop('project_service', [])\n-        project_link_data = validated_data.pop('project', [])\n-\n-        # Create Project instance\n-        project = Project.objects.create(**validated_data)\n-\n-        # Add related ProjectService instances\n-        for service_data in project_service_data:\n-            project_service, created = ProjectService.objects.get_or_create(**service_data)\n-            project.project_service.add(project_service)\n-\n-        # Add related ProjectLink instances\n-        for link_data in project_link_data:\n-            ProjectLink.objects.create(project=project, **link_data)\n-\n-        return project\n-\n-    def update(self, instance, validated_data):\n-        # Extract nested data for services and links\n-        project_service_data = validated_data.pop('project_service', [])\n-        project_link_data = validated_data.pop('project', [])\n-\n-        # Update Project instance fields\n-        instance.name = validated_data.get('name', instance.name)\n-        instance.description = validated_data.get('description', instance.description)\n-        instance.group = validated_data.get('group', instance.group)\n-        instance.image = validated_data.get('image', instance.image)\n-        instance.media = validated_data.get('media', instance.media)\n-        instance.save()\n-\n-        # Clear and add updated ProjectService instances\n-        if project_service_data:\n-            instance.project_service.clear()\n-            for service_data in project_service_data:\n-                project_service, created = ProjectService.objects.get_or_create(**service_data)\n-                instance.project_service.add(project_service)\n-\n-        # Clear and add updated ProjectLink instances\n-        if project_link_data:\n-            instance.project.all().delete()\n-            for link_data in project_link_data:\n-                ProjectLink.objects.create(project=instance, **link_data)\n-\n-        return instance\n+            return instance\n"
                },
                {
                    "date": 1729765342514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,74 +49,82 @@\n     class Meta:\n         model = Project\n         fields = '__all__'\n \n-# Write serializer for Project model with nested relations\n+from rest_framework import serializers\n+from ..models import Project, ProjectService, ProjectLink\n+\n+class ProjectLinkSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = ProjectLink\n+        fields = ['id', 'label', 'url']\n+\n class ProjectWriteSerializers(serializers.ModelSerializer):\n-    project_service = ServicesSerializers_Project(many=True, required=False)\n+    project_service = serializers.PrimaryKeyRelatedField(\n+        queryset=ProjectService.objects.all(),\n+        many=True,\n+        required=False\n+    )\n     project_link = ProjectLinkSerializer(many=True, required=False)\n \n-    def to_internal_value(self, data):\n-        # Convert 'project_service' and 'project_link' to list if needed\n-        if data.get('project_service'):\n-            data = str_to_list(data, 'project_service')\n-        if data.get('project_link'):\n-            data = str_to_list(data, 'project_link')\n-        return super().to_internal_value(data)\n-\n     class Meta:\n         model = Project\n         fields = '__all__'\n \n-    class ProjectWriteSerializers(serializers.ModelSerializer):\n-        project_service = serializers.PrimaryKeyRelatedField(\n-            queryset=ProjectService.objects.all(),\n-            many=True,\n-            required=False\n-        )\n-        project_link = serializers.PrimaryKeyRelatedField(\n-            queryset=ProjectLink.objects.all(),\n-            many=True,\n-            required=False\n-        )\n+    def create(self, validated_data):\n+        # Extract nested data for services and links\n+        project_service_data = validated_data.pop('project_service', [])\n+        project_link_data = validated_data.pop('project_link', [])\n \n-        class Meta:\n-            model = Project\n-            fields = '__all__'\n+        # Create Project instance\n+        project = Project.objects.create(**validated_data)\n \n-        def create(self, validated_data):\n-            # Extract nested data for services and links\n-            project_service_data = validated_data.pop('project_service', [])\n-            project_link_data = validated_data.pop('project_link', [])\n+        # Add related ProjectService instances\n+        if project_service_data:\n+            project.project_service.set(project_service_data)\n \n-            # Create Project instance\n-            project = Project.objects.create(**validated_data)\n+        # Add related ProjectLink instances\n+        for link_data in project_link_data:\n+            # Check if 'id' is provided in link data for update\n+            link_id = link_data.pop('id', None)\n+            if link_id:\n+                # Update existing ProjectLink if ID is present\n+                ProjectLink.objects.filter(id=link_id).update(**link_data)\n+                project_link = ProjectLink.objects.get(id=link_id)\n+            else:\n+                # Create new ProjectLink if no ID is present\n+                project_link = ProjectLink.objects.create(**link_data)\n \n-            # Add related ProjectService instances\n-            if project_service_data:\n-                project.project_service.set(project_service_data)\n+            project.project_link.add(project_link)\n \n-            # Add related ProjectLink instances\n-            if project_link_data:\n-                project.project_link.set(project_link_data)\n+        return project\n \n-            return project\n+    def update(self, instance, validated_data):\n+        # Extract nested data for services and links\n+        project_service_data = validated_data.pop('project_service', [])\n+        project_link_data = validated_data.pop('project_link', [])\n \n-        def update(self, instance, validated_data):\n-            # Extract nested data for services and links\n-            project_service_data = validated_data.pop('project_service', [])\n-            project_link_data = validated_data.pop('project_link', [])\n+        # Update Project instance fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-            # Update Project instance fields\n-            for attr, value in validated_data.items():\n-                setattr(instance, attr, value)\n-            instance.save()\n+        # Update related ProjectService instances\n+        if project_service_data:\n+            instance.project_service.set(project_service_data)\n \n-            # Update related ProjectService instances\n-            if project_service_data:\n-                instance.project_service.set(project_service_data)\n+        # Update or create related ProjectLink instances\n+        if project_link_data:\n+            instance.project_link.clear()\n+            for link_data in project_link_data:\n+                link_id = link_data.pop('id', None)\n+                if link_id:\n+                    # Update existing ProjectLink if ID is present\n+                    ProjectLink.objects.filter(id=link_id).update(**link_data)\n+                    project_link = ProjectLink.objects.get(id=link_id)\n+                else:\n+                    # Create new ProjectLink if no ID is present\n+                    project_link = ProjectLink.objects.create(**link_data)\n \n-            # Update related ProjectLink instances\n-            if project_link_data:\n-                instance.project_link.set(project_link_data)\n+                instance.project_link.add(project_link)\n \n-            return instance\n+        return instance\n"
                },
                {
                    "date": 1729765361204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,13 +52,8 @@\n \n from rest_framework import serializers\n from ..models import Project, ProjectService, ProjectLink\n \n-class ProjectLinkSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = ProjectLink\n-        fields = ['id', 'label', 'url']\n-\n class ProjectWriteSerializers(serializers.ModelSerializer):\n     project_service = serializers.PrimaryKeyRelatedField(\n         queryset=ProjectService.objects.all(),\n         many=True,\n"
                },
                {
                    "date": 1729765368511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+from rest_framework import serializers\n+from ..models import Project, ProjectService, ProjectLink, ProjectGroup\n+import ast\n+\n+# Utility function to convert string to list\n+def str_to_list(data, value_to_convert):\n+    try:\n+        mutable_data = data.dict()\n+    except Exception:\n+        mutable_data = data\n+\n+    value_to_convert_data = mutable_data.get(value_to_convert)\n+    if isinstance(value_to_convert_data, list):\n+        return mutable_data\n+\n+    try:\n+        variations = ast.literal_eval(value_to_convert_data)\n+        mutable_data[value_to_convert] = variations\n+        return mutable_data\n+    except ValueError as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+\n+# Serializer for ProjectService model\n+class ServicesSerializers_Project(serializers.ModelSerializer):\n+    class Meta:\n+        model = ProjectService\n+        fields = ['id', 'name', 'description', 'image']\n+\n+# Serializer for ProjectLink model\n+class ProjectLinkSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = ProjectLink\n+        fields = ['id', 'label', 'url']\n+\n+# List serializer for Project model\n+class ProjectListSerializers(serializers.ModelSerializer):\n+    project_service = ServicesSerializers_Project(many=True, read_only=True)\n+    project_link = ProjectLinkSerializer(many=True, read_only=True)\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n+# Retrieve serializer for Project model\n+class ProjectRetrieveSerializers(serializers.ModelSerializer):\n+    project_service = ServicesSerializers_Project(many=True, read_only=True)\n+    project_link = ProjectLinkSerializer(many=True, read_only=True)\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n+class ProjectWriteSerializers(serializers.ModelSerializer):\n+    project_service = serializers.PrimaryKeyRelatedField(\n+        queryset=ProjectService.objects.all(),\n+        many=True,\n+        required=False\n+    )\n+    project_link = ProjectLinkSerializer(many=True, required=False)\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n+    def create(self, validated_data):\n+        # Extract nested data for services and links\n+        project_service_data = validated_data.pop('project_service', [])\n+        project_link_data = validated_data.pop('project_link', [])\n+\n+        # Create Project instance\n+        project = Project.objects.create(**validated_data)\n+\n+        # Add related ProjectService instances\n+        if project_service_data:\n+            project.project_service.set(project_service_data)\n+\n+        # Add related ProjectLink instances\n+        for link_data in project_link_data:\n+            # Check if 'id' is provided in link data for update\n+            link_id = link_data.pop('id', None)\n+            if link_id:\n+                # Update existing ProjectLink if ID is present\n+                ProjectLink.objects.filter(id=link_id).update(**link_data)\n+                project_link = ProjectLink.objects.get(id=link_id)\n+            else:\n+                # Create new ProjectLink if no ID is present\n+                project_link = ProjectLink.objects.create(**link_data)\n+\n+            project.project_link.add(project_link)\n+\n+        return project\n+\n+    def update(self, instance, validated_data):\n+        # Extract nested data for services and links\n+        project_service_data = validated_data.pop('project_service', [])\n+        project_link_data = validated_data.pop('project_link', [])\n+\n+        # Update Project instance fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n+\n+        # Update related ProjectService instances\n+        if project_service_data:\n+            instance.project_service.set(project_service_data)\n+\n+        # Update or create related ProjectLink instances\n+        if project_link_data:\n+            instance.project_link.clear()\n+            for link_data in project_link_data:\n+                link_id = link_data.pop('id', None)\n+                if link_id:\n+                    # Update existing ProjectLink if ID is present\n+                    ProjectLink.objects.filter(id=link_id).update(**link_data)\n+                    project_link = ProjectLink.objects.get(id=link_id)\n+                else:\n+                    # Create new ProjectLink if no ID is present\n+                    project_link = ProjectLink.objects.create(**link_data)\n+\n+                instance.project_link.add(project_link)\n+\n+        return instance\n"
                },
                {
                    "date": 1729765448209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,135 +61,23 @@\n     class Meta:\n         model = Project\n         fields = '__all__'\n \n-    def create(self, validated_data):\n-        # Extract nested data for services and links\n-        project_service_data = validated_data.pop('project_service', [])\n-        project_link_data = validated_data.pop('project_link', [])\n+    def to_internal_value(self, data):\n+        # Convert project_service to a list of integers if necessary\n+        project_service_data = data.get('project_service', [])\n+        if isinstance(project_service_data, list):\n+            # Attempt to convert string values to integers\n+            try:\n+                data['project_service'] = [int(service_id) for service_id in project_service_data]\n+            except ValueError:\n+                raise serializers.ValidationError({\n+                    'project_service': 'Expected a list of integers for project_service.'\n+                })\n \n-        # Create Project instance\n-        project = Project.objects.create(**validated_data)\n+        return super().to_internal_value(data)\n \n-        # Add related ProjectService instances\n-        if project_service_data:\n-            project.project_service.set(project_service_data)\n-\n-        # Add related ProjectLink instances\n-        for link_data in project_link_data:\n-            # Check if 'id' is provided in link data for update\n-            link_id = link_data.pop('id', None)\n-            if link_id:\n-                # Update existing ProjectLink if ID is present\n-                ProjectLink.objects.filter(id=link_id).update(**link_data)\n-                project_link = ProjectLink.objects.get(id=link_id)\n-            else:\n-                # Create new ProjectLink if no ID is present\n-                project_link = ProjectLink.objects.create(**link_data)\n-\n-            project.project_link.add(project_link)\n-\n-        return project\n-\n-    def update(self, instance, validated_data):\n-        # Extract nested data for services and links\n-        project_service_data = validated_data.pop('project_service', [])\n-        project_link_data = validated_data.pop('project_link', [])\n-\n-        # Update Project instance fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n-\n-        # Update related ProjectService instances\n-        if project_service_data:\n-            instance.project_service.set(project_service_data)\n-\n-        # Update or create related ProjectLink instances\n-        if project_link_data:\n-            instance.project_link.clear()\n-            for link_data in project_link_data:\n-                link_id = link_data.pop('id', None)\n-                if link_id:\n-                    # Update existing ProjectLink if ID is present\n-                    ProjectLink.objects.filter(id=link_id).update(**link_data)\n-                    project_link = ProjectLink.objects.get(id=link_id)\n-                else:\n-                    # Create new ProjectLink if no ID is present\n-                    project_link = ProjectLink.objects.create(**link_data)\n-\n-                instance.project_link.add(project_link)\n-\n-        return instance\n-from rest_framework import serializers\n-from ..models import Project, ProjectService, ProjectLink, ProjectGroup\n-import ast\n-\n-# Utility function to convert string to list\n-def str_to_list(data, value_to_convert):\n-    try:\n-        mutable_data = data.dict()\n-    except Exception:\n-        mutable_data = data\n-\n-    value_to_convert_data = mutable_data.get(value_to_convert)\n-    if isinstance(value_to_convert_data, list):\n-        return mutable_data\n-\n-    try:\n-        variations = ast.literal_eval(value_to_convert_data)\n-        mutable_data[value_to_convert] = variations\n-        return mutable_data\n-    except ValueError as e:\n-        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n-\n-# Serializer for ProjectService model\n-class ServicesSerializers_Project(serializers.ModelSerializer):\n-    class Meta:\n-        model = ProjectService\n-        fields = ['id', 'name', 'description', 'image']\n-\n-# Serializer for ProjectLink model\n-class ProjectLinkSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = ProjectLink\n-        fields = ['id', 'label', 'url']\n-\n-# List serializer for Project model\n-class ProjectListSerializers(serializers.ModelSerializer):\n-    project_service = ServicesSerializers_Project(many=True, read_only=True)\n-    project_link = ProjectLinkSerializer(many=True, read_only=True)\n-\n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n-\n-# Retrieve serializer for Project model\n-class ProjectRetrieveSerializers(serializers.ModelSerializer):\n-    project_service = ServicesSerializers_Project(many=True, read_only=True)\n-    project_link = ProjectLinkSerializer(many=True, read_only=True)\n-\n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n-\n-from rest_framework import serializers\n-from ..models import Project, ProjectService, ProjectLink\n-\n-class ProjectWriteSerializers(serializers.ModelSerializer):\n-    project_service = serializers.PrimaryKeyRelatedField(\n-        queryset=ProjectService.objects.all(),\n-        many=True,\n-        required=False\n-    )\n-    project_link = ProjectLinkSerializer(many=True, required=False)\n-\n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n-\n     def create(self, validated_data):\n-        # Extract nested data for services and links\n         project_service_data = validated_data.pop('project_service', [])\n         project_link_data = validated_data.pop('project_link', [])\n \n         # Create Project instance\n@@ -200,48 +88,39 @@\n             project.project_service.set(project_service_data)\n \n         # Add related ProjectLink instances\n         for link_data in project_link_data:\n-            # Check if 'id' is provided in link data for update\n             link_id = link_data.pop('id', None)\n             if link_id:\n-                # Update existing ProjectLink if ID is present\n                 ProjectLink.objects.filter(id=link_id).update(**link_data)\n                 project_link = ProjectLink.objects.get(id=link_id)\n             else:\n-                # Create new ProjectLink if no ID is present\n                 project_link = ProjectLink.objects.create(**link_data)\n \n             project.project_link.add(project_link)\n \n         return project\n \n     def update(self, instance, validated_data):\n-        # Extract nested data for services and links\n         project_service_data = validated_data.pop('project_service', [])\n         project_link_data = validated_data.pop('project_link', [])\n \n-        # Update Project instance fields\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n         instance.save()\n \n-        # Update related ProjectService instances\n         if project_service_data:\n             instance.project_service.set(project_service_data)\n \n-        # Update or create related ProjectLink instances\n         if project_link_data:\n             instance.project_link.clear()\n             for link_data in project_link_data:\n                 link_id = link_data.pop('id', None)\n                 if link_id:\n-                    # Update existing ProjectLink if ID is present\n                     ProjectLink.objects.filter(id=link_id).update(**link_data)\n                     project_link = ProjectLink.objects.get(id=link_id)\n                 else:\n-                    # Create new ProjectLink if no ID is present\n                     project_link = ProjectLink.objects.create(**link_data)\n \n                 instance.project_link.add(project_link)\n \n-        return instance\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729765512947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,21 +5,24 @@\n # Utility function to convert string to list\n def str_to_list(data, value_to_convert):\n     try:\n         mutable_data = data.dict()\n-    except Exception:\n+    except AttributeError:\n         mutable_data = data\n \n     value_to_convert_data = mutable_data.get(value_to_convert)\n     if isinstance(value_to_convert_data, list):\n         return mutable_data\n \n     try:\n         variations = ast.literal_eval(value_to_convert_data)\n-        mutable_data[value_to_convert] = variations\n+        if isinstance(variations, list):\n+            mutable_data[value_to_convert] = variations\n+        else:\n+            raise ValueError\n         return mutable_data\n-    except ValueError as e:\n-        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+    except (ValueError, SyntaxError) as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': 'Expected a list, but got invalid input.'}) from e\n \n # Serializer for ProjectService model\n class ServicesSerializers_Project(serializers.ModelSerializer):\n     class Meta:\n@@ -62,12 +65,17 @@\n         model = Project\n         fields = '__all__'\n \n     def to_internal_value(self, data):\n-        # Convert project_service to a list of integers if necessary\n+        # Convert 'project_service' from string to list if necessary\n+        data = str_to_list(data, 'project_service')\n+        \n+        # Convert 'project_link' from string to list if necessary\n+        data = str_to_list(data, 'project_link')\n+\n+        # Ensure project_service contains integers\n         project_service_data = data.get('project_service', [])\n         if isinstance(project_service_data, list):\n-            # Attempt to convert string values to integers\n             try:\n                 data['project_service'] = [int(service_id) for service_id in project_service_data]\n             except ValueError:\n                 raise serializers.ValidationError({\n@@ -122,5 +130,5 @@\n                     project_link = ProjectLink.objects.create(**link_data)\n \n                 instance.project_link.add(project_link)\n \n-        return instance\n\\ No newline at end of file\n+        return instance\n"
                },
                {
                    "date": 1729768536595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,4 +131,11 @@\n \n                 instance.project_link.add(project_link)\n \n         return instance\n+    \n+    def validate(self, data):\n+        # Check if the index already exists in another collection\n+        index = data.get('index')\n+        if Collection.objects.filter(index=index).exists():\n+            raise serializers.ValidationError({\"A collection with this index already exists.\"})\n+        return data\n"
                },
                {
                    "date": 1729768550640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n \n         return instance\n     \n     def validate(self, data):\n-        # Check if the index already exists in another collection\n-        index = data.get('index')\n-        if Collection.objects.filter(index=index).exists():\n-            raise serializers.ValidationError({\"A collection with this index already exists.\"})\n+        # Check if the position already exists in another collection\n+        position = data.get('position')\n+        if Project.objects.filter(position=position).exists():\n+            raise serializers.ValidationError({\"A collection with this position already exists.\"})\n         return data\n"
                },
                {
                    "date": 1729768574220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+from rest_framework import serializers\n+from ..models import Project, ProjectService, ProjectLink, ProjectGroup\n+import ast\n+\n+# Utility function to convert string to list\n+def str_to_list(data, value_to_convert):\n+    try:\n+        mutable_data = data.dict()\n+    except AttributeError:\n+        mutable_data = data\n+\n+    value_to_convert_data = mutable_data.get(value_to_convert)\n+    if isinstance(value_to_convert_data, list):\n+        return mutable_data\n+\n+    try:\n+        variations = ast.literal_eval(value_to_convert_data)\n+        if isinstance(variations, list):\n+            mutable_data[value_to_convert] = variations\n+        else:\n+            raise ValueError\n+        return mutable_data\n+    except (ValueError, SyntaxError) as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': 'Expected a list, but got invalid input.'}) from e\n+\n+# Serializer for ProjectService model\n+class ServicesSerializers_Project(serializers.ModelSerializer):\n+    class Meta:\n+        model = ProjectService\n+        fields = ['id', 'name', 'description', 'image']\n+\n+# Serializer for ProjectLink model\n+class ProjectLinkSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = ProjectLink\n+        fields = ['id', 'label', 'url']\n+\n+# List serializer for Project model\n+class ProjectListSerializers(serializers.ModelSerializer):\n+    project_service = ServicesSerializers_Project(many=True, read_only=True)\n+    project_link = ProjectLinkSerializer(many=True, read_only=True)\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n+# Retrieve serializer for Project model\n+class ProjectRetrieveSerializers(serializers.ModelSerializer):\n+    project_service = ServicesSerializers_Project(many=True, read_only=True)\n+    project_link = ProjectLinkSerializer(many=True, read_only=True)\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n+class ProjectWriteSerializers(serializers.ModelSerializer):\n+    project_service = serializers.PrimaryKeyRelatedField(\n+        queryset=ProjectService.objects.all(),\n+        many=True,\n+        required=False\n+    )\n+    project_link = ProjectLinkSerializer(many=True, required=False)\n+\n+    class Meta:\n+        model = Project\n+        fields = '__all__'\n+\n+    def to_internal_value(self, data):\n+        # Convert 'project_service' from string to list if necessary\n+        data = str_to_list(data, 'project_service')\n+        \n+        # Convert 'project_link' from string to list if necessary\n+        data = str_to_list(data, 'project_link')\n+\n+        # Ensure project_service contains integers\n+        project_service_data = data.get('project_service', [])\n+        if isinstance(project_service_data, list):\n+            try:\n+                data['project_service'] = [int(service_id) for service_id in project_service_data]\n+            except ValueError:\n+                raise serializers.ValidationError({\n+                    'project_service': 'Expected a list of integers for project_service.'\n+                })\n+\n+        return super().to_internal_value(data)\n+\n+    def create(self, validated_data):\n+        project_service_data = validated_data.pop('project_service', [])\n+        project_link_data = validated_data.pop('project_link', [])\n+\n+        # Create Project instance\n+        project = Project.objects.create(**validated_data)\n+\n+        # Add related ProjectService instances\n+        if project_service_data:\n+            project.project_service.set(project_service_data)\n+\n+        # Add related ProjectLink instances\n+        for link_data in project_link_data:\n+            link_id = link_data.pop('id', None)\n+            if link_id:\n+                ProjectLink.objects.filter(id=link_id).update(**link_data)\n+                project_link = ProjectLink.objects.get(id=link_id)\n+            else:\n+                project_link = ProjectLink.objects.create(**link_data)\n+\n+            project.project_link.add(project_link)\n+\n+        return project\n+\n+    def update(self, instance, validated_data):\n+        project_service_data = validated_data.pop('project_service', [])\n+        project_link_data = validated_data.pop('project_link', [])\n+\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n+\n+        if project_service_data:\n+            instance.project_service.set(project_service_data)\n+\n+        if project_link_data:\n+            instance.project_link.clear()\n+            for link_data in project_link_data:\n+                link_id = link_data.pop('id', None)\n+                if link_id:\n+                    ProjectLink.objects.filter(id=link_id).update(**link_data)\n+                    project_link = ProjectLink.objects.get(id=link_id)\n+                else:\n+                    project_link = ProjectLink.objects.create(**link_data)\n+\n+                instance.project_link.add(project_link)\n+\n+        return instance\n+    \n+    def validate(self, data):\n+        # Check if the position already exists in another collection\n+        position = data.get('position')\n+        if Project.objects.filter(position=position).exists():\n+            raise serializers.ValidationError({\"A collection with this position already exists.\"})\n+        return data\n"
                },
                {
                    "date": 1729847197058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,149 +28,10 @@\n     class Meta:\n         model = ProjectService\n         fields = ['id', 'name', 'description', 'image']\n \n-# Serializer for ProjectLink model\n-class ProjectLinkSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = ProjectLink\n-        fields = ['id', 'label', 'url']\n \n-# List serializer for Project model\n-class ProjectListSerializers(serializers.ModelSerializer):\n-    project_service = ServicesSerializers_Project(many=True, read_only=True)\n-    project_link = ProjectLinkSerializer(many=True, read_only=True)\n \n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n-\n-# Retrieve serializer for Project model\n-class ProjectRetrieveSerializers(serializers.ModelSerializer):\n-    project_service = ServicesSerializers_Project(many=True, read_only=True)\n-    project_link = ProjectLinkSerializer(many=True, read_only=True)\n-\n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n-\n-class ProjectWriteSerializers(serializers.ModelSerializer):\n-    project_service = serializers.PrimaryKeyRelatedField(\n-        queryset=ProjectService.objects.all(),\n-        many=True,\n-        required=False\n-    )\n-    project_link = ProjectLinkSerializer(many=True, required=False)\n-\n-    class Meta:\n-        model = Project\n-        fields = '__all__'\n-\n-    def to_internal_value(self, data):\n-        # Convert 'project_service' from string to list if necessary\n-        data = str_to_list(data, 'project_service')\n-        \n-        # Convert 'project_link' from string to list if necessary\n-        data = str_to_list(data, 'project_link')\n-\n-        # Ensure project_service contains integers\n-        project_service_data = data.get('project_service', [])\n-        if isinstance(project_service_data, list):\n-            try:\n-                data['project_service'] = [int(service_id) for service_id in project_service_data]\n-            except ValueError:\n-                raise serializers.ValidationError({\n-                    'project_service': 'Expected a list of integers for project_service.'\n-                })\n-\n-        return super().to_internal_value(data)\n-\n-    def create(self, validated_data):\n-        project_service_data = validated_data.pop('project_service', [])\n-        project_link_data = validated_data.pop('project_link', [])\n-\n-        # Create Project instance\n-        project = Project.objects.create(**validated_data)\n-\n-        # Add related ProjectService instances\n-        if project_service_data:\n-            project.project_service.set(project_service_data)\n-\n-        # Add related ProjectLink instances\n-        for link_data in project_link_data:\n-            link_id = link_data.pop('id', None)\n-            if link_id:\n-                ProjectLink.objects.filter(id=link_id).update(**link_data)\n-                project_link = ProjectLink.objects.get(id=link_id)\n-            else:\n-                project_link = ProjectLink.objects.create(**link_data)\n-\n-            project.project_link.add(project_link)\n-\n-        return project\n-\n-    def update(self, instance, validated_data):\n-        project_service_data = validated_data.pop('project_service', [])\n-        project_link_data = validated_data.pop('project_link', [])\n-\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n-\n-        if project_service_data:\n-            instance.project_service.set(project_service_data)\n-\n-        if project_link_data:\n-            instance.project_link.clear()\n-            for link_data in project_link_data:\n-                link_id = link_data.pop('id', None)\n-                if link_id:\n-                    ProjectLink.objects.filter(id=link_id).update(**link_data)\n-                    project_link = ProjectLink.objects.get(id=link_id)\n-                else:\n-                    project_link = ProjectLink.objects.create(**link_data)\n-\n-                instance.project_link.add(project_link)\n-\n-        return instance\n-    \n-    def validate(self, data):\n-        # Check if the position already exists in another collection\n-        position = data.get('position')\n-        if Project.objects.filter(position=position).exists():\n-            raise serializers.ValidationError({\"A collection with this position already exists.\"})\n-        return data\n-from rest_framework import serializers\n-from ..models import Project, ProjectService, ProjectLink, ProjectGroup\n-import ast\n-\n-# Utility function to convert string to list\n-def str_to_list(data, value_to_convert):\n-    try:\n-        mutable_data = data.dict()\n-    except AttributeError:\n-        mutable_data = data\n-\n-    value_to_convert_data = mutable_data.get(value_to_convert)\n-    if isinstance(value_to_convert_data, list):\n-        return mutable_data\n-\n-    try:\n-        variations = ast.literal_eval(value_to_convert_data)\n-        if isinstance(variations, list):\n-            mutable_data[value_to_convert] = variations\n-        else:\n-            raise ValueError\n-        return mutable_data\n-    except (ValueError, SyntaxError) as e:\n-        raise serializers.ValidationError({f'{value_to_convert}': 'Expected a list, but got invalid input.'}) from e\n-\n-# Serializer for ProjectService model\n-class ServicesSerializers_Project(serializers.ModelSerializer):\n-    class Meta:\n-        model = ProjectService\n-        fields = ['id', 'name', 'description', 'image']\n-\n # Serializer for ProjectLink model\n class ProjectLinkSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = ProjectLink\n"
                },
                {
                    "date": 1729847209731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,13 @@\n     class Meta:\n         model = ProjectService\n         fields = ['id', 'name', 'description', 'image']\n \n+class ProjectGroupSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = ProjectService\n+        fields = ['id', 'name', 'description', 'image']\n \n-\n # Serializer for ProjectLink model\n class ProjectLinkSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = ProjectLink\n"
                },
                {
                    "date": 1729847217068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         fields = ['id', 'name', 'description', 'image']\n \n class ProjectGroupSerializers(serializers.ModelSerializer):\n     class Meta:\n-        model = ProjectService\n+        model = ProjectGroup\n         fields = ['id', 'name', 'description', 'image']\n \n # Serializer for ProjectLink model\n class ProjectLinkSerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1729847240753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n class ProjectGroupSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = ProjectGroup\n         fields = ['id', 'name', 'description', 'image']\n+        fields = ['id', 'name', 'description', 'image']\n \n # Serializer for ProjectLink model\n class ProjectLinkSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1729847264094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n \n class ProjectGroupSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = ProjectGroup\n-        fields = ['id', 'name', 'description', 'image']\n-        fields = ['id', 'name', 'description', 'image']\n+        # fields = ['id', 'name', 'description', 'image']\n+        fields = ['id', 'name']\n \n # Serializer for ProjectLink model\n class ProjectLinkSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1729847297950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n class ProjectGroupSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = ProjectGroup\n         # fields = ['id', 'name', 'description', 'image']\n-        fields = ['id', 'name']\n+        fields = ['id', 'name','created_at']\n \n # Serializer for ProjectLink model\n class ProjectLinkSerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -42,8 +42,9 @@\n         fields = ['id', 'label', 'url']\n \n # List serializer for Project model\n class ProjectListSerializers(serializers.ModelSerializer):\n+    \n     project_service = ServicesSerializers_Project(many=True, read_only=True)\n     project_link = ProjectLinkSerializer(many=True, read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1729847303499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n         fields = ['id', 'label', 'url']\n \n # List serializer for Project model\n class ProjectListSerializers(serializers.ModelSerializer):\n-    \n+    group = \n     project_service = ServicesSerializers_Project(many=True, read_only=True)\n     project_link = ProjectLinkSerializer(many=True, read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1729847310797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n         fields = ['id', 'label', 'url']\n \n # List serializer for Project model\n class ProjectListSerializers(serializers.ModelSerializer):\n-    group = \n+    group = ProjectGroupSerializers(man)\n     project_service = ServicesSerializers_Project(many=True, read_only=True)\n     project_link = ProjectLinkSerializer(many=True, read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1729847316650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n         fields = ['id', 'label', 'url']\n \n # List serializer for Project model\n class ProjectListSerializers(serializers.ModelSerializer):\n-    group = ProjectGroupSerializers(man)\n+    group = ProjectGroupSerializers(read_)\n     project_service = ServicesSerializers_Project(many=True, read_only=True)\n     project_link = ProjectLinkSerializer(many=True, read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1729847324088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n         fields = ['id', 'label', 'url']\n \n # List serializer for Project model\n class ProjectListSerializers(serializers.ModelSerializer):\n-    group = ProjectGroupSerializers(read_)\n+    group = ProjectGroupSerializers(read_only=True)\n     project_service = ServicesSerializers_Project(many=True, read_only=True)\n     project_link = ProjectLinkSerializer(many=True, read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1729847345222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n         fields = '__all__'\n \n # Retrieve serializer for Project model\n class ProjectRetrieveSerializers(serializers.ModelSerializer):\n+    group = ProjectGroupSerializers(read_only=True)\n     project_service = ServicesSerializers_Project(many=True, read_only=True)\n     project_link = ProjectLinkSerializer(many=True, read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1729850427426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,12 @@\n         instance.save()\n \n         if project_service_data:\n             instance.project_service.set(project_service_data)\n+        \n+         Update media data if present\n+    if media_data:\n+        instance.media.set(media_data)\n \n         if project_link_data:\n             instance.project_link.clear()\n             for link_data in project_link_data:\n"
                },
                {
                    "date": 1729850436163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,11 +126,11 @@\n \n         if project_service_data:\n             instance.project_service.set(project_service_data)\n         \n-         Update media data if present\n-    if media_data:\n-        instance.media.set(media_data)\n+         #Update media data if present\n+        if media_data:\n+            instance.media.set(media_data)\n \n         if project_link_data:\n             instance.project_link.clear()\n             for link_data in project_link_data:\n"
                },
                {
                    "date": 1729850444562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n         if project_service_data:\n             instance.project_service.set(project_service_data)\n         \n          #Update media data if present\n-        if media_data:\n+        if media:\n             instance.media.set(media_data)\n \n         if project_link_data:\n             instance.project_link.clear()\n"
                },
                {
                    "date": 1729850456924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n         if project_service_data:\n             instance.project_service.set(project_service_data)\n         \n          #Update media data if present\n-        if media:\n+        if media_data:\n             instance.media.set(media_data)\n \n         if project_link_data:\n             instance.project_link.clear()\n"
                },
                {
                    "date": 1729850462444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,11 @@\n \n     def update(self, instance, validated_data):\n         project_service_data = validated_data.pop('project_service', [])\n         project_link_data = validated_data.pop('project_link', [])\n+        media_data = validated_data.pop('media', None)  # Pop media data if present\n \n+\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n         instance.save()\n \n"
                }
            ],
            "date": 1729762139180,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Project, ProjectService, ProjectLink\nimport ast\n\n# Utility function to convert string to list\ndef str_to_list(data, value_to_convert):\n    try:\n        mutable_data = data.dict()\n    except Exception:\n        mutable_data = data\n\n    value_to_convert_data = mutable_data.get(value_to_convert)\n    if isinstance(value_to_convert_data, list):\n        return mutable_data\n\n    try:\n        variations = ast.literal_eval(value_to_convert_data)\n        mutable_data[value_to_convert] = variations\n        return mutable_data\n    except ValueError as e:\n        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n\n# Service serializer for ProjectService model\nclass ServicesSerializers_Project(serializers.ModelSerializer):\n    class Meta:\n        model = ProjectService\n        fields = ['id', 'name', 'description', 'image']\n\n# Link serializer for ProjectLink model\nclass ProjectLinkSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ProjectLink\n        fields = ['id', 'name', 'url']\n\n# List serializer for Project model\nclass ProjectListSerializers(serializers.ModelSerializer):\n    project_service = ServicesSerializers_Project(many=True, read_only=True)\n    project_link = ProjectLinkSerializer(many=True, read_only=True, source='project')\n\n    class Meta:\n        model = Project\n        fields = '__all__'\n\n# Retrieve serializer for Project model\nclass ProjectRetrieveSerializers(serializers.ModelSerializer):\n    project_service = ServicesSerializers_Project(many=True, read_only=True)\n    project_link = ProjectLinkSerializer(many=True, read_only=True, source='project')\n\n    class Meta:\n        model = Project\n        fields = '__all__'\n\n# Write serializer for Project model with nested relations\nclass ProjectWriteSerializers(serializers.ModelSerializer):\n    project_service = ServicesSerializers_Project(many=True, required=False)\n    project_link = ProjectLinkSerializer(many=True, required=False, source='project')\n\n    def to_internal_value(self, data):\n        # Convert 'project_service' and 'project_link' to list if needed\n        if data.get('project_service'):\n            data = str_to_list(data, 'project_service')\n        if data.get('project_link'):\n            data = str_to_list(data, 'project_link')\n        return super().to_internal_value(data)\n\n    class Meta:\n        model = Project\n        fields = '__all__'\n\n    def create(self, validated_data):\n        # Extract nested data for services and links\n        project_service_data = validated_data.pop('project_service', [])\n        project_link_data = validated_data.pop('project', [])\n\n        # Create Project instance\n        project = Project.objects.create(**validated_data)\n\n        # Add related ProjectService instances\n        for service_data in project_service_data:\n            project_service, created = ProjectService.objects.get_or_create(**service_data)\n            project.project_service.add(project_service)\n\n        # Add related ProjectLink instances\n        for link_data in project_link_data:\n            ProjectLink.objects.create(project=project, **link_data)\n\n        return project\n\n    def update(self, instance, validated_data):\n        # Extract nested data for services and links\n        project_service_data = validated_data.pop('project_service', [])\n        project_link_data = validated_data.pop('project', [])\n\n        # Update Project instance fields\n        instance.name = validated_data.get('name', instance.name)\n        instance.description = validated_data.get('description', instance.description)\n        instance.group = validated_data.get('group', instance.group)\n        instance.image = validated_data.get('image', instance.image)\n        instance.media = validated_data.get('media', instance.media)\n        instance.save()\n\n        # Clear and add updated ProjectService instances\n        if project_service_data:\n            instance.project_service.clear()\n            for service_data in project_service_data:\n                project_service, created = ProjectService.objects.get_or_create(**service_data)\n                instance.project_service.add(project_service)\n\n        # Clear and add updated ProjectLink instances\n        if project_link_data:\n            instance.project.all().delete()\n            for link_data in project_link_data:\n                ProjectLink.objects.create(project=instance, **link_data)\n\n        return instance\n"
        }
    ]
}