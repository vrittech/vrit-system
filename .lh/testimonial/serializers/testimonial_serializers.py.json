{
    "sourceFile": "testimonial/serializers/testimonial_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1729853769423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729853782628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,6 +14,6 @@\n class TestimonialWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Testimonial\n         fields = '__all__'\n-        \n+    projects/serializers/projectservice_serializers.py    \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1729853795196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,6 +14,11 @@\n class TestimonialWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Testimonial\n         fields = '__all__'\n-    projects/serializers/projectservice_serializers.py    \n-    \n\\ No newline at end of file\n+        \n+     def validate(self, data):\n+        # Check if the position already exists in another collection\n+        position = data.get('position')\n+        if ProjectService.objects.filter(position=position).exists():\n+            raise serializers.ValidationError({\"A collection with this position already exists.\"})\n+        return data\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729853803587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n     class Meta:\n         model = Testimonial\n         fields = '__all__'\n         \n-     def validate(self, data):\n+    def validate(self, data):\n         # Check if the position already exists in another collection\n         position = data.get('position')\n-        if ProjectService.objects.filter(position=position).exists():\n+        if Testimonial.objects.filter(position=position).exists():\n             raise serializers.ValidationError({\"A collection with this position already exists.\"})\n         return data\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730266892804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,6 +19,6 @@\n     def validate(self, data):\n         # Check if the position already exists in another collection\n         position = data.get('position')\n         if Testimonial.objects.filter(position=position).exists():\n-            raise serializers.ValidationError({\"A collection with this position already exists.\"})\n+            raise serializers.ValidationError({\"A Testimonial with this position already exists.\"})\n         return data\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730266898541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,5 +20,25 @@\n         # Check if the position already exists in another collection\n         position = data.get('position')\n         if Testimonial.objects.filter(position=position).exists():\n             raise serializers.ValidationError({\"A Testimonial with this position already exists.\"})\n-        return data\n\\ No newline at end of file\n+        return data\n+    \n+     def update(self, instance, validated_data):\n+        image = validated_data.pop('image', None)\n+\n+        # Update instance fields if data is provided\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+\n+        # Handle the image field specifically\n+        if image is not None:\n+            if image == \"null\":\n+                # If image is set to 'null', delete the current image\n+                instance.image.delete(save=False)\n+                instance.image = None\n+            else:\n+                # If image data is sent, update it\n+                instance.image = image\n+\n+        instance.save()\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730272919956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,23 +22,23 @@\n         if Testimonial.objects.filter(position=position).exists():\n             raise serializers.ValidationError({\"A Testimonial with this position already exists.\"})\n         return data\n     \n-     def update(self, instance, validated_data):\n-        image = validated_data.pop('image', None)\n+    def update(self, instance, validated_data):\n+        # Handle the media field separately\n+        media = validated_data.pop('media', None)\n \n-        # Update instance fields if data is provided\n+        if media is not None:\n+            if media == \"null\":\n+                # If media is set to 'null', delete the current media\n+                instance.media.delete(save=False)\n+                instance.media = None\n+            else:\n+                # If media data is sent, update it\n+                instance.media = media\n+\n+        # Update other fields\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n \n-        # Handle the image field specifically\n-        if image is not None:\n-            if image == \"null\":\n-                # If image is set to 'null', delete the current image\n-                instance.image.delete(save=False)\n-                instance.image = None\n-            else:\n-                # If image data is sent, update it\n-                instance.image = image\n-\n         instance.save()\n         return instance\n\\ No newline at end of file\n"
                }
            ],
            "date": 1729853769423,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Testimonial\n\nclass TestimonialListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Testimonial\n        fields = '__all__'\n\nclass TestimonialRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Testimonial\n        fields = '__all__'\n\nclass TestimonialWriteSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Testimonial\n        fields = '__all__'\n        \n    "
        }
    ]
}