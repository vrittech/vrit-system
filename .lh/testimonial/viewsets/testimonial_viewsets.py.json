{
    "sourceFile": "testimonial/viewsets/testimonial_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1729851297677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729851305288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = Testimonial.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n-    ordering_fields = ['id','full_name']\n+    ordering_fields = ['id','full_name,'created_at]\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1729851312200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = Testimonial.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n-    ordering_fields = ['id','full_name,'created_at]\n+    ordering_fields = ['id','full_name','created_at']\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1729851338733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,11 @@\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id','full_name','created_at']\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1729851350966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n     ordering_fields = ['id','full_name','created_at']\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729851361612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     ordering_fields = ['id','full_name','created_at']\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'id': ['exact'],\n+        'ratings': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729851392231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id','full_name','created_at']\n+    \n \n     filterset_fields = {\n         'id': ['exact'],\n         'ratings': ['exact'],\n"
                },
                {
                    "date": 1729851405337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id','full_name','created_at']\n-    \n+    ( )\n \n     filterset_fields = {\n         'id': ['exact'],\n         'ratings': ['exact'],\n"
                },
                {
                    "date": 1729851410725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Testimonial.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n+    search_fields = ['id','full_name', 'role', 'position', 'ratings', 'testimonial', 'image', 'created_at', 'updated_at',]\n     ordering_fields = ['id','full_name','created_at']\n     ( )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1729851420909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','full_name', 'role', 'position', 'ratings', 'testimonial', 'image', 'created_at', 'updated_at',]\n     ordering_fields = ['id','full_name','created_at']\n-    ( )\n \n     filterset_fields = {\n         'id': ['exact'],\n         'ratings': ['exact'],\n"
                },
                {
                    "date": 1729851461690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,5 +35,7 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+    \n+    \n \n"
                },
                {
                    "date": 1729851483221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,11 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Testimonial\n from ..serializers.testimonial_serializers import TestimonialListSerializers, TestimonialRetrieveSerializers, TestimonialWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from django.db.models import Count\n+from rest_framework.response import Response\n \n class testimonialViewsets(viewsets.ModelViewSet):\n     serializer_class = TestimonialListSerializers\n     # permission_classes = [testimonialPermission]\n@@ -36,6 +39,50 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    \n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object \n+        goal = request.GET.get('goal')  # ID of the goal object \n \n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = Project.objects.get(id=target)\n+            goal_obj = Project.objects.get(id=goal)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_position = target_obj.position\n+        goal_position = goal_obj.position\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+            \n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+          # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position  # Place the target in the goal's position\n+            target_obj.save()\n+\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729851488622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         from rest_framework.response import Response\n \n         # Fetch the target and goal objects\n         try:\n-            target_obj = Project.objects.get(id=target)\n+            target_obj = Ter.objects.get(id=target)\n             goal_obj = Project.objects.get(id=goal)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n"
                },
                {
                    "date": 1729851494585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,10 @@\n         from rest_framework.response import Response\n \n         # Fetch the target and goal objects\n         try:\n-            target_obj = Ter.objects.get(id=target)\n-            goal_obj = Project.objects.get(id=goal)\n+            target_obj = Testimonial.objects.get(id=target)\n+            goal_obj = Testimonial.objects.get(id=goal)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         target_position = target_obj.position\n"
                },
                {
                    "date": 1729851522694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-testimonial\")\n     def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n@@ -50,17 +50,17 @@\n         # Fetch the target and goal objects\n         try:\n             target_obj = Testimonial.objects.get(id=target)\n             goal_obj = Testimonial.objects.get(id=goal)\n-        except Project.DoesNotExist:\n+        except Testimonial.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         target_position = target_obj.position\n         goal_position = goal_obj.position\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n+            affected_objs = Testimonial.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n             \n             # Decrement position of all affected objects\n             for obj in affected_objs:\n                 obj.position -= 1\n@@ -71,9 +71,9 @@\n             target_obj.save()\n \n         else:\n           # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n+            affected_objs = Testimonial.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n \n             # Increment position of all affected objects by 1\n             for obj in affected_objs:\n                 obj.position += 1\n"
                },
                {
                    "date": 1729851529523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-testimonial\")\n+    @action(detail=False, methods=['get'], name=\"draggableTestimonial\", url_path=\"drag-testimonial\")\n     def Draggable(self, request, *args, **kwargs):\n         target = request.GET.get('target')  # ID of the target object \n         goal = request.GET.get('goal')  # ID of the goal object \n \n"
                },
                {
                    "date": 1729851557281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     serializer_class = TestimonialListSerializers\n     # permission_classes = [testimonialPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = Testimonial.objects.all()\n+    queryset = Testimonial.objects.all().order_by\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','full_name', 'role', 'position', 'ratings', 'testimonial', 'image', 'created_at', 'updated_at',]\n     ordering_fields = ['id','full_name','created_at']\n"
                },
                {
                    "date": 1729851563254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     serializer_class = TestimonialListSerializers\n     # permission_classes = [testimonialPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = Testimonial.objects.all().order_by\n+    queryset = Testimonial.objects.all().order_by('-created_at')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','full_name', 'role', 'position', 'ratings', 'testimonial', 'image', 'created_at', 'updated_at',]\n     ordering_fields = ['id','full_name','created_at']\n"
                },
                {
                    "date": 1729851569406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     serializer_class = TestimonialListSerializers\n     # permission_classes = [testimonialPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = Testimonial.objects.all().order_by('-created_at')\n+    queryset = Testimonial.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','full_name', 'role', 'position', 'ratings', 'testimonial', 'image', 'created_at', 'updated_at',]\n     ordering_fields = ['id','full_name','created_at']\n"
                },
                {
                    "date": 1729851614604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'ratings': ['exact'],\n+        'ratings': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729851619740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'ratings': ['exact'],\n-        'ratings': ['exact'],\n+        'created_at': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729851625850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'ratings': ['exact'],\n-        'created_at': ['exact'],\n+        'created_at': ['exact','gte'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729851636648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'ratings': ['exact'],\n-        'created_at': ['exact','gte'],\n+        'created_at': ['exact','gte','lte'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1729853712065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,50 +40,6 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableTestimonial\", url_path=\"drag-testimonial\")\n-    def Draggable(self, request, *args, **kwargs):\n-        target = request.GET.get('target')  # ID of the target object \n-        goal = request.GET.get('goal')  # ID of the goal object \n+    projects/viewsets/project_viewsets.py\n \n-        from rest_framework.response import Response\n-\n-        # Fetch the target and goal objects\n-        try:\n-            target_obj = Testimonial.objects.get(id=target)\n-            goal_obj = Testimonial.objects.get(id=goal)\n-        except Testimonial.DoesNotExist:\n-            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n-\n-        target_position = target_obj.position\n-        goal_position = goal_obj.position\n-\n-        if target_position < goal_position:\n-            # Moving target down (target goes after goal)\n-            affected_objs = Testimonial.objects.filter(position__gt=target_position, position__lte=goal_position).order_by('position')\n-            \n-            # Decrement position of all affected objects\n-            for obj in affected_objs:\n-                obj.position -= 1\n-                obj.save()\n-            \n-            # Set target object's new position\n-            target_obj.position = goal_position\n-            target_obj.save()\n-\n-        else:\n-          # Moving target up (target goes before goal)\n-            affected_objs = Testimonial.objects.filter(position__lt=target_position, position__gte=goal_position).order_by('-position')\n-\n-            # Increment position of all affected objects by 1\n-            for obj in affected_objs:\n-                obj.position += 1\n-                obj.save()\n-\n-            # Set target object's new position (exact position of the goal)\n-            target_obj.position = goal_position  # Place the target in the goal's position\n-            target_obj.save()\n-\n-\n-        return Response({\"status\": \"success\"})\n-\n"
                },
                {
                    "date": 1729853720839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,6 +40,60 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    projects/viewsets/project_viewsets.py\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    def Draggable(self, request, *args, **kwargs):\n+        target_position = request.GET.get('target')  # Position of the target object\n+        goal_position = request.GET.get('goal')  # Position of the goal object\n \n+        from rest_framework.response import Response\n+\n+        if not target_position or not goal_position:\n+            return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n+\n+        # Convert to integers\n+        try:\n+            target_position = int(target_position)\n+            goal_position = int(goal_position)\n+        except ValueError:\n+            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n+\n+        # Fetch the target and goal objects based on position\n+        try:\n+            target_obj = Project.objects.get(position=target_position)\n+            goal_obj = Project.objects.get(position=goal_position)\n+        except Project.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        if target_position < goal_position:\n+            # Moving target down (target goes after goal)\n+            affected_objs = Project.objects.filter(\n+                position__gt=target_position, position__lte=goal_position\n+            ).order_by('position')\n+            \n+            # Decrement position of all affected objects\n+            for obj in affected_objs:\n+                obj.position -= 1\n+                obj.save()\n+\n+            # Set target object's new position\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        else:\n+            # Moving target up (target goes before goal)\n+            affected_objs = Project.objects.filter(\n+                position__lt=target_position, position__gte=goal_position\n+            ).order_by('-position')\n+\n+            # Increment position of all affected objects by 1\n+            for obj in affected_objs:\n+                obj.position += 1\n+                obj.save()\n+\n+            # Set target object's new position (exact position of the goal)\n+            target_obj.position = goal_position\n+            target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n+\n"
                },
                {
                    "date": 1729853726926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n             return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n         # Fetch the target and goal objects based on position\n         try:\n-            target_obj = Project.objects.get(position=target_position)\n+            target_obj = Test.objects.get(position=target_position)\n             goal_obj = Project.objects.get(position=goal_position)\n         except Project.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n"
                },
                {
                    "date": 1729853732257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,11 @@\n             return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n         # Fetch the target and goal objects based on position\n         try:\n-            target_obj = Test.objects.get(position=target_position)\n-            goal_obj = Project.objects.get(position=goal_position)\n-        except Project.DoesNotExist:\n+            target_obj = Testimonial.objects.get(position=target_position)\n+            goal_obj = Testimonial.objects.get(position=goal_position)\n+        except Testimonial.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n"
                },
                {
                    "date": 1729853741857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-project\")\n+    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-Testimonial\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n@@ -66,9 +66,9 @@\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Project.objects.filter(\n+            affected_objs = Testimonial.objects.filter(\n                 position__gt=target_position, position__lte=goal_position\n             ).order_by('position')\n             \n             # Decrement position of all affected objects\n@@ -81,9 +81,9 @@\n             target_obj.save()\n \n         else:\n             # Moving target up (target goes before goal)\n-            affected_objs = Project.objects.filter(\n+            affected_objs = Testimonial.objects.filter(\n                 position__lt=target_position, position__gte=goal_position\n             ).order_by('-position')\n \n             # Increment position of all affected objects by 1\n"
                },
                {
                    "date": 1729853749422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableProject\", url_path=\"drag-Testimonial\")\n+    @action(detail=False, methods=['get'], name=\"draggableTestimonial\", url_path=\"drag-testimonial\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n"
                },
                {
                    "date": 1731835094629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n     ordering_fields = ['id','full_name','created_at']\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n         'ratings': ['exact'],\n         'created_at': ['exact','gte','lte'],\n     }\n \n"
                },
                {
                    "date": 1731835099705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     ordering_fields = ['id','full_name','created_at']\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'id': ['exact'],\n+        'full_name': ['exact'],\n         'ratings': ['exact'],\n         'created_at': ['exact','gte','lte'],\n     }\n \n"
                }
            ],
            "date": 1729851297677,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import Testimonial\nfrom ..serializers.testimonial_serializers import TestimonialListSerializers, TestimonialRetrieveSerializers, TestimonialWriteSerializers\nfrom ..utilities.importbase import *\n\nclass testimonialViewsets(viewsets.ModelViewSet):\n    serializer_class = TestimonialListSerializers\n    # permission_classes = [testimonialPermission]\n    # authentication_classes = [JWTAuthentication]\n    pagination_class = MyPageNumberPagination\n    queryset = Testimonial.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id','full_name']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return TestimonialWriteSerializers\n        elif self.action == 'retrieve':\n            return TestimonialRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}