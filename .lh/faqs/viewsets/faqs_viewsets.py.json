{
    "sourceFile": "faqs/viewsets/faqs_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1729853223915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729853238428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,11 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Faqs\n from ..serializers.faqs_serializers import FaqsListSerializers, FaqsRetrieveSerializers, FaqsWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework.decorators import action\n \n class faqsViewsets(viewsets.ModelViewSet):\n     serializer_class = FaqsListSerializers\n     # permission_classes = [faqsPermission]\n"
                },
                {
                    "date": 1729853246415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n from ..serializers.faqs_serializers import FaqsListSerializers, FaqsRetrieveSerializers, FaqsWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from rest_framework.decorators import action\n \n class faqsViewsets(viewsets.ModelViewSet):\n     serializer_class = FaqsListSerializers\n     # permission_classes = [faqsPermission]\n@@ -57,9 +56,9 @@\n             return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n         # Fetch the target and goal objects based on position\n         try:\n-            target_obj = Clients.objects.get(position=target_position)\n+            target_obj = Fa.objects.get(position=target_position)\n             goal_obj = Clients.objects.get(position=goal_position)\n         except Clients.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n"
                },
                {
                    "date": 1729853251551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,10 @@\n             return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n \n         # Fetch the target and goal objects based on position\n         try:\n-            target_obj = Fa.objects.get(position=target_position)\n-            goal_obj = Clients.objects.get(position=goal_position)\n+            target_obj = Faqs.objects.get(position=target_position)\n+            goal_obj = Faqs.objects.get(position=goal_position)\n         except Clients.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n"
                },
                {
                    "date": 1729853273265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableClient\", url_path=\"drag-client\")\n+    @action(detail=False, methods=['get'], name=\"draggableFaq\", url_path=\"drag-client\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n@@ -58,14 +58,14 @@\n         # Fetch the target and goal objects based on position\n         try:\n             target_obj = Faqs.objects.get(position=target_position)\n             goal_obj = Faqs.objects.get(position=goal_position)\n-        except Clients.DoesNotExist:\n+        except Faqs.DoesNotExist:\n             return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n \n         if target_position < goal_position:\n             # Moving target down (target goes after goal)\n-            affected_objs = Clients.objects.filter(\n+            affected_objs = Faqs.objects.filter(\n                 position__gt=target_position, position__lte=goal_position\n             ).order_by('position')\n             \n             # Decrement position of all affected objects\n@@ -78,9 +78,9 @@\n             target_obj.save()\n \n         else:\n             # Moving target up (target goes before goal)\n-            affected_objs = Clients.objects.filter(\n+            affected_objs = Faqs.objects.filter(\n                 position__lt=target_position, position__gte=goal_position\n             ).order_by('-position')\n \n             # Increment position of all affected objects by 1\n"
                },
                {
                    "date": 1729853278435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"draggableFaq\", url_path=\"drag-client\")\n+    @action(detail=False, methods=['get'], name=\"draggableFaqs\", url_path=\"drag-faq\")\n     def Draggable(self, request, *args, **kwargs):\n         target_position = request.GET.get('target')  # Position of the target object\n         goal_position = request.GET.get('goal')  # Position of the goal object\n \n"
                },
                {
                    "date": 1730099156854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n+    \n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1730099162040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n-    \n+    # ('title', 'description', 'position=models.BigIntegerField(default', 'updated_at', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1730099187390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n-    # ('title', 'description', 'position=models.BigIntegerField(default', 'updated_at', )\n+    # ('title', 'description', 'position 'updated_at', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1730099205880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n-    # ('title', 'description', 'position 'updated_at', )\n+   \n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1730099212491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n-   \n+    # ('title', 'description', 'position', 'created_at', 'updated_at', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1730099221996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Faqs.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n+    search_fields = ['title', 'description', 'position', 'created_at', 'updated_at','id']\n     ordering_fields = ['id']\n     # ('title', 'description', 'position', 'created_at', 'updated_at', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1730099230382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,14 @@\n     queryset = Faqs.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title', 'description', 'position', 'created_at', 'updated_at','id']\n-    ordering_fields = ['id']\n+    ordering_fields = ['title', 'description', 'position', 'created_at', 'updated_at','id']\n     # ('title', 'description', 'position', 'created_at', 'updated_at', )\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1730099239038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n     # ('title', 'description', 'position', 'created_at', 'updated_at', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'title': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730099244573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'title': ['exact'],\n-        'id': ['exact'],\n+        'created_at': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730099251336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'title': ['exact'],\n         'created_at': ['exact'],\n+        'created_at': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730099258075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'title': ['exact'],\n-        'created_at': ['exact'],\n-        'created_at': ['exact'],\n+        'created_at': ['exact','gte'],\n+        'position': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1730099276650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     serializer_class = FaqsListSerializers\n     # permission_classes = [faqsPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = Faqs.objects.all()\n+    queryset = Faqs.objects.all().order_by\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title', 'description', 'position', 'created_at', 'updated_at','id']\n     ordering_fields = ['title', 'description', 'position', 'created_at', 'updated_at','id']\n@@ -21,9 +21,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'title': ['exact'],\n-        'created_at': ['exact','gte'],\n+        'created_at': ['exact','gte','lte'],\n         'position': ['exact'],\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1730099284622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     serializer_class = FaqsListSerializers\n     # permission_classes = [faqsPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = Faqs.objects.all().order_by\n+    queryset = Faqs.objects.all().order_by('position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title', 'description', 'position', 'created_at', 'updated_at','id']\n     ordering_fields = ['title', 'description', 'position', 'created_at', 'updated_at','id']\n"
                },
                {
                    "date": 1731843807057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     serializer_class = FaqsListSerializers\n     # permission_classes = [faqsPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = Faqs.objects.all().order_by('position')\n+    queryset = Faqs.objects.all().order_by('-position')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title', 'description', 'position', 'created_at', 'updated_at','id']\n     ordering_fields = ['title', 'description', 'position', 'created_at', 'updated_at','id']\n"
                }
            ],
            "date": 1729853223915,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import Faqs\nfrom ..serializers.faqs_serializers import FaqsListSerializers, FaqsRetrieveSerializers, FaqsWriteSerializers\nfrom ..utilities.importbase import *\n\nclass faqsViewsets(viewsets.ModelViewSet):\n    serializer_class = FaqsListSerializers\n    # permission_classes = [faqsPermission]\n    # authentication_classes = [JWTAuthentication]\n    pagination_class = MyPageNumberPagination\n    queryset = Faqs.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return FaqsWriteSerializers\n        elif self.action == 'retrieve':\n            return FaqsRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n    \n    @action(detail=False, methods=['get'], name=\"draggableClient\", url_path=\"drag-client\")\n    def Draggable(self, request, *args, **kwargs):\n        target_position = request.GET.get('target')  # Position of the target object\n        goal_position = request.GET.get('goal')  # Position of the goal object\n\n        from rest_framework.response import Response\n\n        if not target_position or not goal_position:\n            return Response({\"error\": \"Target or Goal position not provided\"}, status=400)\n\n        # Convert to integers\n        try:\n            target_position = int(target_position)\n            goal_position = int(goal_position)\n        except ValueError:\n            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n\n        # Fetch the target and goal objects based on position\n        try:\n            target_obj = Clients.objects.get(position=target_position)\n            goal_obj = Clients.objects.get(position=goal_position)\n        except Clients.DoesNotExist:\n            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n\n        if target_position < goal_position:\n            # Moving target down (target goes after goal)\n            affected_objs = Clients.objects.filter(\n                position__gt=target_position, position__lte=goal_position\n            ).order_by('position')\n            \n            # Decrement position of all affected objects\n            for obj in affected_objs:\n                obj.position -= 1\n                obj.save()\n\n            # Set target object's new position\n            target_obj.position = goal_position\n            target_obj.save()\n\n        else:\n            # Moving target up (target goes before goal)\n            affected_objs = Clients.objects.filter(\n                position__lt=target_position, position__gte=goal_position\n            ).order_by('-position')\n\n            # Increment position of all affected objects by 1\n            for obj in affected_objs:\n                obj.position += 1\n                obj.save()\n\n            # Set target object's new position (exact position of the goal)\n            target_obj.position = goal_position\n            target_obj.save()\n\n        return Response({\"status\": \"success\"})\n\n"
        }
    ]
}