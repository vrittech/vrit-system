{
    "sourceFile": "notifications/viewsets/notification_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1731494502469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731494514098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Notification\n from ..serializers.notification_serializers import NotificationListSerializers, NotificationRetrieveSerializers, NotificationWriteSerializers\n from ..utilities.importbase import *\n-\n+from rest_framework import viewsets, permissions\n+from rest_framework.response import Response\n+from rest_framework.decorators import action\n class notificationViewsets(viewsets.ModelViewSet):\n     serializer_class = NotificationListSerializers\n     # permission_classes = [notificationsPermission]\n     # authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1731494522146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n from ..utilities.importbase import *\n from rest_framework import viewsets, permissions\n from rest_framework.response import Response\n from rest_framework.decorators import action\n+\n+\n class notificationViewsets(viewsets.ModelViewSet):\n     serializer_class = NotificationListSerializers\n     # permission_classes = [notificationsPermission]\n     # authentication_classes = [JWTAuthentication]\n@@ -23,9 +25,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset.filter(user_id=self.request.user.id)\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return NotificationWriteSerializers\n"
                },
                {
                    "date": 1731494528886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return NotificationWriteSerializers\n"
                },
                {
                    "date": 1731496975960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,54 @@\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Notification\n-from ..serializers.notification_serializers import NotificationListSerializers, NotificationRetrieveSerializers, NotificationWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework import viewsets, permissions\n-from rest_framework.response import Response\n-from rest_framework.decorators import action\n+# from rest_framework import viewsets\n+# from rest_framework.filters import SearchFilter, OrderingFilter\n+# from django_filters.rest_framework import DjangoFilterBackend\n+# from ..models import Notification\n+# from ..serializers.notification_serializers import NotificationListSerializers, NotificationRetrieveSerializers, NotificationWriteSerializers\n+# from ..utilities.importbase import *\n+# from rest_framework import viewsets, permissions\n+# from rest_framework.response import Response\n+# from rest_framework.decorators import action\n \n \n-class notificationViewsets(viewsets.ModelViewSet):\n-    serializer_class = NotificationListSerializers\n-    # permission_classes = [notificationsPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n-    queryset = Notification.objects.all()\n+# class notificationViewsets(viewsets.ModelViewSet):\n+#     serializer_class = NotificationListSerializers\n+#     # permission_classes = [notificationsPermission]\n+#     # authentication_classes = [JWTAuthentication]\n+#     #pagination_class = MyPageNumberPagination\n+#     queryset = Notification.objects.all()\n \n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n+#     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+#     search_fields = ['id']\n+#     ordering_fields = ['id']\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+#     # filterset_fields = {\n+#     #     'id': ['exact'],\n+#     # }\n \n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n+#     def get_queryset(self):\n+#         queryset = super().get_queryset()\n+#         return queryset\n \n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return NotificationWriteSerializers\n-        elif self.action == 'retrieve':\n-            return NotificationRetrieveSerializers\n-        return super().get_serializer_class()\n+#     def get_serializer_class(self):\n+#         if self.action in ['create', 'update', 'partial_update']:\n+#             return NotificationWriteSerializers\n+#         elif self.action == 'retrieve':\n+#             return NotificationRetrieveSerializers\n+#         return super().get_serializer_class()\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n+#     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+#     # def action_name(self, request, *args, **kwargs):\n+#     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['post'], url_path='mark-as-read')\n-    def mark_as_read(self, request):\n-        # Mark specific notifications as read\n-        notification_ids = request.data.get('ids', [])\n-        self.request.user.notifications.filter(id__in=notification_ids).update(is_read=True)\n-        return Response({\"status\": \"Notifications marked as read\"})\n+#     @action(detail=False, methods=['post'], url_path='mark-as-read')\n+#     def mark_as_read(self, request):\n+#         # Mark specific notifications as read\n+#         notification_ids = request.data.get('ids', [])\n+#         self.request.user.notifications.filter(id__in=notification_ids).update(is_read=True)\n+#         return Response({\"status\": \"Notifications marked as read\"})\n \n-    @action(detail=False, methods=['post'], url_path='mark-all-as-read')\n-    def mark_all_as_read(self, request):\n-        # Mark all unread notifications as read for the user\n-        self.request.user.notifications.update(is_read=True)\n-        return Response({\"status\": \"All notifications marked as read\"})\n+#     @action(detail=False, methods=['post'], url_path='mark-all-as-read')\n+#     def mark_all_as_read(self, request):\n+#         # Mark all unread notifications as read for the user\n+#         self.request.user.notifications.update(is_read=True)\n+#         return Response({\"status\": \"All notifications marked as read\"})\n \n"
                }
            ],
            "date": 1731494502469,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import Notification\nfrom ..serializers.notification_serializers import NotificationListSerializers, NotificationRetrieveSerializers, NotificationWriteSerializers\nfrom ..utilities.importbase import *\n\nclass notificationViewsets(viewsets.ModelViewSet):\n    serializer_class = NotificationListSerializers\n    # permission_classes = [notificationsPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = Notification.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return NotificationWriteSerializers\n        elif self.action == 'retrieve':\n            return NotificationRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n    \n    @action(detail=False, methods=['post'], url_path='mark-as-read')\n    def mark_as_read(self, request):\n        # Mark specific notifications as read\n        notification_ids = request.data.get('ids', [])\n        self.request.user.notifications.filter(id__in=notification_ids).update(is_read=True)\n        return Response({\"status\": \"Notifications marked as read\"})\n\n    @action(detail=False, methods=['post'], url_path='mark-all-as-read')\n    def mark_all_as_read(self, request):\n        # Mark all unread notifications as read for the user\n        self.request.user.notifications.update(is_read=True)\n        return Response({\"status\": \"All notifications marked as read\"})\n\n"
        }
    ]
}