{
    "sourceFile": "notifications/signals.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1731494351249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731494359404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from django.db.models.signals import post_save\n from django.dispatch import receiver\n from .models import Blog  # Example model\n-from .notification_models import Notification  # Adjust path as needed\n+from ..m import Notification  # Adjust path as needed\n from django.contrib.auth.models import Permission, User\n \n @receiver(post_save, sender=Blog)\n def create_blog_notification(sender, instance, created, **kwargs):\n"
                },
                {
                    "date": 1731494368267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from django.db.models.signals import post_save\n from django.dispatch import receiver\n from .models import Blog  # Example model\n-from ..m import Notification  # Adjust path as needed\n+from .models import Notification  \n from django.contrib.auth.models import Permission, User\n \n @receiver(post_save, sender=Blog)\n def create_blog_notification(sender, instance, created, **kwargs):\n"
                },
                {
                    "date": 1731494671944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,52 @@\n+# signals.py in notifications app\n from django.db.models.signals import post_save\n from django.dispatch import receiver\n-from .models import Blog  # Example model\n-from .models import Notification  \n from django.contrib.auth.models import Permission, User\n+from django.apps import apps\n+from .models import Notification\n \n-@receiver(post_save, sender=Blog)\n-def create_blog_notification(sender, instance, created, **kwargs):\n-    if created:\n-        # Identify users with permission to view this module\n-        view_permission = Permission.objects.get(codename='view_blog')\n-        users_with_permission = User.objects.filter(user_permissions=view_permission)\n+MODEL_MAP = {\n+    'project': ('projects', 'Project'),\n+    'project-service': ('projects', 'ProjectService'),\n+    'project-group': ('projects', 'ProjectGroup'),\n+    'blog': ('blog', 'Blog'),\n+    'career': ('career', 'Career'),\n+    'case-study': ('casestudy', 'CaseStudy'),\n+    'clients': ('clients', 'Clients'),\n+    'faqs': ('faqs', 'Faq'),\n+    'forms': ('forms', 'Form'),\n+    'forms-category': ('forms', 'Category'),\n+    'plan': ('plan', 'Plan'),\n+    'testimonial': ('testimonial', 'Testimonial'),\n+    'department': ('department', 'Department'),\n+    'gallery': ('gallery', 'Gallery'),\n+    'social-media': ('socialmedia', 'SocialMedia'),\n+    'role': ('accounts', 'Group'),\n+}\n \n-        # Create a notification for these users\n-        notification = Notification.objects.create(\n-            title=\"New Blog Post Added\",\n-            message=f\"A new blog post titled '{instance.title}' was added.\",\n-            module_name=\"Blog\"\n-        )\n+@receiver(post_save)\n+def create_notification_for_mapped_models(sender, instance, created, **kwargs):\n+    # Identify app label and model name from the instance\n+    app_label = instance._meta.app_label\n+    model_name = instance._meta.model_name\n \n-        # Assign the notification to users\n-        notification.users.set(users_with_permission)\n+    # Loop through MODEL_MAP to check if the instance matches any entry\n+    for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n+        if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n+            if created:\n+                # Prepare the notification title and message\n+                title = f\"New {mapped_model_name} Added\"\n+                message = f\"A new {mapped_model_name} item was added in the {app_label} module.\"\n+\n+                # Find users with view permissions for this model\n+                permission_codename = f'view_{model_name.lower()}'\n+                view_permission = Permission.objects.filter(codename=permission_codename)\n+                users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n+\n+                # Create and assign the notification\n+                notification = Notification.objects.create(\n+                    title=title,\n+                    message=message,\n+                    module_name=app_label\n+                )\n+                notification.users.set(users_with_permission)\n"
                },
                {
                    "date": 1731495011458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n # signals.py in notifications app\n-from django.db.models.signals import post_save\n+from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from django.contrib.auth.models import Permission, User\n from django.apps import apps\n from .models import Notification\n@@ -23,30 +23,62 @@\n     'social-media': ('socialmedia', 'SocialMedia'),\n     'role': ('accounts', 'Group'),\n }\n \n+def notify_users(action, instance, module_name, model_name):\n+    \"\"\"\n+    Helper function to create notifications for users based on the action type.\n+    \"\"\"\n+    # Define messages based on action\n+    action_messages = {\n+        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n+        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n+        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n+    }\n+\n+    # Prepare notification details\n+    title = f\"{model_name.capitalize()} {action.capitalize()}\"\n+    message = action_messages[action]\n+\n+    # Find users with view permission for this model\n+    permission_codename = f'view_{model_name.lower()}'\n+    view_permission = Permission.objects.filter(codename=permission_codename)\n+    users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n+\n+    # Create and assign the notification\n+    notification = Notification.objects.create(\n+        title=title,\n+        message=message,\n+        module_name=module_name\n+    )\n+    notification.users.set(users_with_permission)\n+\n @receiver(post_save)\n-def create_notification_for_mapped_models(sender, instance, created, **kwargs):\n+def create_or_update_notification(sender, instance, created, **kwargs):\n+    \"\"\"\n+    Signal handler for create and update events.\n+    \"\"\"\n     # Identify app label and model name from the instance\n     app_label = instance._meta.app_label\n     model_name = instance._meta.model_name\n \n     # Loop through MODEL_MAP to check if the instance matches any entry\n     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n-            if created:\n-                # Prepare the notification title and message\n-                title = f\"New {mapped_model_name} Added\"\n-                message = f\"A new {mapped_model_name} item was added in the {app_label} module.\"\n+            # Determine action type\n+            action = 'created' if created else 'updated'\n+            notify_users(action, instance, app_label, model_name)\n \n-                # Find users with view permissions for this model\n-                permission_codename = f'view_{model_name.lower()}'\n-                view_permission = Permission.objects.filter(codename=permission_codename)\n-                users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n+@receiver(post_delete)\n+def delete_notification(sender, instance, **kwargs):\n+    \"\"\"\n+    Signal handler for delete events.\n+    \"\"\"\n+    # Identify app label and model name from the instance\n+    app_label = instance._meta.app_label\n+    model_name = instance._meta.model_name\n \n-                # Create and assign the notification\n-                notification = Notification.objects.create(\n-                    title=title,\n-                    message=message,\n-                    module_name=app_label\n-                )\n-                notification.users.set(users_with_permission)\n+    # Loop through MODEL_MAP to check if the instance matches any entry\n+    for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n+        if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n+            # Call notify_users for deletion\n+            notify_users('deleted', instance, app_label, model_name)\n"
                },
                {
                    "date": 1731496965600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,84 @@\n-# signals.py in notifications app\n-from django.db.models.signals import post_save, post_delete\n-from django.dispatch import receiver\n-from django.contrib.auth.models import Permission, User\n-from django.apps import apps\n-from .models import Notification\n+# # signals.py in notifications app\n+# from django.db.models.signals import post_save, post_delete\n+# from django.dispatch import receiver\n+# from django.contrib.auth.models import Permission, User\n+# from django.apps import apps\n+# from .models import Notification\n \n-MODEL_MAP = {\n-    'project': ('projects', 'Project'),\n-    'project-service': ('projects', 'ProjectService'),\n-    'project-group': ('projects', 'ProjectGroup'),\n-    'blog': ('blog', 'Blog'),\n-    'career': ('career', 'Career'),\n-    'case-study': ('casestudy', 'CaseStudy'),\n-    'clients': ('clients', 'Clients'),\n-    'faqs': ('faqs', 'Faq'),\n-    'forms': ('forms', 'Form'),\n-    'forms-category': ('forms', 'Category'),\n-    'plan': ('plan', 'Plan'),\n-    'testimonial': ('testimonial', 'Testimonial'),\n-    'department': ('department', 'Department'),\n-    'gallery': ('gallery', 'Gallery'),\n-    'social-media': ('socialmedia', 'SocialMedia'),\n-    'role': ('accounts', 'Group'),\n-}\n+# MODEL_MAP = {\n+#     'project': ('projects', 'Project'),\n+#     'project-service': ('projects', 'ProjectService'),\n+#     'project-group': ('projects', 'ProjectGroup'),\n+#     'blog': ('blog', 'Blog'),\n+#     'career': ('career', 'Career'),\n+#     'case-study': ('casestudy', 'CaseStudy'),\n+#     'clients': ('clients', 'Clients'),\n+#     'faqs': ('faqs', 'Faq'),\n+#     'forms': ('forms', 'Form'),\n+#     'forms-category': ('forms', 'Category'),\n+#     'plan': ('plan', 'Plan'),\n+#     'testimonial': ('testimonial', 'Testimonial'),\n+#     'department': ('department', 'Department'),\n+#     'gallery': ('gallery', 'Gallery'),\n+#     'social-media': ('socialmedia', 'SocialMedia'),\n+#     'role': ('accounts', 'Group'),\n+# }\n \n-def notify_users(action, instance, module_name, model_name):\n-    \"\"\"\n-    Helper function to create notifications for users based on the action type.\n-    \"\"\"\n-    # Define messages based on action\n-    action_messages = {\n-        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n-        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n-        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n-    }\n+# def notify_users(action, instance, module_name, model_name):\n+#     \"\"\"\n+#     Helper function to create notifications for users based on the action type.\n+#     \"\"\"\n+#     # Define messages based on action\n+#     action_messages = {\n+#         'created': f\"A new {model_name} item was added in the {module_name} module.\",\n+#         'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n+#         'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n+#     }\n \n-    # Prepare notification details\n-    title = f\"{model_name.capitalize()} {action.capitalize()}\"\n-    message = action_messages[action]\n+#     # Prepare notification details\n+#     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n+#     message = action_messages[action]\n \n-    # Find users with view permission for this model\n-    permission_codename = f'view_{model_name.lower()}'\n-    view_permission = Permission.objects.filter(codename=permission_codename)\n-    users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n+#     # Find users with view permission for this model\n+#     permission_codename = f'view_{model_name.lower()}'\n+#     view_permission = Permission.objects.filter(codename=permission_codename)\n+#     users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n \n-    # Create and assign the notification\n-    notification = Notification.objects.create(\n-        title=title,\n-        message=message,\n-        module_name=module_name\n-    )\n-    notification.users.set(users_with_permission)\n+#     # Create and assign the notification\n+#     notification = Notification.objects.create(\n+#         title=title,\n+#         message=message,\n+#         module_name=module_name\n+#     )\n+#     notification.users.set(users_with_permission)\n \n-@receiver(post_save)\n-def create_or_update_notification(sender, instance, created, **kwargs):\n-    \"\"\"\n-    Signal handler for create and update events.\n-    \"\"\"\n-    # Identify app label and model name from the instance\n-    app_label = instance._meta.app_label\n-    model_name = instance._meta.model_name\n+# @receiver(post_save)\n+# def create_or_update_notification(sender, instance, created, **kwargs):\n+#     \"\"\"\n+#     Signal handler for create and update events.\n+#     \"\"\"\n+#     # Identify app label and model name from the instance\n+#     app_label = instance._meta.app_label\n+#     model_name = instance._meta.model_name\n \n-    # Loop through MODEL_MAP to check if the instance matches any entry\n-    for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n-        if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n-            # Determine action type\n-            action = 'created' if created else 'updated'\n-            notify_users(action, instance, app_label, model_name)\n+#     # Loop through MODEL_MAP to check if the instance matches any entry\n+#     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n+#         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n+#             # Determine action type\n+#             action = 'created' if created else 'updated'\n+#             notify_users(action, instance, app_label, model_name)\n \n-@receiver(post_delete)\n-def delete_notification(sender, instance, **kwargs):\n-    \"\"\"\n-    Signal handler for delete events.\n-    \"\"\"\n-    # Identify app label and model name from the instance\n-    app_label = instance._meta.app_label\n-    model_name = instance._meta.model_name\n+# @receiver(post_delete)\n+# def delete_notification(sender, instance, **kwargs):\n+#     \"\"\"\n+#     Signal handler for delete events.\n+#     \"\"\"\n+#     # Identify app label and model name from the instance\n+#     app_label = instance._meta.app_label\n+#     model_name = instance._meta.model_name\n \n-    # Loop through MODEL_MAP to check if the instance matches any entry\n-    for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n-        if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n-            # Call notify_users for deletion\n-            notify_users('deleted', instance, app_label, model_name)\n+#     # Loop through MODEL_MAP to check if the instance matches any entry\n+#     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n+#         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n+#             # Call notify_users for deletion\n+#             notify_users('deleted', instance, app_label, model_name)\n"
                },
                {
                    "date": 1731497304724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,84 @@\n-# # signals.py in notifications app\n-# from django.db.models.signals import post_save, post_delete\n-# from django.dispatch import receiver\n-# from django.contrib.auth.models import Permission, User\n-# from django.apps import apps\n-# from .models import Notification\n+# signals.py in notifications app\n+from django.db.models.signals import post_save, post_delete\n+from django.dispatch import receiver\n+from django.contrib.auth.models import Permission, User\n+from django.apps import apps\n+from .models import Notification\n \n-# MODEL_MAP = {\n-#     'project': ('projects', 'Project'),\n-#     'project-service': ('projects', 'ProjectService'),\n-#     'project-group': ('projects', 'ProjectGroup'),\n-#     'blog': ('blog', 'Blog'),\n-#     'career': ('career', 'Career'),\n-#     'case-study': ('casestudy', 'CaseStudy'),\n-#     'clients': ('clients', 'Clients'),\n-#     'faqs': ('faqs', 'Faq'),\n-#     'forms': ('forms', 'Form'),\n-#     'forms-category': ('forms', 'Category'),\n-#     'plan': ('plan', 'Plan'),\n-#     'testimonial': ('testimonial', 'Testimonial'),\n-#     'department': ('department', 'Department'),\n-#     'gallery': ('gallery', 'Gallery'),\n-#     'social-media': ('socialmedia', 'SocialMedia'),\n-#     'role': ('accounts', 'Group'),\n-# }\n+MODEL_MAP = {\n+    'project': ('projects', 'Project'),\n+    'project-service': ('projects', 'ProjectService'),\n+    'project-group': ('projects', 'ProjectGroup'),\n+    'blog': ('blog', 'Blog'),\n+    'career': ('career', 'Career'),\n+    'case-study': ('casestudy', 'CaseStudy'),\n+    'clients': ('clients', 'Clients'),\n+    'faqs': ('faqs', 'Faq'),\n+    'forms': ('forms', 'Form'),\n+    'forms-category': ('forms', 'Category'),\n+    'plan': ('plan', 'Plan'),\n+    'testimonial': ('testimonial', 'Testimonial'),\n+    'department': ('department', 'Department'),\n+    'gallery': ('gallery', 'Gallery'),\n+    'social-media': ('socialmedia', 'SocialMedia'),\n+    'role': ('accounts', 'Group'),\n+}\n \n-# def notify_users(action, instance, module_name, model_name):\n-#     \"\"\"\n-#     Helper function to create notifications for users based on the action type.\n-#     \"\"\"\n-#     # Define messages based on action\n-#     action_messages = {\n-#         'created': f\"A new {model_name} item was added in the {module_name} module.\",\n-#         'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n-#         'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n-#     }\n+def notify_users(action, instance, module_name, model_name):\n+    \"\"\"\n+    Helper function to create notifications for users based on the action type.\n+    \"\"\"\n+    # Define messages based on action\n+    action_messages = {\n+        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n+        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n+        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n+    }\n \n-#     # Prepare notification details\n-#     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n-#     message = action_messages[action]\n+    # Prepare notification details\n+    title = f\"{model_name.capitalize()} {action.capitalize()}\"\n+    message = action_messages[action]\n \n-#     # Find users with view permission for this model\n-#     permission_codename = f'view_{model_name.lower()}'\n-#     view_permission = Permission.objects.filter(codename=permission_codename)\n-#     users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n+    # Find users with view permission for this model\n+    permission_codename = f'view_{model_name.lower()}'\n+    view_permission = Permission.objects.filter(codename=permission_codename)\n+    users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n \n-#     # Create and assign the notification\n-#     notification = Notification.objects.create(\n-#         title=title,\n-#         message=message,\n-#         module_name=module_name\n-#     )\n-#     notification.users.set(users_with_permission)\n+    # Create and assign the notification\n+    notification = Notification.objects.create(\n+        title=title,\n+        message=message,\n+        module_name=module_name\n+    )\n+    notification.users.set(users_with_permission)\n \n-# @receiver(post_save)\n-# def create_or_update_notification(sender, instance, created, **kwargs):\n-#     \"\"\"\n-#     Signal handler for create and update events.\n-#     \"\"\"\n-#     # Identify app label and model name from the instance\n-#     app_label = instance._meta.app_label\n-#     model_name = instance._meta.model_name\n+@receiver(post_save)\n+def create_or_update_notification(sender, instance, created, **kwargs):\n+    \"\"\"\n+    Signal handler for create and update events.\n+    \"\"\"\n+    # Identify app label and model name from the instance\n+    app_label = instance._meta.app_label\n+    model_name = instance._meta.model_name\n \n-#     # Loop through MODEL_MAP to check if the instance matches any entry\n-#     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n-#         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n-#             # Determine action type\n-#             action = 'created' if created else 'updated'\n-#             notify_users(action, instance, app_label, model_name)\n+    # Loop through MODEL_MAP to check if the instance matches any entry\n+    for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n+        if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n+            # Determine action type\n+            action = 'created' if created else 'updated'\n+            notify_users(action, instance, app_label, model_name)\n \n-# @receiver(post_delete)\n-# def delete_notification(sender, instance, **kwargs):\n-#     \"\"\"\n-#     Signal handler for delete events.\n-#     \"\"\"\n-#     # Identify app label and model name from the instance\n-#     app_label = instance._meta.app_label\n-#     model_name = instance._meta.model_name\n+@receiver(post_delete)\n+def delete_notification(sender, instance, **kwargs):\n+    \"\"\"\n+    Signal handler for delete events.\n+    \"\"\"\n+    # Identify app label and model name from the instance\n+    app_label = instance._meta.app_label\n+    model_name = instance._meta.model_name\n \n-#     # Loop through MODEL_MAP to check if the instance matches any entry\n-#     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n-#         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n-#             # Call notify_users for deletion\n-#             notify_users('deleted', instance, app_label, model_name)\n+    # Loop through MODEL_MAP to check if the instance matches any entry\n+    for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n+        if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n+            # Call notify_users for deletion\n+            notify_users('deleted', instance, app_label, model_name)\n"
                },
                {
                    "date": 1731497321846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n # signals.py in notifications app\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n-from django.contrib.auth.models import Permission, User\n+from django.contrib.auth.models import Permission, Cus\n from django.apps import apps\n from .models import Notification\n \n MODEL_MAP = {\n"
                },
                {
                    "date": 1731497327272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n # signals.py in notifications app\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n-from django.contrib.auth.models import Permission, Cus\n+from django.contrib.auth.models import Permission\n+from \n from django.apps import apps\n from .models import Notification\n \n MODEL_MAP = {\n"
                },
                {
                    "date": 1731497338633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # signals.py in notifications app\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from django.contrib.auth.models import Permission\n-from \n+from accounts.models import CustomUser\n from django.apps import apps\n from .models import Notification\n \n MODEL_MAP = {\n"
                },
                {
                    "date": 1731497355818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # signals.py in notifications app\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from django.contrib.auth.models import Permission\n-from accounts.models import CustomUser\n+from accounts.models import CustomCustomUser\n from django.apps import apps\n from .models import Notification\n \n MODEL_MAP = {\n"
                },
                {
                    "date": 1731497362609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # signals.py in notifications app\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from django.contrib.auth.models import Permission\n-from accounts.models import CustomCustomUser\n+from accounts.models import CustomCustomCustomCustomCustomUser\n from django.apps import apps\n from .models import Notification\n \n MODEL_MAP = {\n@@ -42,9 +42,9 @@\n \n     # Find users with view permission for this model\n     permission_codename = f'view_{model_name.lower()}'\n     view_permission = Permission.objects.filter(codename=permission_codename)\n-    users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n+    users_with_permission = CustomCustomCustomUser.objects.filter(user_permissions__in=view_permission)\n \n     # Create and assign the notification\n     notification = Notification.objects.create(\n         title=title,\n"
                },
                {
                    "date": 1731497375885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # signals.py in notifications app\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from django.contrib.auth.models import Permission\n-from accounts.models import CustomCustomCustomCustomCustomUser\n+from accounts.models import CustomUser\n from django.apps import apps\n from .models import Notification\n \n MODEL_MAP = {\n@@ -42,9 +42,9 @@\n \n     # Find users with view permission for this model\n     permission_codename = f'view_{model_name.lower()}'\n     view_permission = Permission.objects.filter(codename=permission_codename)\n-    users_with_permission = CustomCustomCustomUser.objects.filter(user_permissions__in=view_permission)\n+    users_with_permission = CustomUser.objects.filter(user_permissions__in=view_permission)\n \n     # Create and assign the notification\n     notification = Notification.objects.create(\n         title=title,\n"
                },
                {
                    "date": 1731563828110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,12 @@\n     }\n \n     # Prepare notification details\n     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n-    message = action_messages[action]\n+    \n+    # Include ID or slug in message if available\n+    identifier = getattr(instance, 'slug', None) or instance.id\n+    message = f\"{action_messages[action]} Identifier: {identifier}\"\n \n     # Find users with view permission for this model\n     permission_codename = f'view_{model_name.lower()}'\n     view_permission = Permission.objects.filter(codename=permission_codename)\n@@ -51,8 +54,9 @@\n         message=message,\n         module_name=module_name\n     )\n     notification.users.set(users_with_permission)\n+    notification.save()  # Save notification to retain the responses\n \n @receiver(post_save)\n def create_or_update_notification(sender, instance, created, **kwargs):\n     \"\"\"\n"
                },
                {
                    "date": 1731565400281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n-from django.apps import apps\n from .models import Notification\n \n MODEL_MAP = {\n     'project': ('projects', 'Project'),\n@@ -38,9 +37,9 @@\n \n     # Prepare notification details\n     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n     \n-    # Include ID or slug in message if available\n+    # Retrieve identifier (slug or id) and add it to the message\n     identifier = getattr(instance, 'slug', None) or instance.id\n     message = f\"{action_messages[action]} Identifier: {identifier}\"\n \n     # Find users with view permission for this model\n"
                },
                {
                    "date": 1731565722772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n-# signals.py in notifications app\n-from django.db.models.signals import post_save, post_delete\n-from django.dispatch import receiver\n+from django.utils import timezone\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n \n@@ -27,21 +25,21 @@\n def notify_users(action, instance, module_name, model_name):\n     \"\"\"\n     Helper function to create notifications for users based on the action type.\n     \"\"\"\n-    # Define messages based on action\n+    # Determine identifier: slug if available, otherwise id\n+    identifier = getattr(instance, 'slug', instance.id)\n+\n+    # Define messages based on action with model_name and identifier included\n     action_messages = {\n-        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n-        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n-        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n+        'created': f\"A new {model_name} item was added in the {module_name} module ({model_name}.{identifier}).\",\n+        'updated': f\"The {model_name} item was updated in the {module_name} module ({model_name}.{identifier}).\",\n+        'deleted': f\"The {model_name} item was deleted from the {module_name} module ({model_name}.{identifier}).\"\n     }\n \n     # Prepare notification details\n     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n-    \n-    # Retrieve identifier (slug or id) and add it to the message\n-    identifier = getattr(instance, 'slug', None) or instance.id\n-    message = f\"{action_messages[action]} Identifier: {identifier}\"\n+    message = action_messages[action]\n \n     # Find users with view permission for this model\n     permission_codename = f'view_{model_name.lower()}'\n     view_permission = Permission.objects.filter(codename=permission_codename)\n"
                },
                {
                    "date": 1731565733359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n-from django.utils import timezone\n+# signals.py in notifications app\n+from django.db.models.signals import post_save, post_delete\n+from django.dispatch import receiver\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n \n@@ -25,21 +27,21 @@\n def notify_users(action, instance, module_name, model_name):\n     \"\"\"\n     Helper function to create notifications for users based on the action type.\n     \"\"\"\n-    # Determine identifier: slug if available, otherwise id\n-    identifier = getattr(instance, 'slug', instance.id)\n-\n-    # Define messages based on action with model_name and identifier included\n+    # Define messages based on action\n     action_messages = {\n-        'created': f\"A new {model_name} item was added in the {module_name} module ({model_name}.{identifier}).\",\n-        'updated': f\"The {model_name} item was updated in the {module_name} module ({model_name}.{identifier}).\",\n-        'deleted': f\"The {model_name} item was deleted from the {module_name} module ({model_name}.{identifier}).\"\n+        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n+        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n+        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n     }\n \n     # Prepare notification details\n     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n-    message = action_messages[action]\n+    \n+    # Retrieve identifier (slug or id) and add it to the message\n+    identifier = getattr(instance, 'slug', None) or instance.id\n+    message = f\"{action_messages[action]} Identifier: {identifier}\"\n \n     # Find users with view permission for this model\n     permission_codename = f'view_{model_name.lower()}'\n     view_permission = Permission.objects.filter(codename=permission_codename)\n"
                },
                {
                    "date": 1731565740952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,13 @@\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n \n+from django.utils import timezone\n+from django.contrib.auth.models import Permission\n+from accounts.models import CustomUser\n+from .models import Notification\n+\n MODEL_MAP = {\n     'project': ('projects', 'Project'),\n     'project-service': ('projects', 'ProjectService'),\n     'project-group': ('projects', 'ProjectGroup'),\n@@ -27,21 +32,21 @@\n def notify_users(action, instance, module_name, model_name):\n     \"\"\"\n     Helper function to create notifications for users based on the action type.\n     \"\"\"\n-    # Define messages based on action\n+    # Determine identifier: slug if available, otherwise id\n+    identifier = getattr(instance, 'slug', instance.id)\n+\n+    # Define messages based on action with model_name and identifier included\n     action_messages = {\n-        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n-        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n-        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n+        'created': f\"A new {model_name} item was added in the {module_name} module ({model_name}.{identifier}).\",\n+        'updated': f\"The {model_name} item was updated in the {module_name} module ({model_name}.{identifier}).\",\n+        'deleted': f\"The {model_name} item was deleted from the {module_name} module ({model_name}.{identifier}).\"\n     }\n \n     # Prepare notification details\n     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n-    \n-    # Retrieve identifier (slug or id) and add it to the message\n-    identifier = getattr(instance, 'slug', None) or instance.id\n-    message = f\"{action_messages[action]} Identifier: {identifier}\"\n+    message = action_messages[action]\n \n     # Find users with view permission for this model\n     permission_codename = f'view_{model_name.lower()}'\n     view_permission = Permission.objects.filter(codename=permission_codename)\n@@ -85,4 +90,5 @@\n     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n             # Call notify_users for deletion\n             notify_users('deleted', instance, app_label, model_name)\n+\n"
                },
                {
                    "date": 1731565878018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,4 @@\n-# signals.py in notifications app\n-from django.db.models.signals import post_save, post_delete\n-from django.dispatch import receiver\n-from django.contrib.auth.models import Permission\n-from accounts.models import CustomUser\n-from .models import Notification\n-\n from django.utils import timezone\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n@@ -37,11 +30,11 @@\n     identifier = getattr(instance, 'slug', instance.id)\n \n     # Define messages based on action with model_name and identifier included\n     action_messages = {\n-        'created': f\"A new {model_name} item was added in the {module_name} module ({model_name}.{identifier}).\",\n-        'updated': f\"The {model_name} item was updated in the {module_name} module ({model_name}.{identifier}).\",\n-        'deleted': f\"The {model_name} item was deleted from the {module_name} module ({model_name}.{identifier}).\"\n+        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n+        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n+        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n     }\n \n     # Prepare notification details\n     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n@@ -51,13 +44,14 @@\n     permission_codename = f'view_{model_name.lower()}'\n     view_permission = Permission.objects.filter(codename=permission_codename)\n     users_with_permission = CustomUser.objects.filter(user_permissions__in=view_permission)\n \n-    # Create and assign the notification\n+    # Create and assign the notification with the updated_id field\n     notification = Notification.objects.create(\n         title=title,\n         message=message,\n-        module_name=module_name\n+        module_name=module_name,\n+        updated_id=str(identifier)  # Set updated_id with identifier\n     )\n     notification.users.set(users_with_permission)\n     notification.save()  # Save notification to retain the responses\n \n@@ -90,5 +84,4 @@\n     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n             # Call notify_users for deletion\n             notify_users('deleted', instance, app_label, model_name)\n-\n"
                },
                {
                    "date": 1731565887591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,16 @@\n-from django.utils import timezone\n+# signals.py in notifications app\n+from django.db.models.signals import post_save, post_delete\n+from django.dispatch import receiver\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n \n+ffrom django.utils import timezone\n+from django.contrib.auth.models import Permission\n+from accounts.models import CustomUser\n+from .models import Notification\n+\n MODEL_MAP = {\n     'project': ('projects', 'Project'),\n     'project-service': ('projects', 'ProjectService'),\n     'project-group': ('projects', 'ProjectGroup'),\n@@ -84,4 +91,5 @@\n     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n             # Call notify_users for deletion\n             notify_users('deleted', instance, app_label, model_name)\n+\n"
                },
                {
                    "date": 1731565942994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n \n-ffrom django.utils import timezone\n+from django.utils import timezone\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n \n"
                },
                {
                    "date": 1731566210371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,10 @@\n # signals.py in notifications app\n-from django.db.models.signals import post_save, post_delete\n-from django.dispatch import receiver\n-from django.contrib.auth.models import Permission\n-from accounts.models import CustomUser\n-from .models import Notification\n-\n from django.utils import timezone\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n+from django.db.models import Q\n \n MODEL_MAP = {\n     'project': ('projects', 'Project'),\n     'project-service': ('projects', 'ProjectService'),\n@@ -34,34 +29,41 @@\n     Helper function to create notifications for users based on the action type.\n     \"\"\"\n     # Determine identifier: slug if available, otherwise id\n     identifier = getattr(instance, 'slug', instance.id)\n+    \n+    # Try to retrieve the user who made the change from created_by or updated_by field\n+    user = getattr(instance, 'created_by', None) if action == 'created' else getattr(instance, 'updated_by', None)\n+    user_name = user.username if user else \"Someone\"\n \n     # Define messages based on action with model_name and identifier included\n     action_messages = {\n-        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n-        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n-        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n+        'created': f\"{user_name} added a new {model_name} in the {module_name} module ({model_name}.{identifier}).\",\n+        'updated': f\"{user_name} updated the {model_name} in the {module_name} module ({model_name}.{identifier}).\",\n+        'deleted': f\"{user_name} deleted the {model_name} from the {module_name} module ({model_name}.{identifier}).\"\n     }\n \n     # Prepare notification details\n     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n     message = action_messages[action]\n \n-    # Find users with view permission for this model\n+    # Find users with view permission for this model, considering both user and group permissions\n     permission_codename = f'view_{model_name.lower()}'\n-    view_permission = Permission.objects.filter(codename=permission_codename)\n-    users_with_permission = CustomUser.objects.filter(user_permissions__in=view_permission)\n+    view_permission = Permission.objects.filter(codename=permission_codename).first()\n+    users_with_permission = CustomUser.objects.filter(\n+        Q(user_permissions=view_permission) |\n+        Q(groups__permissions=view_permission)\n+    ).distinct()  # Add distinct to remove duplicates\n \n     # Create and assign the notification with the updated_id field\n     notification = Notification.objects.create(\n         title=title,\n         message=message,\n         module_name=module_name,\n-        updated_id=str(identifier)  # Set updated_id with identifier\n+        updated_id=str(identifier)\n     )\n     notification.users.set(users_with_permission)\n-    notification.save()  # Save notification to retain the responses\n+    notification.save()\n \n @receiver(post_save)\n def create_or_update_notification(sender, instance, created, **kwargs):\n     \"\"\"\n@@ -91,5 +93,4 @@\n     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n             # Call notify_users for deletion\n             notify_users('deleted', instance, app_label, model_name)\n-\n"
                },
                {
                    "date": 1731566218113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,12 @@\n # signals.py in notifications app\n+from django.db.models.signals import post_save, post_delete\n+from django.dispatch import receiver\n+from django.contrib.auth.models import Permission\n+from accounts.models import CustomUser\n+from .models import Notification\n+\n+# signals.py in notifications app\n from django.utils import timezone\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n"
                },
                {
                    "date": 1731566368647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,12 @@\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n \n-# signals.py in notifications app\n from django.utils import timezone\n from django.contrib.auth.models import Permission\n from accounts.models import CustomUser\n from .models import Notification\n-from django.db.models import Q\n \n MODEL_MAP = {\n     'project': ('projects', 'Project'),\n     'project-service': ('projects', 'ProjectService'),\n@@ -36,41 +34,34 @@\n     Helper function to create notifications for users based on the action type.\n     \"\"\"\n     # Determine identifier: slug if available, otherwise id\n     identifier = getattr(instance, 'slug', instance.id)\n-    \n-    # Try to retrieve the user who made the change from created_by or updated_by field\n-    user = getattr(instance, 'created_by', None) if action == 'created' else getattr(instance, 'updated_by', None)\n-    user_name = user.username if user else \"Someone\"\n \n     # Define messages based on action with model_name and identifier included\n     action_messages = {\n-        'created': f\"{user_name} added a new {model_name} in the {module_name} module ({model_name}.{identifier}).\",\n-        'updated': f\"{user_name} updated the {model_name} in the {module_name} module ({model_name}.{identifier}).\",\n-        'deleted': f\"{user_name} deleted the {model_name} from the {module_name} module ({model_name}.{identifier}).\"\n+        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n+        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n+        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n     }\n \n     # Prepare notification details\n     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n     message = action_messages[action]\n \n-    # Find users with view permission for this model, considering both user and group permissions\n+    # Find users with view permission for this model\n     permission_codename = f'view_{model_name.lower()}'\n-    view_permission = Permission.objects.filter(codename=permission_codename).first()\n-    users_with_permission = CustomUser.objects.filter(\n-        Q(user_permissions=view_permission) |\n-        Q(groups__permissions=view_permission)\n-    ).distinct()  # Add distinct to remove duplicates\n+    view_permission = Permission.objects.filter(codename=permission_codename)\n+    users_with_permission = CustomUser.objects.filter(user_permissions__in=view_permission)\n \n     # Create and assign the notification with the updated_id field\n     notification = Notification.objects.create(\n         title=title,\n         message=message,\n         module_name=module_name,\n-        updated_id=str(identifier)\n+        updated_id=str(identifier)  # Set updated_id with identifier\n     )\n     notification.users.set(users_with_permission)\n-    notification.save()\n+    notification.save()  # Save notification to retain the responses\n \n @receiver(post_save)\n def create_or_update_notification(sender, instance, created, **kwargs):\n     \"\"\"\n@@ -100,4 +91,5 @@\n     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n             # Call notify_users for deletion\n             notify_users('deleted', instance, app_label, model_name)\n+\n"
                }
            ],
            "date": 1731494351249,
            "name": "Commit-0",
            "content": "from django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom .models import Blog  # Example model\nfrom .notification_models import Notification  # Adjust path as needed\nfrom django.contrib.auth.models import Permission, User\n\n@receiver(post_save, sender=Blog)\ndef create_blog_notification(sender, instance, created, **kwargs):\n    if created:\n        # Identify users with permission to view this module\n        view_permission = Permission.objects.get(codename='view_blog')\n        users_with_permission = User.objects.filter(user_permissions=view_permission)\n\n        # Create a notification for these users\n        notification = Notification.objects.create(\n            title=\"New Blog Post Added\",\n            message=f\"A new blog post titled '{instance.title}' was added.\",\n            module_name=\"Blog\"\n        )\n\n        # Assign the notification to users\n        notification.users.set(users_with_permission)\n"
        }
    ]
}