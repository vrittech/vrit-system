{
    "sourceFile": "notifications/signals.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1731494351249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731494359404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from django.db.models.signals import post_save\n from django.dispatch import receiver\n from .models import Blog  # Example model\n-from .notification_models import Notification  # Adjust path as needed\n+from ..m import Notification  # Adjust path as needed\n from django.contrib.auth.models import Permission, User\n \n @receiver(post_save, sender=Blog)\n def create_blog_notification(sender, instance, created, **kwargs):\n"
                },
                {
                    "date": 1731494368267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from django.db.models.signals import post_save\n from django.dispatch import receiver\n from .models import Blog  # Example model\n-from ..m import Notification  # Adjust path as needed\n+from .models import Notification  \n from django.contrib.auth.models import Permission, User\n \n @receiver(post_save, sender=Blog)\n def create_blog_notification(sender, instance, created, **kwargs):\n"
                },
                {
                    "date": 1731494671944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,52 @@\n+# signals.py in notifications app\n from django.db.models.signals import post_save\n from django.dispatch import receiver\n-from .models import Blog  # Example model\n-from .models import Notification  \n from django.contrib.auth.models import Permission, User\n+from django.apps import apps\n+from .models import Notification\n \n-@receiver(post_save, sender=Blog)\n-def create_blog_notification(sender, instance, created, **kwargs):\n-    if created:\n-        # Identify users with permission to view this module\n-        view_permission = Permission.objects.get(codename='view_blog')\n-        users_with_permission = User.objects.filter(user_permissions=view_permission)\n+MODEL_MAP = {\n+    'project': ('projects', 'Project'),\n+    'project-service': ('projects', 'ProjectService'),\n+    'project-group': ('projects', 'ProjectGroup'),\n+    'blog': ('blog', 'Blog'),\n+    'career': ('career', 'Career'),\n+    'case-study': ('casestudy', 'CaseStudy'),\n+    'clients': ('clients', 'Clients'),\n+    'faqs': ('faqs', 'Faq'),\n+    'forms': ('forms', 'Form'),\n+    'forms-category': ('forms', 'Category'),\n+    'plan': ('plan', 'Plan'),\n+    'testimonial': ('testimonial', 'Testimonial'),\n+    'department': ('department', 'Department'),\n+    'gallery': ('gallery', 'Gallery'),\n+    'social-media': ('socialmedia', 'SocialMedia'),\n+    'role': ('accounts', 'Group'),\n+}\n \n-        # Create a notification for these users\n-        notification = Notification.objects.create(\n-            title=\"New Blog Post Added\",\n-            message=f\"A new blog post titled '{instance.title}' was added.\",\n-            module_name=\"Blog\"\n-        )\n+@receiver(post_save)\n+def create_notification_for_mapped_models(sender, instance, created, **kwargs):\n+    # Identify app label and model name from the instance\n+    app_label = instance._meta.app_label\n+    model_name = instance._meta.model_name\n \n-        # Assign the notification to users\n-        notification.users.set(users_with_permission)\n+    # Loop through MODEL_MAP to check if the instance matches any entry\n+    for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n+        if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n+            if created:\n+                # Prepare the notification title and message\n+                title = f\"New {mapped_model_name} Added\"\n+                message = f\"A new {mapped_model_name} item was added in the {app_label} module.\"\n+\n+                # Find users with view permissions for this model\n+                permission_codename = f'view_{model_name.lower()}'\n+                view_permission = Permission.objects.filter(codename=permission_codename)\n+                users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n+\n+                # Create and assign the notification\n+                notification = Notification.objects.create(\n+                    title=title,\n+                    message=message,\n+                    module_name=app_label\n+                )\n+                notification.users.set(users_with_permission)\n"
                },
                {
                    "date": 1731495011458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n # signals.py in notifications app\n-from django.db.models.signals import post_save\n+from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from django.contrib.auth.models import Permission, User\n from django.apps import apps\n from .models import Notification\n@@ -23,30 +23,62 @@\n     'social-media': ('socialmedia', 'SocialMedia'),\n     'role': ('accounts', 'Group'),\n }\n \n+def notify_users(action, instance, module_name, model_name):\n+    \"\"\"\n+    Helper function to create notifications for users based on the action type.\n+    \"\"\"\n+    # Define messages based on action\n+    action_messages = {\n+        'created': f\"A new {model_name} item was added in the {module_name} module.\",\n+        'updated': f\"The {model_name} item was updated in the {module_name} module.\",\n+        'deleted': f\"The {model_name} item was deleted from the {module_name} module.\"\n+    }\n+\n+    # Prepare notification details\n+    title = f\"{model_name.capitalize()} {action.capitalize()}\"\n+    message = action_messages[action]\n+\n+    # Find users with view permission for this model\n+    permission_codename = f'view_{model_name.lower()}'\n+    view_permission = Permission.objects.filter(codename=permission_codename)\n+    users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n+\n+    # Create and assign the notification\n+    notification = Notification.objects.create(\n+        title=title,\n+        message=message,\n+        module_name=module_name\n+    )\n+    notification.users.set(users_with_permission)\n+\n @receiver(post_save)\n-def create_notification_for_mapped_models(sender, instance, created, **kwargs):\n+def create_or_update_notification(sender, instance, created, **kwargs):\n+    \"\"\"\n+    Signal handler for create and update events.\n+    \"\"\"\n     # Identify app label and model name from the instance\n     app_label = instance._meta.app_label\n     model_name = instance._meta.model_name\n \n     # Loop through MODEL_MAP to check if the instance matches any entry\n     for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n         if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n-            if created:\n-                # Prepare the notification title and message\n-                title = f\"New {mapped_model_name} Added\"\n-                message = f\"A new {mapped_model_name} item was added in the {app_label} module.\"\n+            # Determine action type\n+            action = 'created' if created else 'updated'\n+            notify_users(action, instance, app_label, model_name)\n \n-                # Find users with view permissions for this model\n-                permission_codename = f'view_{model_name.lower()}'\n-                view_permission = Permission.objects.filter(codename=permission_codename)\n-                users_with_permission = User.objects.filter(user_permissions__in=view_permission)\n+@receiver(post_delete)\n+def delete_notification(sender, instance, **kwargs):\n+    \"\"\"\n+    Signal handler for delete events.\n+    \"\"\"\n+    # Identify app label and model name from the instance\n+    app_label = instance._meta.app_label\n+    model_name = instance._meta.model_name\n \n-                # Create and assign the notification\n-                notification = Notification.objects.create(\n-                    title=title,\n-                    message=message,\n-                    module_name=app_label\n-                )\n-                notification.users.set(users_with_permission)\n+    # Loop through MODEL_MAP to check if the instance matches any entry\n+    for module_key, (mapped_app_label, mapped_model_name) in MODEL_MAP.items():\n+        if app_label == mapped_app_label and model_name.lower() == mapped_model_name.lower():\n+            # Call notify_users for deletion\n+            notify_users('deleted', instance, app_label, model_name)\n"
                }
            ],
            "date": 1731494351249,
            "name": "Commit-0",
            "content": "from django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom .models import Blog  # Example model\nfrom .notification_models import Notification  # Adjust path as needed\nfrom django.contrib.auth.models import Permission, User\n\n@receiver(post_save, sender=Blog)\ndef create_blog_notification(sender, instance, created, **kwargs):\n    if created:\n        # Identify users with permission to view this module\n        view_permission = Permission.objects.get(codename='view_blog')\n        users_with_permission = User.objects.filter(user_permissions=view_permission)\n\n        # Create a notification for these users\n        notification = Notification.objects.create(\n            title=\"New Blog Post Added\",\n            message=f\"A new blog post titled '{instance.title}' was added.\",\n            module_name=\"Blog\"\n        )\n\n        # Assign the notification to users\n        notification.users.set(users_with_permission)\n"
        }
    ]
}