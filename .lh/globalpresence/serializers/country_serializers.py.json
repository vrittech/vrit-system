{
    "sourceFile": "globalpresence/serializers/country_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1731320564082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731403265900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,29 @@\n     class Meta:\n         model = Country\n         fields = '__all__'\n \n+from rest_framework import serializers\n+\n class CountryWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n\\ No newline at end of file\n         model = Country\n-        fields = '__all__'\n+        fields = '__all__'\n+\n+class CountryListWriteSerializers(serializers.Serializer):\n+    countries = CountryWriteSerializers(many=True)\n+\n+    def create(self, validated_data):\n+        countries_data = validated_data.pop('countries')\n+        countries = [Country.objects.create(**country_data) for country_data in countries_data]\n+        return countries\n+\n+    def update(self, instance, validated_data):\n+        countries_data = validated_data.pop('countries')\n+        \n+        # Here you might want to clear the previous data or update specific items\n+        # For simplicity, we clear and re-add (make sure it fits your use case)\n+        instance.clear()  # Clear the current list if using ManyToMany or similar relation\n+        for country_data in countries_data:\n+            Country.objects.update_or_create(**country_data)\n+\n+        return instance\n"
                },
                {
                    "date": 1731403273525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,8 @@\n     class Meta:\n         model = Country\n         fields = '__all__'\n \n-from rest_framework import serializers\n-\n class CountryWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Country\n         fields = '__all__'\n@@ -34,5 +32,5 @@\n         instance.clear()  # Clear the current list if using ManyToMany or similar relation\n         for country_data in countries_data:\n             Country.objects.update_or_create(**country_data)\n \n-        return instance\n\\ No newline at end of file\n+        return instance\n"
                },
                {
                    "date": 1731403323900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,21 +16,14 @@\n         model = Country\n         fields = '__all__'\n \n class CountryListWriteSerializers(serializers.Serializer):\n-    countries = CountryWriteSerializers(many=True)\n+    countries = serializers.ListField(\n+        child=serializers.CharField(max_length=100)\n+    )\n \n     def create(self, validated_data):\n-        countries_data = validated_data.pop('countries')\n-        countries = [Country.objects.create(**country_data) for country_data in countries_data]\n-        return countries\n-\n-    def update(self, instance, validated_data):\n-        countries_data = validated_data.pop('countries')\n-        \n-        # Here you might want to clear the previous data or update specific items\n-        # For simplicity, we clear and re-add (make sure it fits your use case)\n-        instance.clear()  # Clear the current list if using ManyToMany or similar relation\n-        for country_data in countries_data:\n-            Country.objects.update_or_create(**country_data)\n-\n-        return instance\n+        countries = [\n+            Country.objects.create(name=country_name) \n+            for country_name in validated_data['countries']\n+        ]\n+        return countries\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731403498264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,19 +11,42 @@\n         model = Country\n         fields = '__all__'\n \n class CountryWriteSerializers(serializers.ModelSerializer):\n+    id = serializers.IntegerField(required=False)\n+\n     class Meta:\n         model = Country\n-        fields = '__all__'\n+        fields = ['id', 'name']\n \n-class CountryListWriteSerializers(serializers.Serializer):\n-    countries = serializers.ListField(\n-        child=serializers.CharField(max_length=100)\n-    )\n+    def create(self, validated_data):\n+        countries_data = validated_data.get('countries', [])\n+        created_countries = []\n \n\\ No newline at end of file\n-    def create(self, validated_data):\n-        countries = [\n-            Country.objects.create(name=country_name) \n-            for country_name in validated_data['countries']\n-        ]\n-        return countries\n+        for country_data in countries_data:\n+            # Create a new country if no ID is provided\n+            if 'id' not in country_data:\n+                country = Country.objects.create(name=country_data['name'])\n+                created_countries.append(country)\n+\n+        return created_countries\n+\n+    def update(self, instance, validated_data):\n+        countries_data = validated_data.get('countries', [])\n+        updated_countries = []\n+\n+        for country_data in countries_data:\n+            country_id = country_data.get('id')\n+\n+            # Update an existing country if ID is provided\n+            if country_id:\n+                country = Country.objects.filter(id=country_id).first()\n+                if country:\n+                    country.name = country_data['name']\n+                    country.save()\n+                    updated_countries.append(country)\n+                else:\n+                    # Optionally, handle the case where the ID does not exist\n+                    # Raise an exception or handle as needed\n+                    pass\n+\n+        return updated_countries\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731320564082,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Country\n\nclass CountryListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Country\n        fields = '__all__'\n\nclass CountryRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Country\n        fields = '__all__'\n\nclass CountryWriteSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Country\n        fields = '__all__'"
        }
    ]
}