{
    "sourceFile": "accountsmanagement/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1729838115138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729838216650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,39 +278,39 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n-class SendEmailForBookingVerification(APIView):\n-    serializer_class = EmailNumberSerializer\n+# class SendEmailForBookingVerification(APIView):\n+#     serializer_class = EmailNumberSerializer\n \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data)\n-        if serializer.is_valid():\n-            email = serializer.validated_data[\"email\"]\n-            try:\n-                book = DestinationBook.objects.get(email=email)\n-            except DestinationBook.DoesNotExist:\n-                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+#     def post(self, request, *args, **kwargs):\n+#         serializer = self.serializer_class(data=request.data)\n+#         if serializer.is_valid():\n+#             email = serializer.validated_data[\"email\"]\n+#             try:\n+#                 book = DestinationBook.objects.get(email=email)\n+#             except DestinationBook.DoesNotExist:\n+#                 return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n-            # Construct the verification URL\n-            site_url = 'https://example.com'  \n-            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+#             # Construct the verification URL\n+#             site_url = 'https://example.com'  \n+#             verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n-            # Fetch the admin email from the User model\n-            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n-            if admin_user:\n-                admin_name = admin_user.first_name\n-                admin_email = admin_user.email\n-            else:\n-                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+#             # Fetch the admin email from the User model\n+#             admin_user = CustomUser.objects.filter(is_superuser=True).first()\n+#             if admin_user:\n+#                 admin_name = admin_user.first_name\n+#                 admin_email = admin_user.email\n+#             else:\n+#                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n-            # Send the confirmation email\n-            subject = 'Booking Verification Email'\n-            send_booking_confirmation_email(email, verify_url, subject, book, admin_email, admin_name)\n+#             # Send the confirmation email\n+#             subject = 'Booking Verification Email'\n+#             send_booking_confirmation_email(email, verify_url, subject, book, admin_email, admin_name)\n \n-            return Response({'detail': 'Email for Booking confirmation sent successfully'}, status=status.HTTP_200_OK)\n+#             return Response({'detail': 'Email for Booking confirmation sent successfully'}, status=status.HTTP_200_OK)\n         \n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n def send_booking_confirmation_email(email, verify_url, subject, book, admin_email, admin_name):\n     context = {\n         'admin_name': admin_name,\n"
                },
                {
                    "date": 1729838223121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,54 +310,54 @@\n #             return Response({'detail': 'Email for Booking confirmation sent successfully'}, status=status.HTTP_200_OK)\n         \n #         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-def send_booking_confirmation_email(email, verify_url, subject, book, admin_email, admin_name):\n-    context = {\n-        'admin_name': admin_name,\n-        'recipient_name': book.full_name,\n-        'contact': book.phone_number,\n-        'destination': book.destination.destination_title,\n-        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),\n-        'departure_date': book.departure_date.strftime('%d/%m/%Y'),\n-        'preferred_service_type': book.service_type,\n-    }\n+# def send_booking_confirmation_email(email, verify_url, subject, book, admin_email, admin_name):\n+#     context = {\n+#         'admin_name': admin_name,\n+#         'recipient_name': book.full_name,\n+#         'contact': book.phone_number,\n+#         'destination': book.destination.destination_title,\n+#         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),\n+#         'departure_date': book.departure_date.strftime('%d/%m/%Y'),\n+#         'preferred_service_type': book.service_type,\n+#     }\n \n-    # Conditionally add 'activity' if it's not None\n-    if book.activity:\n-                context['activity'] = book.activity.name\n+#     # Conditionally add 'activity' if it's not None\n+#     if book.activity:\n+#                 context['activity'] = book.activity.name\n \n-                # Conditionally add 'package' if it's not None\n-    if book.package:\n-                context['package'] = book.package.name\n+#                 # Conditionally add 'package' if it's not None\n+#     if book.package:\n+#                 context['package'] = book.package.name\n \n \n-    html_content = render_to_string('booking_confirmation.html', context)\n-    from_email = f'Everest Thrills <{admin_email}>'\n+#     html_content = render_to_string('booking_confirmation.html', context)\n+#     from_email = f'Everest Thrills <{admin_email}>'\n \n-    # Send email to the customer\n-    recipient_list = [email]\n-    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n+#     # Send email to the customer\n+#     recipient_list = [email]\n+#     send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n \n-    # Send email to the admin\n-    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n-    admin_context = context.copy()\n-    admin_context['verification_url'] = verify_url\n-    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n+#     # Send email to the admin\n+#     admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n+#     admin_context = context.copy()\n+#     admin_context['verification_url'] = verify_url\n+#     admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n \n-    # Fetch all admin users from the CustomUser model\n-    admin_users = CustomUser.objects.filter(is_superuser=True)\n+#     # Fetch all admin users from the CustomUser model\n+#     admin_users = CustomUser.objects.filter(is_superuser=True)\n \n-    # Check if there are any admin users\n-    if admin_users.exists():\n-        # Extract the emails of all admin users into a list\n-        admin_recipient_list = [user.email for user in admin_users]\n-        admin_recipient_list.append('everestthrill@gmail.com')\n-        admin_name = admin_users[0].first_name  \n-    else:\n-        return Response({'detail': 'Admin emails not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+#     # Check if there are any admin users\n+#     if admin_users.exists():\n+#         # Extract the emails of all admin users into a list\n+#         admin_recipient_list = [user.email for user in admin_users]\n+#         admin_recipient_list.append('everestthrill@gmail.com')\n+#         admin_name = admin_users[0].first_name  \n+#     else:\n+#         return Response({'detail': 'Admin emails not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n-    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n+#     send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n \n \n class PasswordResetView(generics.GenericAPIView):\n \n"
                },
                {
                    "date": 1729838241634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n \n class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n-                # Generate a random 5-digit OTP\n+                # Generate a random 6-digit OTP\n                 # return \"12345\"\n                 user = str(user)\n                 return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n             \n"
                }
            ],
            "date": 1729838115138,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\nfrom rest_framework import generics, status, viewsets, response\nfrom .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\nfrom accounts.models import CustomUser\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.utils.encoding import force_bytes\nfrom django.contrib.auth.tokens import PasswordResetTokenGenerator\nfrom django.urls import reverse\nfrom django.conf import settings\nfrom django.core.mail import send_mail\nfrom django.contrib.auth.hashers import check_password\nfrom django.template.loader import render_to_string\n# from booking.models import DestinationBook\n\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.core.mail import send_mail\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom .sms_sender import SendSms,ContactMe\nfrom django.db.models import Q\nfrom django.core.cache import cache\n\nimport random\nimport string\n\notp_time_expired = 600\nsite_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n\nclass EmailCheckView(generics.GenericAPIView):\n\n    def generate_otp(self,user):\n        # Generate a random 6-digit OTP\n        user = str(user)\n        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n    \n    serializer_class = EmailNumberSerializer\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        email = serializer.data[\"email\"]\n        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n        if user:\n        \n            otp = self.generate_otp(user.id)\n\n            reset_verification = \"reset_password\"\n            subject = 'lead-management OTP'\n            if '@' in email:\n                email = user.email\n                sendMail(email, otp,subject,reset_verification)\n            else:\n                SendSms(contact=email,otp=otp,message=subject)\n          \n            cache_key = f\"password_reset_otp_{user.id}\"\n        \n            cache.set(cache_key, otp, timeout=otp_time_expired)\n\n            return response.Response(\n                {\n                \"message\": \"otp has been sent to your email address\"\n                },\n                status=status.HTTP_200_OK,\n            )\n        else:\n            return response.Response(\n                {\"message\": \"User doesn't exists\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        \nclass EmailChangeGetOtpView(generics.GenericAPIView):\n    def generate_otp(self,user):\n        # Generate a random 6-digit OTP\n        return \"123456\"\n        user = str(user)\n        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n    \n    serializer_class = EmailChangeGetOtpSerializer\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        email = serializer.data[\"email\"]\n        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n        if user:\n        \n            otp = self.generate_otp(user.id)\n\n            reset_verification = \"reset_email\"\n            subject = 'Pacific OTP'\n            if '@' in email:\n                email = user.email\n                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n            else:\n                SendSms(contact=email,otp=otp,message=subject)\n          \n            cache_key = f\"email_reset_otp_{user.id}\"\n            cache.set(cache_key, otp, timeout=otp_time_expired)\n\n            return response.Response(\n                {\n                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n                },\n                status=status.HTTP_200_OK,\n            )\n        else:\n            return response.Response(\n                {\"message\": \"User doesn't exists\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n\nclass CustomPasswordResetView(generics.GenericAPIView):\n    serializer_class = CustomPasswordResetSerializer\n    \n    def post(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n        serializer.is_valid(raise_exception=True)\n     \n        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n        if serializer.validated_data.get('token_validate') == True:\n            user.password = serializer.data.get('password')\n            user.save()\n            message = \"Password Reset Complete\"\n            stat = status.HTTP_200_OK\n            print(\" password save \")\n        else:\n            message = \"Password Reset not Completed\"\n            stat = status.HTTP_400_BAD_REQUEST\n            print(\"password not save\")\n\n        return response.Response(\n            {\"message\": message},\n            status=stat,\n        )\n\nclass EmailResetView(generics.GenericAPIView):\n    serializer_class = EmailResetSerializer\n    \n    def post(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n        serializer.is_valid(raise_exception=True)\n     \n        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n        if not check_password(serializer.data.get('password'),user.password):\n            message = \"password does not match\"\n            stat = status.HTTP_200_OK\n        if serializer.validated_data.get('token_validate') == True:\n            print(\"validate  data\")\n            user.email = serializer.data.get('second_email')\n            user.save()\n            message = \"Email Reset Complete\"\n            stat = status.HTTP_200_OK\n            print(\" Email Reset save \")\n        else:\n            message = \"Email Can Not reset\"\n            stat = status.HTTP_400_BAD_REQUEST\n            print(\"Email Reset not save\")\n\n        return response.Response(\n            {\"message\": message},\n            status=stat,\n        )\n    \n\nclass VerifyUserPasswordToken(generics.GenericAPIView):\n    serializer_class = TokenValidationSerializer\n    \n    def post(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n        serializer.is_valid(raise_exception=True)\n        \n        return response.Response(\n            {\"message\": \"Your Token is Validate\",\n             'data' : serializer.data,\n            },\n            status=status.HTTP_200_OK,\n        )\n\n\nclass SendEmailVerificationLink(APIView):\n    \n    def post(self, request, *args, **kwargs):\n        email = request.data.get('email')\n        user = CustomUser.objects.filter(email=email).first()\n\n        try:\n            user = CustomUser.objects.get(email=email)\n        except CustomUser.DoesNotExist:\n            return Response({\n                'detail': 'User with this email does not exist.',\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n        token = PasswordResetTokenGenerator().make_token(user)\n\n        # Send the token via email\n        subject = 'Email Verification Token'\n        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n        subject = 'Email Verification Link '\n        reset_verification = \"verification\"\n        sendMail(email,verify_url,subject,reset_verification)\n\n        return Response({\n            'detail': 'Email verification'})\n\ndef sendMail(email, reset_url,subject,reset_verification):\n    if reset_verification == \"verification\":\n        body = f\"\"\"<body>\n            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n                <tr>\n                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n                    </td>\n                </tr>\n            </table>\n        </body>\n        </html>\"\"\"\n    else:\n        body = f\"\"\"<body>\n            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n                <tr>\n                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n                    </td>\n                </tr>\n            </table>\n        </body>\n        </html>\"\"\"\n    html_contents = \"\"\"<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Email Template</title>\n            <style>\n                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n            </style>\n        </head>\"\"\" + body\n    \n    email_from = settings.EMAIL_HOST_USER\n    recipient_list = [email]\n    plain_message = \"\"\n    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n\n\nclass ContactmeView(generics.GenericAPIView):    \n    serializer_class = ContactMeSerializer\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n\n        email = serializer.data[\"email\"]\n        subject = serializer.data.get('subject')\n        full_name = serializer.data[\"full_name\"]\n        message = serializer.data[\"message\"]\n        phone = serializer.data.get(\"phone\")\n        \n        ContactMe(email,phone,full_name,subject,message)\n           \n        return response.Response(\n            {\n            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n            },\n            status=status.HTTP_200_OK,\n        )\n     \nclass SendEmailForBookingVerification(APIView):\n    serializer_class = EmailNumberSerializer\n\n    def post(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data)\n        if serializer.is_valid():\n            email = serializer.validated_data[\"email\"]\n            try:\n                book = DestinationBook.objects.get(email=email)\n            except DestinationBook.DoesNotExist:\n                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n\n            # Construct the verification URL\n            site_url = 'https://example.com'  \n            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n\n            # Fetch the admin email from the User model\n            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n            if admin_user:\n                admin_name = admin_user.first_name\n                admin_email = admin_user.email\n            else:\n                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n            # Send the confirmation email\n            subject = 'Booking Verification Email'\n            send_booking_confirmation_email(email, verify_url, subject, book, admin_email, admin_name)\n\n            return Response({'detail': 'Email for Booking confirmation sent successfully'}, status=status.HTTP_200_OK)\n        \n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\ndef send_booking_confirmation_email(email, verify_url, subject, book, admin_email, admin_name):\n    context = {\n        'admin_name': admin_name,\n        'recipient_name': book.full_name,\n        'contact': book.phone_number,\n        'destination': book.destination.destination_title,\n        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),\n        'departure_date': book.departure_date.strftime('%d/%m/%Y'),\n        'preferred_service_type': book.service_type,\n    }\n\n    # Conditionally add 'activity' if it's not None\n    if book.activity:\n                context['activity'] = book.activity.name\n\n                # Conditionally add 'package' if it's not None\n    if book.package:\n                context['package'] = book.package.name\n\n\n    html_content = render_to_string('booking_confirmation.html', context)\n    from_email = f'Everest Thrills <{admin_email}>'\n\n    # Send email to the customer\n    recipient_list = [email]\n    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n\n    # Send email to the admin\n    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n    admin_context = context.copy()\n    admin_context['verification_url'] = verify_url\n    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n\n    # Fetch all admin users from the CustomUser model\n    admin_users = CustomUser.objects.filter(is_superuser=True)\n\n    # Check if there are any admin users\n    if admin_users.exists():\n        # Extract the emails of all admin users into a list\n        admin_recipient_list = [user.email for user in admin_users]\n        admin_recipient_list.append('everestthrill@gmail.com')\n        admin_name = admin_users[0].first_name  \n    else:\n        return Response({'detail': 'Admin emails not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n\n\nclass PasswordResetView(generics.GenericAPIView):\n\n            def generate_otp(self,user):\n                # Generate a random 5-digit OTP\n                # return \"12345\"\n                user = str(user)\n                return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n            \n            serializer_class = PasswordNumberSerializer\n            def post(self, request):\n                serializer = self.serializer_class(data=request.data)\n                serializer.is_valid(raise_exception=True)\n                email = serializer.data[\"email\"]\n                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n                if user:\n                \n                    otp = self.generate_otp(user.id)\n\n                    email_type = \"reset_password\"\n                    \n                    subject = 'Everest Thrill Password Reset OTP'\n                    if '@' in email:\n                        email = user.email\n                        sendPasswordResetMail(email, otp,subject,email_type,user)\n                    else:\n                        SendSms(contact=email,otp=otp,message=subject)\n                \n                    cache_key = f\"password_reset_otp_{user.id}\"\n                    cache.set(cache_key, otp, timeout=otp_time_expired)\n\n                    return response.Response(\n                        {\n                        \"message\":\"OTP has been sent to your email address\"\n                        },\n                        status=status.HTTP_200_OK,\n                    )\n                else:\n                    return response.Response(\n                        {\"message\": \"User doesn't exists\"},\n                        status=status.HTTP_400_BAD_REQUEST,\n                    )\n\ndef sendPasswordResetMail(email, otp, subject, email_type, user):\n    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n            \n    if email_type == \"reset_password\":  # Ensure this matches what is passed\n                context = {\n                    'otp': otp,\n                    'user': user,\n                    'verification_url': 'https://example.com/verify'\n                }\n                \n                password_html_contents = render_to_string('reset_password_otp.html', context)\n            \n    email_from = settings.EMAIL_HOST_USER\n    recipient_list = [email]\n    plain_message = \"\"\n    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)"
        }
    ]
}