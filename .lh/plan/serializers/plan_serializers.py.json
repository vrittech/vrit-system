{
    "sourceFile": "plan/serializers/plan_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1730101100490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730101113428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from rest_framework import serializers\n-from .models import Plan, Features, PlanHaveFeatures\n+from ..models import Plan, Features, PlanHaveFeatures\n \n # Serializer for Features\n class FeaturesSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1730101483014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,16 @@\n             'id', 'title', 'pricing', 'duration', 'description',\n             'features', 'is_show', 'position'\n         ]\n \n+    def validate_is_show(self, value):\n+        # Validate that at least 3 plans remain visible\n+        if not value:\n+            visible_plans_count = Plan.objects.filter(is_show=True).count()\n+            if visible_plans_count <= 3:\n+                raise serializers.ValidationError(\"At least 3 plans must be visible at all times.\")\n+        return value\n+\n     def create(self, validated_data):\n         features_data = validated_data.pop('features', [])\n         plan = Plan.objects.create(**validated_data)\n \n@@ -63,9 +71,17 @@\n         return plan\n \n     def update(self, instance, validated_data):\n         features_data = validated_data.pop('features', [])\n-        \n+\n+        # Validate the `is_show` field when updating\n+        if 'is_show' in validated_data:\n+            new_is_show = validated_data['is_show']\n+            if not new_is_show and Plan.objects.filter(is_show=True).count() <= 3:\n+                raise serializers.ValidationError(\n+                    \"At least 3 plans must be visible at all times.\"\n+                )\n+\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n         instance.save()\n \n@@ -73,5 +89,5 @@\n         instance.features.clear()\n         for feature in features_data:\n             PlanHaveFeatures.objects.create(plan=instance, feature=feature)\n \n-        return instance\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730101535501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         features = PlanHaveFeatures.objects.filter(plan=obj, status=True)\n         return PlanHaveFeaturesSerializer(features, many=True).data\n \n # Serializer for Plan (Retrieve)\n-class PlanRetrieveSerializer(serializers.ModelSerializer):\n+class PlanRetrieveSerializers(serializers.ModelSerializer):\n     features = PlanHaveFeaturesSerializer(source='planhavefeatures_set', many=True, read_only=True)\n \n     class Meta:\n         model = Plan\n"
                },
                {
                    "date": 1730101543228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         model = PlanHaveFeatures\n         fields = ['id', 'feature', 'status']\n \n # Serializer for Plan (List)\n-class PlanListSerializer(serializers.ModelSerializer):\n+class PlanListSerializers(serializers.ModelSerializer):\n     features = serializers.SerializerMethodField()\n \n     class Meta:\n         model = Plan\n@@ -41,9 +41,9 @@\n             'features', 'is_show', 'position', 'created_at', 'updated_at'\n         ]\n \n # Serializer for Plan (Create & Update)\n-class PlanWriteSerializer(serializers.ModelSerializer):\n+class PlanWriteSerializers(serializers.ModelSerializer):\n     features = serializers.PrimaryKeyRelatedField(queryset=Features.objects.all(), many=True)\n \n     class Meta:\n         model = Plan\n"
                }
            ],
            "date": 1730101100490,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom .models import Plan, Features, PlanHaveFeatures\n\n# Serializer for Features\nclass FeaturesSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Features\n        fields = ['id', 'title', 'is_feature_checked']\n\n# Serializer for PlanHaveFeatures\nclass PlanHaveFeaturesSerializer(serializers.ModelSerializer):\n    feature = FeaturesSerializer(read_only=True)\n\n    class Meta:\n        model = PlanHaveFeatures\n        fields = ['id', 'feature', 'status']\n\n# Serializer for Plan (List)\nclass PlanListSerializer(serializers.ModelSerializer):\n    features = serializers.SerializerMethodField()\n\n    class Meta:\n        model = Plan\n        fields = [\n            'id', 'title', 'pricing', 'duration', 'description',\n            'features', 'is_show', 'position', 'created_at', 'updated_at'\n        ]\n\n    def get_features(self, obj):\n        features = PlanHaveFeatures.objects.filter(plan=obj, status=True)\n        return PlanHaveFeaturesSerializer(features, many=True).data\n\n# Serializer for Plan (Retrieve)\nclass PlanRetrieveSerializer(serializers.ModelSerializer):\n    features = PlanHaveFeaturesSerializer(source='planhavefeatures_set', many=True, read_only=True)\n\n    class Meta:\n        model = Plan\n        fields = [\n            'id', 'title', 'pricing', 'duration', 'description',\n            'features', 'is_show', 'position', 'created_at', 'updated_at'\n        ]\n\n# Serializer for Plan (Create & Update)\nclass PlanWriteSerializer(serializers.ModelSerializer):\n    features = serializers.PrimaryKeyRelatedField(queryset=Features.objects.all(), many=True)\n\n    class Meta:\n        model = Plan\n        fields = [\n            'id', 'title', 'pricing', 'duration', 'description',\n            'features', 'is_show', 'position'\n        ]\n\n    def create(self, validated_data):\n        features_data = validated_data.pop('features', [])\n        plan = Plan.objects.create(**validated_data)\n\n        # Add features to the Plan through PlanHaveFeatures\n        for feature in features_data:\n            PlanHaveFeatures.objects.create(plan=plan, feature=feature)\n\n        return plan\n\n    def update(self, instance, validated_data):\n        features_data = validated_data.pop('features', [])\n        \n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        instance.save()\n\n        # Update PlanHaveFeatures for this Plan\n        instance.features.clear()\n        for feature in features_data:\n            PlanHaveFeatures.objects.create(plan=instance, feature=feature)\n\n        return instance\n"
        }
    ]
}