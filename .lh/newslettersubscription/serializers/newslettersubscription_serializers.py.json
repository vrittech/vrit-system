{
    "sourceFile": "newslettersubscription/serializers/newslettersubscription_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1730107261351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730107397450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +0,0 @@\n-from rest_framework import serializers\n-from ..models import NewsLetterSubscription\n-\n-# List Serializer\n-class NewsLetterSubscriptionListSerializer(serializers.ModelSerializer):\n-    created_at = serializers.ReadOnlyField()\n-    updated_at = serializers.ReadOnlyField()\n-\n-    class Meta:\n-        model = NewsLetterSubscription\n-        fields = [\n-            'id', 'email', 'is_subscribed', 'created_at', 'updated_at'\n-        ]\n-\n-\n-# Retrieve Serializer\n-class NewsLetterSubscriptionRetrieveSerializer(serializers.ModelSerializer):\n-    created_at = serializers.ReadOnlyField()\n-    updated_at = serializers.ReadOnlyField()\n-\n-    class Meta:\n-        model = NewsLetterSubscription\n-        fields = [\n-            'id', 'email', 'is_subscribed', 'created_at', 'updated_at'\n-        ]\n-\n-\n-# Write Serializer\n-class NewsLetterSubscriptionWriteSerializer(serializers.ModelSerializer):\n-\n-    class Meta:\n-        model = NewsLetterSubscription\n-        fields = [\n-            'id', 'email', 'is_subscribed'\n-        ]\n-\n-    def validate_email(self, value):\n-        # Validate that the email is not already subscribed\n-        if self.instance is None and NewsLetterSubscription.objects.filter(email=value).exists():\n-            raise serializers.ValidationError(\"This email is already subscribed.\")\n-        return value\n-\n-    def create(self, validated_data):\n-        return NewsLetterSubscription.objects.create(**validated_data)\n-\n-    def update(self, instance, validated_data):\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n-        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730107405371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,4 +5,66 @@\n     class Meta:\n         model = BlogCategory\n         fields = ['id', 'name']  # Adjust fields as needed\n \n+from rest_framework import serializers\n+from .models import NewsLetterSubscription\n+from blog.models import BlogCategory\n+\n+# Serializer for NewsLetterSubscription List\n+class NewsLetterSubscriptionListSerializer(serializers.ModelSerializer):\n+    category = BlogCategorySerializer(many=True, read_only=True)  # Nested representation of categories\n+\n+    class Meta:\n+        model = NewsLetterSubscription\n+        fields = [\n+            'id', 'name', 'email', 'is_subscribed', 'category', \n+            'date', 'created_at', 'updated_at'\n+        ]\n+\n+# Serializer for NewsLetterSubscription Retrieve\n+class NewsLetterSubscriptionRetrieveSerializer(serializers.ModelSerializer):\n+    category = BlogCategorySerializer(many=True, read_only=True)  # Nested representation of categories\n+\n+    class Meta:\n+        model = NewsLetterSubscription\n+        fields = [\n+            'id', 'name', 'email', 'is_subscribed', 'category', \n+            'date', 'created_at', 'updated_at'\n+        ]\n+\n+# Serializer for NewsLetterSubscription Create/Update\n+class NewsLetterSubscriptionWriteSerializer(serializers.ModelSerializer):\n+    category = serializers.PrimaryKeyRelatedField(\n+        queryset=BlogCategory.objects.all(), many=True, required=False\n+    )\n+\n+    class Meta:\n+        model = NewsLetterSubscription\n+        fields = [\n+            'id', 'name', 'email', 'is_subscribed', 'category', 'date'\n+        ]\n+\n+    def validate_email(self, value):\n+        # Validate that the email is unique when creating a new subscription\n+        if self.instance is None and NewsLetterSubscription.objects.filter(email=value).exists():\n+            raise serializers.ValidationError(\"This email is already subscribed.\")\n+        return value\n+\n+    def create(self, validated_data):\n+        categories = validated_data.pop('category', [])\n+        newsletter_subscription = NewsLetterSubscription.objects.create(**validated_data)\n+        newsletter_subscription.category.set(categories)\n+        return newsletter_subscription\n+\n+    def update(self, instance, validated_data):\n+        categories = validated_data.pop('category', [])\n+\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n+\n+        # Update the categories\n+        if categories:\n+            instance.category.set(categories)\n+\n+        return instance\n"
                }
            ],
            "date": 1730107261351,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import NewsLetterSubscription\n\n# List Serializer\nclass NewsLetterSubscriptionListSerializer(serializers.ModelSerializer):\n    created_at = serializers.ReadOnlyField()\n    updated_at = serializers.ReadOnlyField()\n\n    class Meta:\n        model = NewsLetterSubscription\n        fields = [\n            'id', 'email', 'is_subscribed', 'created_at', 'updated_at'\n        ]\n\n\n# Retrieve Serializer\nclass NewsLetterSubscriptionRetrieveSerializer(serializers.ModelSerializer):\n    created_at = serializers.ReadOnlyField()\n    updated_at = serializers.ReadOnlyField()\n\n    class Meta:\n        model = NewsLetterSubscription\n        fields = [\n            'id', 'email', 'is_subscribed', 'created_at', 'updated_at'\n        ]\n\n\n# Write Serializer\nclass NewsLetterSubscriptionWriteSerializer(serializers.ModelSerializer):\n\n    class Meta:\n        model = NewsLetterSubscription\n        fields = [\n            'id', 'email', 'is_subscribed'\n        ]\n\n    def validate_email(self, value):\n        # Validate that the email is not already subscribed\n        if self.instance is None and NewsLetterSubscription.objects.filter(email=value).exists():\n            raise serializers.ValidationError(\"This email is already subscribed.\")\n        return value\n\n    def create(self, validated_data):\n        return NewsLetterSubscription.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        instance.save()\n        return instance\n"
        }
    ]
}