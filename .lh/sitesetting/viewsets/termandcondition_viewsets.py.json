{
    "sourceFile": "sitesetting/viewsets/termandcondition_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1730113486352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730113497189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,11 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import TermAndCondition\n from ..serializers.termandcondition_serializers import TermAndConditionListSerializers, TermAndConditionRetrieveSerializers, TermAndConditionWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework import status\n \n class termandconditionViewsets(viewsets.ModelViewSet):\n     serializer_class = TermAndConditionListSerializers\n     # permission_classes = [sitesettingPermission]\n"
                },
                {
                    "date": 1730113505882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,54 +38,54 @@\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n             \n-@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n-def action_name(self, request, *args, **kwargs):\n-        description = request.data.get('description', None)\n-        \n-        if description is None:\n-            return Response({\"data\": None}, status=status.HTTP_200_OK)\n-        \n-        term_and_condition = TermAndCondition.objects.all()\n-        \n-        if term_and_condition.exists():\n-            # Update the existing term and condition\n-            term_and_condition = term_and_condition.first()\n-            term_and_condition.description = description\n-            term_and_condition.save()\n-            return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n-        else:\n-            # Create a new term and condition\n-            new_term_and_condition = TermAndCondition.objects.create(description=description)\n-            return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n-        \n-@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n-def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n-        try:\n-            # Assuming there's only one term and condition, get the first one.\n-            term_and_condition = TermAndCondition.objects.first()\n-            \n-            if not term_and_condition:\n-                return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-        \n-        except TermAndCondition.DoesNotExist:\n-            return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-\n-        if request.method == 'GET':\n-            # Retrieve the term and condition\n-            serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n-            return Response(serializer.data, status=status.HTTP_200_OK)\n-        \n-        elif request.method == 'PUT':\n-            # Update the term and condition\n+    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n+    def action_name(self, request, *args, **kwargs):\n             description = request.data.get('description', None)\n             \n             if description is None:\n-                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+                return Response({\"data\": None}, status=status.HTTP_200_OK)\n             \n-            term_and_condition.description = description\n-            term_and_condition.save()\n-            return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n+            term_and_condition = TermAndCondition.objects.all()\n+            \n+            if term_and_condition.exists():\n+                # Update the existing term and condition\n+                term_and_condition = term_and_condition.first()\n+                term_and_condition.description = description\n+                term_and_condition.save()\n+                return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n+            else:\n+                # Create a new term and condition\n+                new_term_and_condition = TermAndCondition.objects.create(description=description)\n+                return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n+            \n+    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n+    def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n+            try:\n+                # Assuming there's only one term and condition, get the first one.\n+                term_and_condition = TermAndCondition.objects.first()\n+                \n+                if not term_and_condition:\n+                    return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+            \n+            except TermAndCondition.DoesNotExist:\n+                return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n+            if request.method == 'GET':\n+                # Retrieve the term and condition\n+                serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n+                return Response(serializer.data, status=status.HTTP_200_OK)\n+            \n+            elif request.method == 'PUT':\n+                # Update the term and condition\n+                description = request.data.get('description', None)\n+                \n+                if description is None:\n+                    return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+                \n+                term_and_condition.description = description\n+                term_and_condition.save()\n+                return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n \n \n+\n"
                },
                {
                    "date": 1730267164603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,54 +38,34 @@\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n             \n-    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n-    def action_name(self, request, *args, **kwargs):\n+    @action(detail=False, methods=['get', 'post', 'put', 'patch'], name=\"manage-terms-and-conditions\", url_path=\"terms-and-conditions\")\n+    def manage_terms_and_conditions(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles creating, retrieving, updating, and partially updating the Terms and Conditions.\n+        \"\"\"\n+        # Fetch the first terms and conditions, assuming there's only one\n+        term_and_condition = TermAndCondition.objects.first()\n+\n+        if request.method == 'GET':\n+            # Retrieve the existing terms and conditions\n+            if not term_and_condition:\n+                return Response({\"data\": None}, status=status.HTTP_200_OK)\n+            serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n+            return Response(serializer.data, status=status.HTTP_200_OK)\n+\n+        elif request.method in ['POST', 'PUT', 'PATCH']:\n             description = request.data.get('description', None)\n-            \n+\n             if description is None:\n-                return Response({\"data\": None}, status=status.HTTP_200_OK)\n-            \n-            term_and_condition = TermAndCondition.objects.all()\n-            \n-            if term_and_condition.exists():\n-                # Update the existing term and condition\n-                term_and_condition = term_and_condition.first()\n+                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            if term_and_condition:\n+                # Update the existing terms and conditions\n                 term_and_condition.description = description\n                 term_and_condition.save()\n                 return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n             else:\n-                # Create a new term and condition\n+                # Create new terms and conditions\n                 new_term_and_condition = TermAndCondition.objects.create(description=description)\n-                return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n-            \n-    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n-    def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n-            try:\n-                # Assuming there's only one term and condition, get the first one.\n-                term_and_condition = TermAndCondition.objects.first()\n-                \n-                if not term_and_condition:\n-                    return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-            \n-            except TermAndCondition.DoesNotExist:\n-                return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-\n-            if request.method == 'GET':\n-                # Retrieve the term and condition\n-                serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n-                return Response(serializer.data, status=status.HTTP_200_OK)\n-            \n-            elif request.method == 'PUT':\n-                # Update the term and condition\n-                description = request.data.get('description', None)\n-                \n-                if description is None:\n-                    return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n-                \n-                term_and_condition.description = description\n-                term_and_condition.save()\n-                return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n-\n-\n-\n+                return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1730113486352,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import TermAndCondition\nfrom ..serializers.termandcondition_serializers import TermAndConditionListSerializers, TermAndConditionRetrieveSerializers, TermAndConditionWriteSerializers\nfrom ..utilities.importbase import *\n\nclass termandconditionViewsets(viewsets.ModelViewSet):\n    serializer_class = TermAndConditionListSerializers\n    # permission_classes = [sitesettingPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = TermAndCondition.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return TermAndConditionWriteSerializers\n        elif self.action == 'retrieve':\n            return TermAndConditionRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n    \n            \n@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\ndef action_name(self, request, *args, **kwargs):\n        description = request.data.get('description', None)\n        \n        if description is None:\n            return Response({\"data\": None}, status=status.HTTP_200_OK)\n        \n        term_and_condition = TermAndCondition.objects.all()\n        \n        if term_and_condition.exists():\n            # Update the existing term and condition\n            term_and_condition = term_and_condition.first()\n            term_and_condition.description = description\n            term_and_condition.save()\n            return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n        else:\n            # Create a new term and condition\n            new_term_and_condition = TermAndCondition.objects.create(description=description)\n            return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n        \n@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\ndef retrieve_update_term_and_condition(self, request, *args, **kwargs):\n        try:\n            # Assuming there's only one term and condition, get the first one.\n            term_and_condition = TermAndCondition.objects.first()\n            \n            if not term_and_condition:\n                return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n        \n        except TermAndCondition.DoesNotExist:\n            return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n\n        if request.method == 'GET':\n            # Retrieve the term and condition\n            serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        \n        elif request.method == 'PUT':\n            # Update the term and condition\n            description = request.data.get('description', None)\n            \n            if description is None:\n                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n            \n            term_and_condition.description = description\n            term_and_condition.save()\n            return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n\n\n\n"
        }
    ]
}