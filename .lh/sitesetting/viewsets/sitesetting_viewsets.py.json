{
    "sourceFile": "sitesetting/viewsets/sitesetting_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1730112766087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730112781508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import SiteSetting\n+from ..models import *\n from ..serializers.sitesetting_serializers import SiteSettingListSerializers, SiteSettingRetrieveSerializers, SiteSettingWriteSerializers\n from ..utilities.importbase import *\n \n class sitesettingViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1730112799889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,13 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import *\n from ..serializers.sitesetting_serializers import SiteSettingListSerializers, SiteSettingRetrieveSerializers, SiteSettingWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework import status\n \n+\n class sitesettingViewsets(viewsets.ModelViewSet):\n     serializer_class = SiteSettingListSerializers\n     # permission_classes = [sitesettingPermission]\n     # authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1730112805598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-     @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n+    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n     def action_name(self, request, *args, **kwargs):\n         description = request.data.get('description', None)\n         \n         if description is None:\n"
                },
                {
                    "date": 1730112865713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import *\n-from ..serializers.sitesetting_serializers import SiteSettingListSerializers, SiteSettingRetrieveSerializers, SiteSettingWriteSerializers\n+from ..serializers.sitesetting_serializers import *\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n"
                },
                {
                    "date": 1730112892162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,5 +86,7 @@\n             \n             privacy_policy.description = description\n             privacy_policy.save()\n             return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+        \n+        \n \n"
                },
                {
                    "date": 1730113234128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,54 +39,5 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n-    def action_name(self, request, *args, **kwargs):\n-        description = request.data.get('description', None)\n-        \n-        if description is None:\n-            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n-        \n-        privacy_policy = PrivacyPolicy.objects.all()\n-        \n-        if privacy_policy.exists():\n-            # Update the existing privacy policy\n-            privacy_policy = privacy_policy.first()\n-            privacy_policy.description = description\n-            privacy_policy.save()\n-            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n-        else:\n-            # Create a new privacy policy\n-            new_policy = PrivacyPolicy.objects.create(description=description)\n-            return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n-        \n-    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n-    def retrieve_update_policy(self, request, *args, **kwargs):\n-        try:\n-            # Assuming there's only one privacy policy, get the first one.\n-            privacy_policy = PrivacyPolicy.objects.first()\n-            \n-            if not privacy_policy:\n-                return Response({\"data\": None}, status=status.HTTP_200_OK)\n-        \n-        except PrivacyPolicy.DoesNotExist:\n-            return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-\n-        if request.method == 'GET':\n-            # Retrieve the privacy policy\n-            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n-            return Response(serializer.data, status=status.HTTP_200_OK)\n-        \n-        elif request.method == 'PUT':\n-            # Update the privacy policy\n-            description = request.data.get('description', None)\n-            \n-            if description is None:\n-                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n-            \n-            privacy_policy.description = description\n-            privacy_policy.save()\n-            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n-        \n-        \n-\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1730114097237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,67 @@\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n+from rest_framework import viewsets, status\n+from rest_framework.response import Response\n+from rest_framework.decorators import action\n+from ..models import SiteSetting\n+from ..serializers.sitesetting_serializers import (\n+    SiteSettingListSerializers,\n+    SiteSettingRetrieveSerializers,\n+    SiteSettingWriteSerializers\n+)\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import *\n-from ..serializers.sitesetting_serializers import *\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from rest_framework import status\n \n+class SiteSettingViewSet(viewsets.ViewSet):\n+    \"\"\"\n+    This ViewSet is designed to manage a single instance of SiteSetting.\n+    \"\"\"\n+    def get_object(self):\n+        # Retrieve the single SiteSetting instance or return 404 if not found\n+        obj = SiteSetting.objects.first()\n+        if obj is None:\n+            self.create_initial_object()\n+            obj = SiteSetting.objects.first()\n+        return obj\n \n-class sitesettingViewsets(viewsets.ModelViewSet):\n-    serializer_class = SiteSettingListSerializers\n-    # permission_classes = [sitesettingPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = SiteSetting.objects.all()\n+    def create_initial_object(self):\n+        # Create an initial object if none exists\n+        if SiteSetting.objects.count() == 0:\n+            SiteSetting.objects.create(\n+                experience_number=0,\n+                success_stories_number=0,\n\\ No newline at end of file\n+                team_member_number=0,\n+                project_completed_number=0\n+            )\n \n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n+    def list(self, request):\n+        obj = self.get_object()\n+        serializer = SiteSettingListSerializers(obj)\n+        return Response(serializer.data)\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    def retrieve(self, request, pk=None):\n+        obj = self.get_object()\n+        serializer = SiteSettingRetrieveSerializers(obj)\n+        return Response(serializer.data)\n \n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n+    def create(self, request):\n+        if SiteSetting.objects.exists():\n+            return Response(\n+                {\"detail\": \"SiteSetting already exists. Use PUT or PATCH to update.\"},\n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+        serializer = SiteSettingWriteSerializers(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        serializer.save()\n+        return Response(serializer.data, status=status.HTTP_201_CREATED)\n \n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return SiteSettingWriteSerializers\n-        elif self.action == 'retrieve':\n-            return SiteSettingRetrieveSerializers\n-        return super().get_serializer_class()\n+    def update(self, request, pk=None):\n+        obj = self.get_object()\n+        serializer = SiteSettingWriteSerializers(obj, data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        serializer.save()\n+        return Response(serializer.data, status=status.HTTP_200_OK)\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-    \n-    \n+    def partial_update(self, request, pk=None):\n+        obj = self.get_object()\n+        serializer = SiteSettingWriteSerializers(obj, data=request.data, partial=True)\n+        serializer.is_valid(raise_exception=True)\n+        serializer.save()\n+        return Response(serializer.data, status=status.HTTP_200_OK)\n"
                },
                {
                    "date": 1730114107106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,67 +1,43 @@\n-from rest_framework import viewsets, status\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import *\n+from ..serializers.sitesetting_serializers import *\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n from rest_framework.response import Response\n-from rest_framework.decorators import action\n-from ..models import SiteSetting\n-from ..serializers.sitesetting_serializers import (\n-    SiteSettingListSerializers,\n-    SiteSettingRetrieveSerializers,\n-    SiteSettingWriteSerializers\n-)\n-from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework import status\n \n-class SiteSettingViewSet(viewsets.ViewSet):\n-    \"\"\"\n-    This ViewSet is designed to manage a single instance of SiteSetting.\n-    \"\"\"\n-    def get_object(self):\n-        # Retrieve the single SiteSetting instance or return 404 if not found\n-        obj = SiteSetting.objects.first()\n-        if obj is None:\n-            self.create_initial_object()\n-            obj = SiteSetting.objects.first()\n-        return obj\n \n-    def create_initial_object(self):\n-        # Create an initial object if none exists\n-        if SiteSetting.objects.count() == 0:\n-            SiteSetting.objects.create(\n-                experience_number=0,\n-                success_stories_number=0,\n-                team_member_number=0,\n-                project_completed_number=0\n-            )\n+class sitesettingViewsets(viewsets.ModelViewSet):\n+    serializer_class = SiteSettingListSerializers\n+    # permission_classes = [sitesettingPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = SiteSetting.objects.all()\n \n-    def list(self, request):\n-        obj = self.get_object()\n-        serializer = SiteSettingListSerializers(obj)\n-        return Response(serializer.data)\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id']\n+    ordering_fields = ['id']\n \n-    def retrieve(self, request, pk=None):\n-        obj = self.get_object()\n-        serializer = SiteSettingRetrieveSerializers(obj)\n-        return Response(serializer.data)\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    # }\n \n-    def create(self, request):\n-        if SiteSetting.objects.exists():\n-            return Response(\n-                {\"detail\": \"SiteSetting already exists. Use PUT or PATCH to update.\"},\n\\ No newline at end of file\n-                status=status.HTTP_400_BAD_REQUEST\n-            )\n-        serializer = SiteSettingWriteSerializers(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        serializer.save()\n-        return Response(serializer.data, status=status.HTTP_201_CREATED)\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+        #return queryset.filter(user_id=self.request.user.id)\n \n-    def update(self, request, pk=None):\n-        obj = self.get_object()\n-        serializer = SiteSettingWriteSerializers(obj, data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        serializer.save()\n-        return Response(serializer.data, status=status.HTTP_200_OK)\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return SiteSettingWriteSerializers\n+        elif self.action == 'retrieve':\n+            return SiteSettingRetrieveSerializers\n+        return super().get_serializer_class()\n \n-    def partial_update(self, request, pk=None):\n-        obj = self.get_object()\n-        serializer = SiteSettingWriteSerializers(obj, data=request.data, partial=True)\n-        serializer.is_valid(raise_exception=True)\n-        serializer.save()\n-        return Response(serializer.data, status=status.HTTP_200_OK)\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1730114113817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,110 @@\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n+# from rest_framework import viewsets\n+# from rest_framework.filters import SearchFilter, OrderingFilter\n+# from django_filters.rest_framework import DjangoFilterBackend\n+# from ..models import *\n+# from ..serializers.sitesetting_serializers import *\n+# from ..utilities.importbase import *\n+# from rest_framework.decorators import action\n+# from rest_framework.response import Response\n+# from rest_framework import status\n+\n+\n+# class sitesettingViewsets(viewsets.ModelViewSet):\n+#     serializer_class = SiteSettingListSerializers\n+#     # permission_classes = [sitesettingPermission]\n+#     # authentication_classes = [JWTAuthentication]\n+#     pagination_class = MyPageNumberPagination\n+#     queryset = SiteSetting.objects.all()\n+\n+#     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+#     search_fields = ['id']\n+#     ordering_fields = ['id']\n+\n+#     # filterset_fields = {\n+#     #     'id': ['exact'],\n+#     # }\n+\n+#     def get_queryset(self):\n+#         queryset = super().get_queryset()\n+#         return queryset\n+#         #return queryset.filter(user_id=self.request.user.id)\n+\n+#     def get_serializer_class(self):\n+#         if self.action in ['create', 'update', 'partial_update']:\n+#             return SiteSettingWriteSerializers\n+#         elif self.action == 'retrieve':\n+#             return SiteSettingRetrieveSerializers\n+#         return super().get_serializer_class()\n+\n+#     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+#     # def action_name(self, request, *args, **kwargs):\n+#     #     return super().list(request, *args, **kwargs)\n\\ No newline at end of file\n+    \n+\n+from rest_framework import viewsets, status\n+from rest_framework.response import Response\n+from rest_framework.decorators import action\n+from ..models import SiteSetting\n+from ..serializers.sitesetting_serializers import (\n+    SiteSettingListSerializers,\n+    SiteSettingRetrieveSerializers,\n+    SiteSettingWriteSerializers\n+)\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import *\n-from ..serializers.sitesetting_serializers import *\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from rest_framework import status\n \n+class SiteSettingViewSet(viewsets.ViewSet):\n+    \"\"\"\n+    This ViewSet is designed to manage a single instance of SiteSetting.\n+    \"\"\"\n+    def get_object(self):\n+        # Retrieve the single SiteSetting instance or return 404 if not found\n+        obj = SiteSetting.objects.first()\n+        if obj is None:\n+            self.create_initial_object()\n+            obj = SiteSetting.objects.first()\n+        return obj\n \n-class sitesettingViewsets(viewsets.ModelViewSet):\n-    serializer_class = SiteSettingListSerializers\n-    # permission_classes = [sitesettingPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = SiteSetting.objects.all()\n+    def create_initial_object(self):\n+        # Create an initial object if none exists\n+        if SiteSetting.objects.count() == 0:\n+            SiteSetting.objects.create(\n+                experience_number=0,\n+                success_stories_number=0,\n+                team_member_number=0,\n+                project_completed_number=0\n+            )\n \n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n+    def list(self, request):\n+        obj = self.get_object()\n+        serializer = SiteSettingListSerializers(obj)\n+        return Response(serializer.data)\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    def retrieve(self, request, pk=None):\n+        obj = self.get_object()\n+        serializer = SiteSettingRetrieveSerializers(obj)\n+        return Response(serializer.data)\n \n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-        #return queryset.filter(user_id=self.request.user.id)\n+    def create(self, request):\n+        if SiteSetting.objects.exists():\n+            return Response(\n+                {\"detail\": \"SiteSetting already exists. Use PUT or PATCH to update.\"},\n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+        serializer = SiteSettingWriteSerializers(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        serializer.save()\n+        return Response(serializer.data, status=status.HTTP_201_CREATED)\n \n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return SiteSettingWriteSerializers\n-        elif self.action == 'retrieve':\n-            return SiteSettingRetrieveSerializers\n-        return super().get_serializer_class()\n+    def update(self, request, pk=None):\n+        obj = self.get_object()\n+        serializer = SiteSettingWriteSerializers(obj, data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        serializer.save()\n+        return Response(serializer.data, status=status.HTTP_200_OK)\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-    \n-    \n+    def partial_update(self, request, pk=None):\n+        obj = self.get_object()\n+        serializer = SiteSettingWriteSerializers(obj, data=request.data, partial=True)\n+        serializer.is_valid(raise_exception=True)\n+        serializer.save()\n+        return Response(serializer.data, status=status.HTTP_200_OK)\n"
                },
                {
                    "date": 1730114123448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     SiteSettingWriteSerializers\n )\n from django_filters.rest_framework import DjangoFilterBackend\n \n-class SiteSettingViewSet(viewsets.ViewSet):\n+class sitesettingViewsets(viewsets.ViewSet):\n     \"\"\"\n     This ViewSet is designed to manage a single instance of SiteSetting.\n     \"\"\"\n     def get_object(self):\n"
                },
                {
                    "date": 1730114138522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,6 @@\n-# from rest_framework import viewsets\n-# from rest_framework.filters import SearchFilter, OrderingFilter\n-# from django_filters.rest_framework import DjangoFilterBackend\n-# from ..models import *\n-# from ..serializers.sitesetting_serializers import *\n-# from ..utilities.importbase import *\n-# from rest_framework.decorators import action\n-# from rest_framework.response import Response\n-# from rest_framework import status\n \n \n-# class sitesettingViewsets(viewsets.ModelViewSet):\n-#     serializer_class = SiteSettingListSerializers\n-#     # permission_classes = [sitesettingPermission]\n-#     # authentication_classes = [JWTAuthentication]\n-#     pagination_class = MyPageNumberPagination\n-#     queryset = SiteSetting.objects.all()\n-\n-#     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-#     search_fields = ['id']\n-#     ordering_fields = ['id']\n-\n-#     # filterset_fields = {\n-#     #     'id': ['exact'],\n-#     # }\n-\n-#     def get_queryset(self):\n-#         queryset = super().get_queryset()\n-#         return queryset\n-#         #return queryset.filter(user_id=self.request.user.id)\n-\n-#     def get_serializer_class(self):\n-#         if self.action in ['create', 'update', 'partial_update']:\n-#             return SiteSettingWriteSerializers\n-#         elif self.action == 'retrieve':\n-#             return SiteSettingRetrieveSerializers\n-#         return super().get_serializer_class()\n-\n-#     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-#     # def action_name(self, request, *args, **kwargs):\n-#     #     return super().list(request, *args, **kwargs)\n-    \n-\n from rest_framework import viewsets, status\n from rest_framework.response import Response\n from rest_framework.decorators import action\n from ..models import SiteSetting\n@@ -106,5 +65,5 @@\n         obj = self.get_object()\n         serializer = SiteSettingWriteSerializers(obj, data=request.data, partial=True)\n         serializer.is_valid(raise_exception=True)\n         serializer.save()\n-        return Response(serializer.data, status=status.HTTP_200_OK)\n\\ No newline at end of file\n+        return Response(serializer.data, status=status.HTTP_200_OK)\n"
                },
                {
                    "date": 1730114172058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-\n-\n from rest_framework import viewsets, status\n from rest_framework.response import Response\n from rest_framework.decorators import action\n from ..models import SiteSetting\n"
                }
            ],
            "date": 1730112766087,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import SiteSetting\nfrom ..serializers.sitesetting_serializers import SiteSettingListSerializers, SiteSettingRetrieveSerializers, SiteSettingWriteSerializers\nfrom ..utilities.importbase import *\n\nclass sitesettingViewsets(viewsets.ModelViewSet):\n    serializer_class = SiteSettingListSerializers\n    # permission_classes = [sitesettingPermission]\n    # authentication_classes = [JWTAuthentication]\n    pagination_class = MyPageNumberPagination\n    queryset = SiteSetting.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return SiteSettingWriteSerializers\n        elif self.action == 'retrieve':\n            return SiteSettingRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n    \n     @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n    def action_name(self, request, *args, **kwargs):\n        description = request.data.get('description', None)\n        \n        if description is None:\n            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n        \n        privacy_policy = PrivacyPolicy.objects.all()\n        \n        if privacy_policy.exists():\n            # Update the existing privacy policy\n            privacy_policy = privacy_policy.first()\n            privacy_policy.description = description\n            privacy_policy.save()\n            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n        else:\n            # Create a new privacy policy\n            new_policy = PrivacyPolicy.objects.create(description=description)\n            return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n        \n    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n    def retrieve_update_policy(self, request, *args, **kwargs):\n        try:\n            # Assuming there's only one privacy policy, get the first one.\n            privacy_policy = PrivacyPolicy.objects.first()\n            \n            if not privacy_policy:\n                return Response({\"data\": None}, status=status.HTTP_200_OK)\n        \n        except PrivacyPolicy.DoesNotExist:\n            return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n\n        if request.method == 'GET':\n            # Retrieve the privacy policy\n            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        \n        elif request.method == 'PUT':\n            # Update the privacy policy\n            description = request.data.get('description', None)\n            \n            if description is None:\n                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n            \n            privacy_policy.description = description\n            privacy_policy.save()\n            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n\n"
        }
    ]
}