{
    "sourceFile": "sitesetting/viewsets/privacypolicy_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1730113416308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730113454837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return PrivacyPolicyWriteSerializers\n@@ -33,5 +33,54 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+    \n+    # Create your views here.\n+@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n+def action_name(self, request, *args, **kwargs):\n+        description = request.data.get('description', None)\n+        \n+        if description is None:\n+            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        privacy_policy = PrivacyPolicy.objects.all()\n+        \n+        if privacy_policy.exists():\n+            # Update the existing privacy policy\n+            privacy_policy = privacy_policy.first()\n+            privacy_policy.description = description\n+            privacy_policy.save()\n+            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+        else:\n+            # Create a new privacy policy\n+            new_policy = PrivacyPolicy.objects.create(description=description)\n+            return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n+        \n+@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n+def retrieve_update_policy(self, request, *args, **kwargs):\n+        try:\n+            # Assuming there's only one privacy policy, get the first one.\n+            privacy_policy = PrivacyPolicy.objects.first()\n+            \n+            if not privacy_policy:\n+                return Response({\"data\": None}, status=status.HTTP_200_OK)\n+        \n+        except PrivacyPolicy.DoesNotExist:\n+            return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n+        if request.method == 'GET':\n+            # Retrieve the privacy policy\n+            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n+            return Response(serializer.data, status=status.HTTP_200_OK)\n+        \n+        elif request.method == 'PUT':\n+            # Update the privacy policy\n+            description = request.data.get('description', None)\n+            \n+            if description is None:\n+                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+            \n+            privacy_policy.description = description\n+            privacy_policy.save()\n+            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+\n"
                },
                {
                    "date": 1730113468411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,11 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import PrivacyPolicy\n from ..serializers.privacypolicy_serializers import PrivacyPolicyListSerializers, PrivacyPolicyRetrieveSerializers, PrivacyPolicyWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework import status\n \n class privacypolicyViewsets(viewsets.ModelViewSet):\n     serializer_class = PrivacyPolicyListSerializers\n     # permission_classes = [sitesettingPermission]\n"
                },
                {
                    "date": 1730113522591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,52 +38,52 @@\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n     # Create your views here.\n-@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n-def action_name(self, request, *args, **kwargs):\n-        description = request.data.get('description', None)\n-        \n-        if description is None:\n-            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n-        \n-        privacy_policy = PrivacyPolicy.objects.all()\n-        \n-        if privacy_policy.exists():\n-            # Update the existing privacy policy\n-            privacy_policy = privacy_policy.first()\n-            privacy_policy.description = description\n-            privacy_policy.save()\n-            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n-        else:\n-            # Create a new privacy policy\n-            new_policy = PrivacyPolicy.objects.create(description=description)\n-            return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n-        \n-@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n-def retrieve_update_policy(self, request, *args, **kwargs):\n-        try:\n-            # Assuming there's only one privacy policy, get the first one.\n-            privacy_policy = PrivacyPolicy.objects.first()\n-            \n-            if not privacy_policy:\n-                return Response({\"data\": None}, status=status.HTTP_200_OK)\n-        \n-        except PrivacyPolicy.DoesNotExist:\n-            return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-\n-        if request.method == 'GET':\n-            # Retrieve the privacy policy\n-            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n-            return Response(serializer.data, status=status.HTTP_200_OK)\n-        \n-        elif request.method == 'PUT':\n-            # Update the privacy policy\n+    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n+    def action_name(self, request, *args, **kwargs):\n             description = request.data.get('description', None)\n             \n             if description is None:\n                 return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n             \n-            privacy_policy.description = description\n-            privacy_policy.save()\n-            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+            privacy_policy = PrivacyPolicy.objects.all()\n+            \n+            if privacy_policy.exists():\n+                # Update the existing privacy policy\n+                privacy_policy = privacy_policy.first()\n+                privacy_policy.description = description\n+                privacy_policy.save()\n+                return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+            else:\n+                # Create a new privacy policy\n+                new_policy = PrivacyPolicy.objects.create(description=description)\n+                return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n+            \n+    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n+    def retrieve_update_policy(self, request, *args, **kwargs):\n+            try:\n+                # Assuming there's only one privacy policy, get the first one.\n+                privacy_policy = PrivacyPolicy.objects.first()\n+                \n+                if not privacy_policy:\n+                    return Response({\"data\": None}, status=status.HTTP_200_OK)\n+            \n+            except PrivacyPolicy.DoesNotExist:\n+                return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n+            if request.method == 'GET':\n+                # Retrieve the privacy policy\n+                serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n+                return Response(serializer.data, status=status.HTTP_200_OK)\n+            \n+            elif request.method == 'PUT':\n+                # Update the privacy policy\n+                description = request.data.get('description', None)\n+                \n+                if description is None:\n+                    return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+                \n+                privacy_policy.description = description\n+                privacy_policy.save()\n+                return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+\n"
                },
                {
                    "date": 1730267126236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,53 +37,34 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    # Create your views here.\n-    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n-    def action_name(self, request, *args, **kwargs):\n+    @action(detail=False, methods=['get', 'post', 'put', 'patch'], name=\"manage-privacy-policy\", url_path=\"privacy-policy\")\n+    def manage_privacy_policy(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles creating, retrieving, updating, and partially updating the Privacy Policy.\n+        \"\"\"\n+        # Fetch the first privacy policy, assuming there's only one\n+        privacy_policy = PrivacyPolicy.objects.first()\n+\n+        if request.method == 'GET':\n+            # Retrieve the existing privacy policy\n+            if not privacy_policy:\n+                return Response({\"data\": None}, status=status.HTTP_200_OK)\n+            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n+            return Response(serializer.data, status=status.HTTP_200_OK)\n+\n+        elif request.method in ['POST', 'PUT', 'PATCH']:\n             description = request.data.get('description', None)\n-            \n+\n             if description is None:\n                 return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n-            \n-            privacy_policy = PrivacyPolicy.objects.all()\n-            \n-            if privacy_policy.exists():\n+\n+            if privacy_policy:\n                 # Update the existing privacy policy\n-                privacy_policy = privacy_policy.first()\n                 privacy_policy.description = description\n                 privacy_policy.save()\n                 return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n             else:\n                 # Create a new privacy policy\n                 new_policy = PrivacyPolicy.objects.create(description=description)\n-                return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n-            \n-    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n-    def retrieve_update_policy(self, request, *args, **kwargs):\n-            try:\n-                # Assuming there's only one privacy policy, get the first one.\n-                privacy_policy = PrivacyPolicy.objects.first()\n-                \n-                if not privacy_policy:\n-                    return Response({\"data\": None}, status=status.HTTP_200_OK)\n-            \n-            except PrivacyPolicy.DoesNotExist:\n-                return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-\n-            if request.method == 'GET':\n-                # Retrieve the privacy policy\n-                serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n-                return Response(serializer.data, status=status.HTTP_200_OK)\n-            \n-            elif request.method == 'PUT':\n-                # Update the privacy policy\n-                description = request.data.get('description', None)\n-                \n-                if description is None:\n-                    return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n-                \n-                privacy_policy.description = description\n-                privacy_policy.save()\n-                return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n-\n+                return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1730113416308,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import PrivacyPolicy\nfrom ..serializers.privacypolicy_serializers import PrivacyPolicyListSerializers, PrivacyPolicyRetrieveSerializers, PrivacyPolicyWriteSerializers\nfrom ..utilities.importbase import *\n\nclass privacypolicyViewsets(viewsets.ModelViewSet):\n    serializer_class = PrivacyPolicyListSerializers\n    # permission_classes = [sitesettingPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = PrivacyPolicy.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return PrivacyPolicyWriteSerializers\n        elif self.action == 'retrieve':\n            return PrivacyPolicyRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}