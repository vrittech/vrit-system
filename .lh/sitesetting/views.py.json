{
    "sourceFile": "sitesetting/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1730113237536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730113253137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,16 @@\n from django.shortcuts import render\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import *\n+from ..serializers.sitesetting_serializers import *\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework import status\n \n+\n # Create your views here.\n @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n     def action_name(self, request, *args, **kwargs):\n         description = request.data.get('description', None)\n"
                },
                {
                    "date": 1730113258662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n from django.shortcuts import render\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import *\n-from ..serializers.sitesetting_serializers import *\n+from .models import *\n+from .serializers.sitesetting_serializers import *\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n"
                },
                {
                    "date": 1730113265200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,17 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from .models import *\n from .serializers.sitesetting_serializers import *\n-from ..utilities.importbase import *\n+from .utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n \n \n # Create your views here.\n @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n-    def action_name(self, request, *args, **kwargs):\n+def action_name(self, request, *args, **kwargs):\n         description = request.data.get('description', None)\n         \n         if description is None:\n             return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1730113271809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,10 @@\n             # Create a new privacy policy\n             new_policy = PrivacyPolicy.objects.create(description=description)\n             return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n         \n-    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n-    def retrieve_update_policy(self, request, *args, **kwargs):\n+@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n+def retrieve_update_policy(self, request, *args, **kwargs):\n         try:\n             # Assuming there's only one privacy policy, get the first one.\n             privacy_policy = PrivacyPolicy.objects.first()\n             \n@@ -58,10 +58,10 @@\n             privacy_policy.description = description\n             privacy_policy.save()\n             return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n         \n-    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n-    def action_name(self, request, *args, **kwargs):\n+@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n+def action_name(self, request, *args, **kwargs):\n         description = request.data.get('description', None)\n         \n         if description is None:\n             return Response({\"data\": None}, status=status.HTTP_200_OK)\n"
                },
                {
                    "date": 1730113277395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,10 +78,10 @@\n             # Create a new term and condition\n             new_term_and_condition = TermAndCondition.objects.create(description=description)\n             return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n         \n-    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n-    def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n+@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n+def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n         try:\n             # Assuming there's only one term and condition, get the first one.\n             term_and_condition = TermAndCondition.objects.first()\n             \n"
                },
                {
                    "date": 1730113303893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,109 +1,109 @@\n-from django.shortcuts import render\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from .models import *\n-from .serializers.sitesetting_serializers import *\n-from .utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from rest_framework import status\n+# from django.shortcuts import render\n+# from rest_framework import viewsets\n+# from rest_framework.filters import SearchFilter, OrderingFilter\n+# from django_filters.rest_framework import DjangoFilterBackend\n+# from .models import *\n+# from .serializers.sitesetting_serializers import *\n+# from .utilities.importbase import *\n+# from rest_framework.decorators import action\n+# from rest_framework.response import Response\n+# from rest_framework import status\n \n \n-# Create your views here.\n-@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n-def action_name(self, request, *args, **kwargs):\n-        description = request.data.get('description', None)\n+# # Create your views here.\n+# @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n+# def action_name(self, request, *args, **kwargs):\n+#         description = request.data.get('description', None)\n         \n-        if description is None:\n-            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+#         if description is None:\n+#             return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n         \n-        privacy_policy = PrivacyPolicy.objects.all()\n+#         privacy_policy = PrivacyPolicy.objects.all()\n         \n-        if privacy_policy.exists():\n-            # Update the existing privacy policy\n-            privacy_policy = privacy_policy.first()\n-            privacy_policy.description = description\n-            privacy_policy.save()\n-            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n-        else:\n-            # Create a new privacy policy\n-            new_policy = PrivacyPolicy.objects.create(description=description)\n-            return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n+#         if privacy_policy.exists():\n+#             # Update the existing privacy policy\n+#             privacy_policy = privacy_policy.first()\n+#             privacy_policy.description = description\n+#             privacy_policy.save()\n+#             return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+#         else:\n+#             # Create a new privacy policy\n+#             new_policy = PrivacyPolicy.objects.create(description=description)\n+#             return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n         \n-@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n-def retrieve_update_policy(self, request, *args, **kwargs):\n-        try:\n-            # Assuming there's only one privacy policy, get the first one.\n-            privacy_policy = PrivacyPolicy.objects.first()\n+# @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n+# def retrieve_update_policy(self, request, *args, **kwargs):\n+#         try:\n+#             # Assuming there's only one privacy policy, get the first one.\n+#             privacy_policy = PrivacyPolicy.objects.first()\n             \n-            if not privacy_policy:\n-                return Response({\"data\": None}, status=status.HTTP_200_OK)\n+#             if not privacy_policy:\n+#                 return Response({\"data\": None}, status=status.HTTP_200_OK)\n         \n-        except PrivacyPolicy.DoesNotExist:\n-            return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+#         except PrivacyPolicy.DoesNotExist:\n+#             return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-        if request.method == 'GET':\n-            # Retrieve the privacy policy\n-            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n-            return Response(serializer.data, status=status.HTTP_200_OK)\n+#         if request.method == 'GET':\n+#             # Retrieve the privacy policy\n+#             serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n+#             return Response(serializer.data, status=status.HTTP_200_OK)\n         \n-        elif request.method == 'PUT':\n-            # Update the privacy policy\n-            description = request.data.get('description', None)\n+#         elif request.method == 'PUT':\n+#             # Update the privacy policy\n+#             description = request.data.get('description', None)\n             \n-            if description is None:\n-                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+#             if description is None:\n+#                 return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n             \n-            privacy_policy.description = description\n-            privacy_policy.save()\n-            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+#             privacy_policy.description = description\n+#             privacy_policy.save()\n+#             return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n         \n-@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n-def action_name(self, request, *args, **kwargs):\n-        description = request.data.get('description', None)\n+# @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n+# def action_name(self, request, *args, **kwargs):\n+#         description = request.data.get('description', None)\n         \n-        if description is None:\n-            return Response({\"data\": None}, status=status.HTTP_200_OK)\n+#         if description is None:\n+#             return Response({\"data\": None}, status=status.HTTP_200_OK)\n         \n-        term_and_condition = TermAndCondition.objects.all()\n+#         term_and_condition = TermAndCondition.objects.all()\n         \n-        if term_and_condition.exists():\n-            # Update the existing term and condition\n-            term_and_condition = term_and_condition.first()\n-            term_and_condition.description = description\n-            term_and_condition.save()\n-            return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n-        else:\n-            # Create a new term and condition\n-            new_term_and_condition = TermAndCondition.objects.create(description=description)\n-            return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n+#         if term_and_condition.exists():\n+#             # Update the existing term and condition\n+#             term_and_condition = term_and_condition.first()\n+#             term_and_condition.description = description\n+#             term_and_condition.save()\n+#             return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n+#         else:\n+#             # Create a new term and condition\n+#             new_term_and_condition = TermAndCondition.objects.create(description=description)\n+#             return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n         \n-@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n-def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n-        try:\n-            # Assuming there's only one term and condition, get the first one.\n-            term_and_condition = TermAndCondition.objects.first()\n+# @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n+# def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n+#         try:\n+#             # Assuming there's only one term and condition, get the first one.\n+#             term_and_condition = TermAndCondition.objects.first()\n             \n-            if not term_and_condition:\n-                return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+#             if not term_and_condition:\n+#                 return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n         \n-        except TermAndCondition.DoesNotExist:\n-            return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+#         except TermAndCondition.DoesNotExist:\n+#             return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-        if request.method == 'GET':\n-            # Retrieve the term and condition\n-            serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n-            return Response(serializer.data, status=status.HTTP_200_OK)\n+#         if request.method == 'GET':\n+#             # Retrieve the term and condition\n+#             serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n+#             return Response(serializer.data, status=status.HTTP_200_OK)\n         \n-        elif request.method == 'PUT':\n-            # Update the term and condition\n-            description = request.data.get('description', None)\n+#         elif request.method == 'PUT':\n+#             # Update the term and condition\n+#             description = request.data.get('description', None)\n             \n-            if description is None:\n-                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+#             if description is None:\n+#                 return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n             \n-            term_and_condition.description = description\n-            term_and_condition.save()\n-            return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n+#             term_and_condition.description = description\n+#             term_and_condition.save()\n+#             return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n \n"
                },
                {
                    "date": 1730113438350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,109 +1,109 @@\n-# from django.shortcuts import render\n-# from rest_framework import viewsets\n-# from rest_framework.filters import SearchFilter, OrderingFilter\n-# from django_filters.rest_framework import DjangoFilterBackend\n-# from .models import *\n-# from .serializers.sitesetting_serializers import *\n-# from .utilities.importbase import *\n-# from rest_framework.decorators import action\n-# from rest_framework.response import Response\n-# from rest_framework import status\n+from django.shortcuts import render\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from .models import *\n+from .serializers.sitesetting_serializers import *\n+from .utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework import status\n \n \n-# # Create your views here.\n-# @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n-# def action_name(self, request, *args, **kwargs):\n-#         description = request.data.get('description', None)\n+# Create your views here.\n+@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n+def action_name(self, request, *args, **kwargs):\n+        description = request.data.get('description', None)\n         \n-#         if description is None:\n-#             return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        if description is None:\n+            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n         \n-#         privacy_policy = PrivacyPolicy.objects.all()\n+        privacy_policy = PrivacyPolicy.objects.all()\n         \n-#         if privacy_policy.exists():\n-#             # Update the existing privacy policy\n-#             privacy_policy = privacy_policy.first()\n-#             privacy_policy.description = description\n-#             privacy_policy.save()\n-#             return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n-#         else:\n-#             # Create a new privacy policy\n-#             new_policy = PrivacyPolicy.objects.create(description=description)\n-#             return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n+        if privacy_policy.exists():\n+            # Update the existing privacy policy\n+            privacy_policy = privacy_policy.first()\n+            privacy_policy.description = description\n+            privacy_policy.save()\n+            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+        else:\n+            # Create a new privacy policy\n+            new_policy = PrivacyPolicy.objects.create(description=description)\n+            return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n         \n-# @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n-# def retrieve_update_policy(self, request, *args, **kwargs):\n-#         try:\n-#             # Assuming there's only one privacy policy, get the first one.\n-#             privacy_policy = PrivacyPolicy.objects.first()\n+@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n+def retrieve_update_policy(self, request, *args, **kwargs):\n+        try:\n+            # Assuming there's only one privacy policy, get the first one.\n+            privacy_policy = PrivacyPolicy.objects.first()\n             \n-#             if not privacy_policy:\n-#                 return Response({\"data\": None}, status=status.HTTP_200_OK)\n+            if not privacy_policy:\n+                return Response({\"data\": None}, status=status.HTTP_200_OK)\n         \n-#         except PrivacyPolicy.DoesNotExist:\n-#             return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+        except PrivacyPolicy.DoesNotExist:\n+            return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-#         if request.method == 'GET':\n-#             # Retrieve the privacy policy\n-#             serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n-#             return Response(serializer.data, status=status.HTTP_200_OK)\n+        if request.method == 'GET':\n+            # Retrieve the privacy policy\n+            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n+            return Response(serializer.data, status=status.HTTP_200_OK)\n         \n-#         elif request.method == 'PUT':\n-#             # Update the privacy policy\n-#             description = request.data.get('description', None)\n+        elif request.method == 'PUT':\n+            # Update the privacy policy\n+            description = request.data.get('description', None)\n             \n-#             if description is None:\n-#                 return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+            if description is None:\n+                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n             \n-#             privacy_policy.description = description\n-#             privacy_policy.save()\n-#             return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n+            privacy_policy.description = description\n+            privacy_policy.save()\n+            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n         \n-# @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n-# def action_name(self, request, *args, **kwargs):\n-#         description = request.data.get('description', None)\n+@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n+def action_name(self, request, *args, **kwargs):\n+        description = request.data.get('description', None)\n         \n-#         if description is None:\n-#             return Response({\"data\": None}, status=status.HTTP_200_OK)\n+        if description is None:\n+            return Response({\"data\": None}, status=status.HTTP_200_OK)\n         \n-#         term_and_condition = TermAndCondition.objects.all()\n+        term_and_condition = TermAndCondition.objects.all()\n         \n-#         if term_and_condition.exists():\n-#             # Update the existing term and condition\n-#             term_and_condition = term_and_condition.first()\n-#             term_and_condition.description = description\n-#             term_and_condition.save()\n-#             return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n-#         else:\n-#             # Create a new term and condition\n-#             new_term_and_condition = TermAndCondition.objects.create(description=description)\n-#             return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n+        if term_and_condition.exists():\n+            # Update the existing term and condition\n+            term_and_condition = term_and_condition.first()\n+            term_and_condition.description = description\n+            term_and_condition.save()\n+            return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n+        else:\n+            # Create a new term and condition\n+            new_term_and_condition = TermAndCondition.objects.create(description=description)\n+            return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n         \n-# @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n-# def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n-#         try:\n-#             # Assuming there's only one term and condition, get the first one.\n-#             term_and_condition = TermAndCondition.objects.first()\n+@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n+def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n+        try:\n+            # Assuming there's only one term and condition, get the first one.\n+            term_and_condition = TermAndCondition.objects.first()\n             \n-#             if not term_and_condition:\n-#                 return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+            if not term_and_condition:\n+                return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n         \n-#         except TermAndCondition.DoesNotExist:\n-#             return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+        except TermAndCondition.DoesNotExist:\n+            return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-#         if request.method == 'GET':\n-#             # Retrieve the term and condition\n-#             serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n-#             return Response(serializer.data, status=status.HTTP_200_OK)\n+        if request.method == 'GET':\n+            # Retrieve the term and condition\n+            serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n+            return Response(serializer.data, status=status.HTTP_200_OK)\n         \n-#         elif request.method == 'PUT':\n-#             # Update the term and condition\n-#             description = request.data.get('description', None)\n+        elif request.method == 'PUT':\n+            # Update the term and condition\n+            description = request.data.get('description', None)\n             \n-#             if description is None:\n-#                 return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+            if description is None:\n+                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n             \n-#             term_and_condition.description = description\n-#             term_and_condition.save()\n-#             return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n+            term_and_condition.description = description\n+            term_and_condition.save()\n+            return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n \n"
                },
                {
                    "date": 1730113448525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,57 +9,10 @@\n from rest_framework.response import Response\n from rest_framework import status\n \n \n-# Create your views here.\n-@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n-def action_name(self, request, *args, **kwargs):\n-        description = request.data.get('description', None)\n-        \n-        if description is None:\n-            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n-        \n-        privacy_policy = PrivacyPolicy.objects.all()\n-        \n-        if privacy_policy.exists():\n-            # Update the existing privacy policy\n-            privacy_policy = privacy_policy.first()\n-            privacy_policy.description = description\n-            privacy_policy.save()\n-            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n-        else:\n-            # Create a new privacy policy\n-            new_policy = PrivacyPolicy.objects.create(description=description)\n-            return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n-        \n-@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n-def retrieve_update_policy(self, request, *args, **kwargs):\n-        try:\n-            # Assuming there's only one privacy policy, get the first one.\n-            privacy_policy = PrivacyPolicy.objects.first()\n-            \n-            if not privacy_policy:\n-                return Response({\"data\": None}, status=status.HTTP_200_OK)\n-        \n-        except PrivacyPolicy.DoesNotExist:\n-            return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-        if request.method == 'GET':\n-            # Retrieve the privacy policy\n-            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n-            return Response(serializer.data, status=status.HTTP_200_OK)\n         \n-        elif request.method == 'PUT':\n-            # Update the privacy policy\n-            description = request.data.get('description', None)\n-            \n-            if description is None:\n-                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n-            \n-            privacy_policy.description = description\n-            privacy_policy.save()\n-            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n-        \n @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n def action_name(self, request, *args, **kwargs):\n         description = request.data.get('description', None)\n         \n"
                },
                {
                    "date": 1730113480584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,53 +10,4 @@\n from rest_framework import status\n \n \n \n-        \n-@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n-def action_name(self, request, *args, **kwargs):\n-        description = request.data.get('description', None)\n-        \n-        if description is None:\n-            return Response({\"data\": None}, status=status.HTTP_200_OK)\n-        \n-        term_and_condition = TermAndCondition.objects.all()\n-        \n-        if term_and_condition.exists():\n-            # Update the existing term and condition\n-            term_and_condition = term_and_condition.first()\n-            term_and_condition.description = description\n-            term_and_condition.save()\n-            return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n-        else:\n-            # Create a new term and condition\n-            new_term_and_condition = TermAndCondition.objects.create(description=description)\n-            return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n-        \n-@action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n-def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n-        try:\n-            # Assuming there's only one term and condition, get the first one.\n-            term_and_condition = TermAndCondition.objects.first()\n-            \n-            if not term_and_condition:\n-                return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-        \n-        except TermAndCondition.DoesNotExist:\n-            return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-\n-        if request.method == 'GET':\n-            # Retrieve the term and condition\n-            serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n-            return Response(serializer.data, status=status.HTTP_200_OK)\n-        \n-        elif request.method == 'PUT':\n-            # Update the term and condition\n-            description = request.data.get('description', None)\n-            \n-            if description is None:\n-                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n-            \n-            term_and_condition.description = description\n-            term_and_condition.save()\n-            return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n-\n"
                },
                {
                    "date": 1730113585088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +0,0 @@\n-from django.shortcuts import render\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from .models import *\n-from .serializers.sitesetting_serializers import *\n-from .utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from rest_framework import status\n-\n-\n-\n\\ No newline at end of file\n"
                }
            ],
            "date": 1730113237536,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\n\n# Create your views here.\n@action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n    def action_name(self, request, *args, **kwargs):\n        description = request.data.get('description', None)\n        \n        if description is None:\n            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n        \n        privacy_policy = PrivacyPolicy.objects.all()\n        \n        if privacy_policy.exists():\n            # Update the existing privacy policy\n            privacy_policy = privacy_policy.first()\n            privacy_policy.description = description\n            privacy_policy.save()\n            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n        else:\n            # Create a new privacy policy\n            new_policy = PrivacyPolicy.objects.create(description=description)\n            return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n        \n    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n    def retrieve_update_policy(self, request, *args, **kwargs):\n        try:\n            # Assuming there's only one privacy policy, get the first one.\n            privacy_policy = PrivacyPolicy.objects.first()\n            \n            if not privacy_policy:\n                return Response({\"data\": None}, status=status.HTTP_200_OK)\n        \n        except PrivacyPolicy.DoesNotExist:\n            return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n\n        if request.method == 'GET':\n            # Retrieve the privacy policy\n            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        \n        elif request.method == 'PUT':\n            # Update the privacy policy\n            description = request.data.get('description', None)\n            \n            if description is None:\n                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n            \n            privacy_policy.description = description\n            privacy_policy.save()\n            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n        \n    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n    def action_name(self, request, *args, **kwargs):\n        description = request.data.get('description', None)\n        \n        if description is None:\n            return Response({\"data\": None}, status=status.HTTP_200_OK)\n        \n        term_and_condition = TermAndCondition.objects.all()\n        \n        if term_and_condition.exists():\n            # Update the existing term and condition\n            term_and_condition = term_and_condition.first()\n            term_and_condition.description = description\n            term_and_condition.save()\n            return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n        else:\n            # Create a new term and condition\n            new_term_and_condition = TermAndCondition.objects.create(description=description)\n            return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n        \n    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n    def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n        try:\n            # Assuming there's only one term and condition, get the first one.\n            term_and_condition = TermAndCondition.objects.first()\n            \n            if not term_and_condition:\n                return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n        \n        except TermAndCondition.DoesNotExist:\n            return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n\n        if request.method == 'GET':\n            # Retrieve the term and condition\n            serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        \n        elif request.method == 'PUT':\n            # Update the term and condition\n            description = request.data.get('description', None)\n            \n            if description is None:\n                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n            \n            term_and_condition.description = description\n            term_and_condition.save()\n            return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)\n\n"
        }
    ]
}