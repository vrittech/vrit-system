{
    "sourceFile": "emailmanagement/tasks.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1731649571594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731912934292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,16 @@\n from celery import shared_task\n-from .models import EmailLog, EmailManagement\n-from django.utils.timezone import now\n+from .models import EmailLog, EmailManagement, EmailLogRecipient\n+from django.utils.timezone import now, timedelta\n import logging\n \n logger = logging.getLogger(__name__)\n \n @shared_task\n def send_scheduled_emails():\n-    # Fetch scheduled emails that are due\n+    \"\"\"\n+    Task to send scheduled emails that are due.\n+    \"\"\"\n     due_emails = EmailLog.objects.filter(status='scheduled', scheduled_at__lte=now())\n \n     sent_count = 0\n     failed_count = 0\n@@ -25,22 +27,39 @@\n \n \n @shared_task\n def generate_email_logs():\n-    # Generate Email Logs based on Email Management configurations\n+    \"\"\"\n+    Task to generate email logs based on Email Management configurations.\n+    \"\"\"\n     email_templates = EmailManagement.objects.all()\n \n     generated_count = 0\n     for template in email_templates:\n-        # Logic for creating email logs\n-        log = EmailLog.objects.create(\n-            subject=template.subject,\n-            purpose=template.purpose,\n-            recipient=\"example@example.com\",  # Replace with real logic for recipients\n-            preview=template.body,\n-            status='scheduled',\n-            scheduled_at=now(),  # Replace with actual scheduling logic\n-        )\n-        generated_count += 1\n+        # Check frequency and generate logs accordingly\n+        last_generated_time = EmailLog.objects.filter(subject=template.subject).order_by('-created_at').first()\n+        frequency_map = {\n+            'day': timedelta(days=template.frequency_per),\n+            'week': timedelta(weeks=template.frequency_per),\n+            'month': timedelta(days=30 * template.frequency_per),\n+            'year': timedelta(days=365 * template.frequency_per),\n+        }\n+        if last_generated_time:\n+            next_scheduled_time = last_generated_time.created_at + frequency_map[template.frequency]\n+        else:\n+            next_scheduled_time = now()\n \n+        if now() >= next_scheduled_time:\n+            recipients = EmailLogRecipient.objects.all()  # Replace with actual recipient logic\n+            for recipient in recipients:\n+                log = EmailLog.objects.create(\n+                    subject=template.subject,\n+                    purpose=template.purpose,\n+                    preview=template.body,\n+                    status='scheduled',\n+                    scheduled_at=now(),  # Replace with actual scheduling logic if needed\n+                )\n+                log.recipient.add(recipient)\n+                generated_count += 1\n+\n     logger.info(f\"Generated {generated_count} email logs.\")\n     return f\"Generated {generated_count} email logs.\"\n"
                },
                {
                    "date": 1731924961609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         else:\n             next_scheduled_time = now()\n \n         if now() >= next_scheduled_time:\n-            recipients = EmailLogRecipient.objects.all()  # Replace with actual recipient logic\n+            recipients = EmailLogRecipient.objects.all() \n             for recipient in recipients:\n                 log = EmailLog.objects.create(\n                     subject=template.subject,\n                     purpose=template.purpose,\n"
                },
                {
                    "date": 1731925121024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         else:\n             next_scheduled_time = now()\n \n         if now() >= next_scheduled_time:\n-            recipients = EmailLogRecipient.objects.all() \n+            recipients = EmailLogRecipient.objects.all(). \n             for recipient in recipients:\n                 log = EmailLog.objects.create(\n                     subject=template.subject,\n                     purpose=template.purpose,\n"
                },
                {
                    "date": 1731925133591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         else:\n             next_scheduled_time = now()\n \n         if now() >= next_scheduled_time:\n-            recipients = EmailLogRecipient.objects.all(). \n+            recipients = EmailLogRecipient.objects.all().order_by \n             for recipient in recipients:\n                 log = EmailLog.objects.create(\n                     subject=template.subject,\n                     purpose=template.purpose,\n"
                },
                {
                    "date": 1731925140822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         else:\n             next_scheduled_time = now()\n \n         if now() >= next_scheduled_time:\n-            recipients = EmailLogRecipient.objects.all().order_by \n+            recipients = EmailLogRecipient.objects.all().order_by('created') \n             for recipient in recipients:\n                 log = EmailLog.objects.create(\n                     subject=template.subject,\n                     purpose=template.purpose,\n"
                },
                {
                    "date": 1731925147098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         else:\n             next_scheduled_time = now()\n \n         if now() >= next_scheduled_time:\n-            recipients = EmailLogRecipient.objects.all().order_by('created') \n+            recipients = EmailLogRecipient.objects.all().order_by('-id') \n             for recipient in recipients:\n                 log = EmailLog.objects.create(\n                     subject=template.subject,\n                     purpose=template.purpose,\n"
                }
            ],
            "date": 1731649571594,
            "name": "Commit-0",
            "content": "from celery import shared_task\nfrom .models import EmailLog, EmailManagement\nfrom django.utils.timezone import now\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@shared_task\ndef send_scheduled_emails():\n    # Fetch scheduled emails that are due\n    due_emails = EmailLog.objects.filter(status='scheduled', scheduled_at__lte=now())\n\n    sent_count = 0\n    failed_count = 0\n    for email in due_emails:\n        try:\n            email.send_email()\n            sent_count += 1\n        except Exception as e:\n            logger.error(f\"Failed to send email {email.id}: {e}\")\n            failed_count += 1\n\n    logger.info(f\"Scheduled email task: {sent_count} sent, {failed_count} failed.\")\n    return f\"Sent: {sent_count}, Failed: {failed_count}\"\n\n\n@shared_task\ndef generate_email_logs():\n    # Generate Email Logs based on Email Management configurations\n    email_templates = EmailManagement.objects.all()\n\n    generated_count = 0\n    for template in email_templates:\n        # Logic for creating email logs\n        log = EmailLog.objects.create(\n            subject=template.subject,\n            purpose=template.purpose,\n            recipient=\"example@example.com\",  # Replace with real logic for recipients\n            preview=template.body,\n            status='scheduled',\n            scheduled_at=now(),  # Replace with actual scheduling logic\n        )\n        generated_count += 1\n\n    logger.info(f\"Generated {generated_count} email logs.\")\n    return f\"Generated {generated_count} email logs.\"\n"
        }
    ]
}