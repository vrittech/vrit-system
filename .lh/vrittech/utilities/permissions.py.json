{
    "sourceFile": "vrittech/utilities/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1731581552093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731581560817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,4 +56,34 @@\n             return request.user.has_perm(permission_codename)\n \n         # Default to denying permission if no action matches\n         return False\n+\n+\n+from rest_framework.viewsets import ModelViewSet\n+from .permissions import GenericPermission\n+from .models import Project, Blog, BlogTags, BlogCategory\n+from .serializers import ProjectSerializer, BlogSerializer, BlogTagsSerializer, BlogCategorySerializer\n+\n+class ProjectViewSet(ModelViewSet):\n+    queryset = Project.objects.all()\n+    serializer_class = ProjectSerializer\n+    permission_classes = [GenericPermission]\n+    model_key = 'project'  # Set model_key for permission lookup\n+\n+class BlogViewSet(ModelViewSet):\n+    queryset = Blog.objects.all()\n+    serializer_class = BlogSerializer\n+    permission_classes = [GenericPermission]\n+    model_key = 'blog'  # Set model_key for permission lookup\n+\n+class BlogTagsViewSet(ModelViewSet):\n+    queryset = BlogTags.objects.all()\n+    serializer_class = BlogTagsSerializer\n+    permission_classes = [GenericPermission]\n+    model_key = 'blog-tags'  # Set model_key for permission lookup\n+\n+class BlogCategoryViewSet(ModelViewSet):\n+    queryset = BlogCategory.objects.all()\n+    serializer_class = BlogCategorySerializer\n+    permission_classes = [GenericPermission]\n+    model_key = 'blog-category'  # Set model_key for permission lookup\n"
                },
                {
                    "date": 1731581566558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,32 +58,32 @@\n         # Default to denying permission if no action matches\n         return False\n \n \n-from rest_framework.viewsets import ModelViewSet\n-from .permissions import GenericPermission\n-from .models import Project, Blog, BlogTags, BlogCategory\n-from .serializers import ProjectSerializer, BlogSerializer, BlogTagsSerializer, BlogCategorySerializer\n+# from rest_framework.viewsets import ModelViewSet\n+# from .permissions import GenericPermission\n+# from .models import Project, Blog, BlogTags, BlogCategory\n+# from .serializers import ProjectSerializer, BlogSerializer, BlogTagsSerializer, BlogCategorySerializer\n \n-class ProjectViewSet(ModelViewSet):\n-    queryset = Project.objects.all()\n-    serializer_class = ProjectSerializer\n-    permission_classes = [GenericPermission]\n-    model_key = 'project'  # Set model_key for permission lookup\n+# class ProjectViewSet(ModelViewSet):\n+#     queryset = Project.objects.all()\n+#     serializer_class = ProjectSerializer\n+#     permission_classes = [GenericPermission]\n+#     model_key = 'project'  # Set model_key for permission lookup\n \n-class BlogViewSet(ModelViewSet):\n-    queryset = Blog.objects.all()\n-    serializer_class = BlogSerializer\n-    permission_classes = [GenericPermission]\n-    model_key = 'blog'  # Set model_key for permission lookup\n+# class BlogViewSet(ModelViewSet):\n+#     queryset = Blog.objects.all()\n+#     serializer_class = BlogSerializer\n+#     permission_classes = [GenericPermission]\n+#     model_key = 'blog'  # Set model_key for permission lookup\n \n-class BlogTagsViewSet(ModelViewSet):\n-    queryset = BlogTags.objects.all()\n-    serializer_class = BlogTagsSerializer\n-    permission_classes = [GenericPermission]\n-    model_key = 'blog-tags'  # Set model_key for permission lookup\n+# class BlogTagsViewSet(ModelViewSet):\n+#     queryset = BlogTags.objects.all()\n+#     serializer_class = BlogTagsSerializer\n+#     permission_classes = [GenericPermission]\n+#     model_key = 'blog-tags'  # Set model_key for permission lookup\n \n-class BlogCategoryViewSet(ModelViewSet):\n-    queryset = BlogCategory.objects.all()\n-    serializer_class = BlogCategorySerializer\n-    permission_classes = [GenericPermission]\n-    model_key = 'blog-category'  # Set model_key for permission lookup\n+# class BlogCategoryViewSet(ModelViewSet):\n+#     queryset = BlogCategory.objects.all()\n+#     serializer_class = BlogCategorySerializer\n+#     permission_classes = [GenericPermission]\n+#     model_key = 'blog-category'  # Set model_key for permission lookup\n"
                }
            ],
            "date": 1731581552093,
            "name": "Commit-0",
            "content": "from rest_framework.permissions import BasePermission\n\n# Define a mapping between models and their app labels\nMODEL_MAP = {\n    'project': ('projects', 'Project'),\n    'project-service': ('projects', 'ProjectService'),\n    'project-group': ('projects', 'ProjectGroup'),\n    'blog': ('blog', 'Blog'),\n    'blog-tags': ('blog', 'BlogTags'),\n    'blog-category': ('blog', 'BlogCategory'),\n    'career': ('career', 'Career'),\n    'case-study': ('casestudy', 'CaseStudy'),\n    'case-study-tags': ('casestudy', 'CaseStudyTags'),\n    'case-study-category': ('casestudy', 'CaseStudyCategory'),\n    'clients': ('clients', 'Clients'),\n    'faqs': ('faqs', 'Faq'),\n    'forms': ('forms', 'Form'),\n    'forms-category': ('forms', 'Category'),\n    'plan': ('plan', 'Plan'),\n    'testimonial': ('testimonial', 'Testimonial'),\n    'department': ('department', 'Department'),\n    'gallery': ('gallery', 'Gallery'),\n    'social-media': ('socialmedia', 'SocialMedia'),\n    'role': ('accounts', 'Group'),\n    # Add or modify mappings as necessary\n}\n\nclass GenericPermission(BasePermission):\n    def has_permission(self, request, view):\n        # Allow list action for all users without checking specific permissions\n        if view.action == \"list\":\n            return True\n\n        # Determine the model name from the view's model_key or URL/serializer context\n        model_key = getattr(view, 'model_key', None)\n        if not model_key or model_key not in MODEL_MAP:\n            return False  # Deny permission if model_key is not defined or not in MODEL_MAP\n\n        # Retrieve the app label and model name from MODEL_MAP\n        app_label, model_name = MODEL_MAP[model_key]\n\n        # Define action to permission suffix mapping\n        action_permission_suffix = {\n            \"retrieve\": \"view\",\n            \"create\": \"add\",\n            \"update\": \"change\",\n            \"partial_update\": \"change\",\n            \"destroy\": \"delete\",\n        }\n\n        # Check if the action has a defined permission suffix\n        if view.action in action_permission_suffix:\n            permission_suffix = action_permission_suffix[view.action]\n            # Construct the permission codename, e.g., 'app_label.view_modelname'\n            permission_codename = f\"{app_label}.{permission_suffix}_{model_name.lower()}\"\n            return request.user.has_perm(permission_codename)\n\n        # Default to denying permission if no action matches\n        return False\n"
        }
    ]
}