{
    "sourceFile": "socialmedia/utilities/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1731580926160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731580934773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,4 +53,26 @@\n #             return view.get_object().user_id == request.user.id\n #         elif view.action == 'destroy':\n #             return isOwner(request)\n \n+class SocialMediaPermission(BasePermission):\n+    def has_permission(self, request, view):\n+        # Allow list action for all users\n+        if view.action == \"list\":\n+            return True\n+\n+        # Define static permissions for each action\n+        permissions = {\n+            \"retrieve\": \"socialmedia.view_socialmedia\",\n+            \"create\": \"socialmedia.add_socialmedia\",\n+            \"update\": \"socialmedia.change_socialmedia\",\n+            \"partial_update\": \"socialmedia.change_socialmedia\",\n+            \"destroy\": \"socialmedia.delete_socialmedia\",\n+        }\n+\n+        # Check if the action has a corresponding permission defined\n+        if view.action in permissions:\n+            required_permission = permissions[view.action]\n+            return request.user.has_perm(required_permission)\n+\n+        # Default to denying permission if action does not match any predefined keys\n+        return False\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731581254948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n #             return view.get_object().user_id == request.user.id\n #         elif view.action == 'destroy':\n #             return isOwner(request)\n \n-class SocialMediaPermission(BasePermission):\n+class socialmediaPermission(BasePermission):\n     def has_permission(self, request, view):\n         # Allow list action for all users\n         if view.action == \"list\":\n             return True\n"
                }
            ],
            "date": 1731580926160,
            "name": "Commit-0",
            "content": "#------permission are classified into three types------->\n#first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n#second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n#third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n\n#model ObjectB->user field\n#model ObjectC->objectB field(objectB id)\n\n\n#as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n\nfrom rest_framework.permissions import BasePermission\n\nSUPER_ADMIN = 1\nADMIN = 2\n\n\ndef IsAuthenticated(request):\n    return bool(request.user and request.user.is_authenticated)\n\ndef SuperAdminLevel(request):\n    return bool(IsAuthenticated(request) and request.user.is_superuser)\n\ndef AdminLevel(request):\n    return bool(IsAuthenticated(request) and request.user.role in [ADMIN,SUPER_ADMIN])\n\ndef isOwner(request):\n    if str(request.user.id) == str(request.data.get('user')):\n        return True\n    \n    elif len(request.data)==0 and len(request.POST)==0:\n        return True\n\n    return False\n\n\n# def ObjectBOwner(request):\n#     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n#     if company.exists():\n#         return True\n#     return False\n\n# class socialmediaPermission(BasePermission):\n#     def has_permission(self, request, view):\n#         if view.action in [\"list\"]:\n#             return True\n#         elif view.action in ['retrieve']:\n#             return isOwner(request)\n#         elif view.action in ['create','update']:\n#             return isOwner(request) #second level\n#             return ObjectBOwner(request) #third level\n#         elif view.action == \"partial_update\":\n#             return view.get_object().user_id == request.user.id\n#         elif view.action == 'destroy':\n#             return isOwner(request)\n\n"
        }
    ]
}