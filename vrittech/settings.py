"""
Django settings for vrittech project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import platform
server_type = "AWS"#"LOCAL"

DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

current_os = platform.system()

if current_os == "Linux" and server_type == "AWS":
    dotenv_path = os.path.join(os.path.dirname(__file__), '.env') #server env
else:
    # dotenv_path = os.path.join(os.path.dirname(__file__), 'env_local') #this is local env
    dotenv_path = os.path.join(os.path.dirname(__file__), '.env') #server env
load_dotenv(dotenv_path)

# Security settings
# SESSION_COOKIE_SECURE = not DEBUG  # Secure cookies in production
# CSRF_COOKIE_SECURE = not DEBUG     # CSRF cookies over HTTPS in production
# SECURE_SSL_REDIRECT = not DEBUG    # Redirect HTTP to HTTPS in production
# SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # HSTS for 1 year in production
# SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
# SECURE_HSTS_PRELOAD = not DEBUG

# # Session settings
# SESSION_COOKIE_AGE = 86400 if not DEBUG else 3600  # 1 day for production, 1 hour for development
# SESSION_EXPIRE_AT_BROWSER_CLOSE = DEBUG  # Expire session on browser close in development

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
ALLOWED_HOSTS = [host for host in os.getenv('ALLOWED_HOSTS').split(',') if host != '']

# Application definition
# settings.py

# settings.py

FILE_UPLOAD_MAX_MEMORY_SIZE = 850 * 1024 * 1024  # 850 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 850 * 1024 * 1024  # 850 MB

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z_v50#t3ksa39g*-$g_bj00(lw^st%@u68_xmcp!9wk*iuf*q$'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    'rest_framework',
    # 'drf_yasg',
    'ordered_model',
    'django_celery_beat',
    'django_filters',
    'accounts',
    'blog',
    'career',
    'casestudy',
    'clients',
    'department',
    'emailmanagement',
    'faqs',
    'gallery',
    'globalpresence',
    'inquires',
    'newslettersubscription',
    'plan',
    'projects',
    'services',
    'socialmedia',
    'testimonial',
    'sitesetting',
    'careergallery',
    'management',
    'forms',
    'notifications',
    'termsconditionsprivacypolicy',
    'customgallery',
    'notification',
    'teammember',
    'blogs',
    'project',
    'web_branding',
    # 'drfapigenerator',
    
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = [white for white in os.getenv('CORS_ORIGIN_WHITELIST').split(',') if white != '']
CSRF_TRUSTED_ORIGINS = [trusted for trusted in os.getenv('CSRF_TRUSTED_ORIGINS').split(',') if trusted != '']

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # static file serving.
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'vrittech.urls'
AUTH_USER_MODEL = "accounts.CustomUser"



BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ os.path.join(BASE_DIR, "templates"),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vrittech.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'accounts.backend.EmailserBackend',
]
# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


import os
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'https://api.everestthrills.com/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
MEDIA_URL = 'media/'

STATIC_ROOT = os.path.join(BASE_DIR,'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR,'media')


STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_ORIGIN_ALLOW_ALL = True #if True then allow only for whitelist ip.(frontend request)
CORS_ORIGIN_WHITELIST = [white for white in os.getenv('CORS_ORIGIN_WHITELIST').split(',') if white != '']
CSRF_TRUSTED_ORIGINS = [trusted for trusted in os.getenv('CSRF_TRUSTED_ORIGINS').split(',') if trusted != '']


from datetime import timedelta

# SIMPLE_JWT = {
#     "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
#     "ROTATE_REFRESH_TOKENS": False,
#     "BLACKLIST_AFTER_ROTATION": False,
#     "UPDATE_LAST_LOGIN": False,

#     "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
# }
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # "rest_framework.authentication.SessionAuthentication",  # For session-based authentication
        # "rest_framework.authentication.TokenAuthentication",    # Optional fallback
        # "rest_framework.authentication.BasicAuthentication",    # Optional fallback
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    # "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    # "PAGE_SIZE": 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# REST_FRAMEWORK = {
#     "DEFAULT_AUTHENTICATION_CLASSES": (
#         "rest_framework_simplejwt.authentication.JWTAuthentication",
#         "rest_framework.authentication.TokenAuthentication",
#         "rest_framework.authentication.BasicAuthentication",
#         "rest_framework.authentication.SessionAuthentication",
#     ),
#     "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
#     "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
#     # "MAX_PAGE_SIZE": 1
# }

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=90),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "AUTH_HEADER_TYPES": ("Bearer", "JWT"),
    # "USER_ID_FIELD": "id",
    # "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
}

# EMAIL_USE_TLS = True
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'manojdas.py@gmail.com'
# EMAIL_HOST_PASSWORD = 'qizi zhwj urhp vmvv'

# EMAIL_BACKEND = 'setupemail.utilities.custom_email_setup_backend.CustomEmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = 'email-smtp.us-east-1.amazonaws.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'AKIAQITMQCX6BWDTVZOP'
EMAIL_HOST_PASSWORD = 'BGVhKRPSCy6Mk/SEVnfZ1GX55baGjBFjyftf4L/9bt+a'
DEFAULT_FROM_EMAIL = "manoj@vrittechnologies.com"
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

SMS_KEY_PASSWORD = ''


# CORS_ORIGIN_ALLOW_ALL = False  # Set to False if you want to whitelist specific origins
# CORS_ALLOW_CREDENTIALS = True

# ALLOWED_HOSTS = ["127.0.0.1", "localhost", "0.0.0.0", "192.168.1.10", "*"]



DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE'),
        'NAME': os.getenv('DATABASES_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}

# CELERY_BROKER_URL = 'redis://localhost:6379/0'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# CELERY_TIMEZONE = 'Asia/Kathmandu'
# CELERY_ENABLE_UTC = False

# CELERY_BEAT_SCHEDULE = {
#     'publish-scheduled-blogs-every-hour': {
#         'task': 'your_app.tasks.publish_scheduled_blogs_task',
#         'schedule': 3600,  # Runs every hour
#     },
# }

# Celery Configuration
# CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis as the broker
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'

# # Optional: Result backend (if you want to track task results)
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# CELERY_RESULT_EXTENDED = True

# # Celery Timezone
# CELERY_TIMEZONE = 'Asia/Kathmandu'
# CELERY_ENABLE_UTC = True

# TIME_ZONE = 'Asia/Kathmandu'
# USE_TZ = False

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'INFO',
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         'celery': {
#             'handlers': ['console'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#     },
# }




ASGI_APPLICATION = "vrittech.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6380)],
        },
    },
}


# ==========================
# Celery Configuration
# ==========================

# Redis as the broker (use DB 1 so it won’t clash with Channels that may use DB 0)
CELERY_BROKER_URL = 'redis://127.0.0.1:6380/1'

# Accepted content types
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# Result backend (optional but useful for debugging + tracking results)
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6380/2'
CELERY_RESULT_EXTENDED = True

# Timezone Settings
USE_TZ = True
TIME_ZONE = 'Asia/Kathmandu'

CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = 'Asia/Kathmandu'

# ==========================
# Logging (Celery + Django)
# ==========================
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}