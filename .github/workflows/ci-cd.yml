name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4  # Updated to latest version

    - name: Set up Python
      uses: actions/setup-python@v4  # Updated to latest version
      with:
        python-version: '3.10.12'  # Added quotes for consistency

    - name: Upgrade pip and install setuptools
      run: |
        python -m pip install --upgrade pip
        # Removed specific pip version constraint for better compatibility

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run tests (optional)
      run: |
        # Uncomment when ready to add tests
        # python manage.py test

    - name: Deploy to VPS
      env:
        BACKEND_USER: backend
        BACKEND_PASSWORD: backend
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_IP: "172.188.217.99"
        PORT: "8001"
        USER: "azure"
        PROJECT_FOLDER: "/home/nirbhay/nirbhay_vrit/vrit-system"
        SCREEN_NAME: "django_app"

      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add server to known hosts to avoid prompt
        ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

        # Create necessary directories on the server
        echo "Creating necessary directories on the server"
        ssh -o StrictHostKeyChecking=no $USER@$SERVER_IP "mkdir -p $PROJECT_FOLDER"

        # Use rsync to copy only changed files (with better error handling)
        echo "Syncing files to server"
        rsync -avz --delete \
          --exclude='__pycache__/' \
          --exclude='venv/' \
          --exclude='env/' \
          --exclude='db.sqlite3' \
          --exclude='staticfiles/' \
          --exclude='media/' \
          --exclude='.git/' \
          --exclude='*.pyc' \
          --exclude='.env' \
          --no-times \
          --no-perms \
          -e "ssh -o StrictHostKeyChecking=no" \
          ./ $USER@$SERVER_IP:$PROJECT_FOLDER/

        # Run deployment commands on the server
        echo "Running deployment commands on the server"
        ssh -o StrictHostKeyChecking=no $USER@$SERVER_IP << 'EOF'
          cd $PROJECT_FOLDER
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          # Activate virtual environment and install dependencies
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Run Django management commands
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput
          
          # Stop existing screen session if running
          screen -ls | grep django_app | awk '{print $1}' | xargs -r -I{} screen -X -S {} quit
          
          # Start new screen session with Django server
          screen -dmS django_app bash -c "source venv/bin/activate && python manage.py runserver 0.0.0.0:8001"
          
          echo "Deployment completed successfully!"
          screen -ls
EOF